{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/BarEditor.js\";\nimport React from 'react';\nimport { Editor, BarChartInputFields, Menu, LabeledTextField, LabeledColorPicker, FontSelector, LabeledDropdown, StackedBarInputFields } from './Components/index';\nimport { LabeledCheckbox } from './Components/LabeledCheckbox';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BarEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: 0 // 0 - Settings and 1 - Design Options\n\n    };\n    this._defaultFont = {\n      fontFamily: 'Times New Roman, Times, serif',\n      fontSize: 10,\n      textColor: '#000'\n    };\n    this._settingsManager = new SettingsManager({\n      cSettings: this.props.cSettings,\n      dSettings: this.props.dSettings,\n      setChartSettings: settings => {\n        this.props.setChartSettings(settings);\n      },\n      setDecoratorSettings: settings => {\n        this.props.setDecoratorSettings(settings);\n      }\n    });\n    this._defaultSettings = {\n      remainder: {\n        color: {\n          barColor: '#000'\n        }\n      },\n      xAxis: {\n        font: this._defaultFont,\n        color: {\n          lineColor: '#000'\n        },\n        size: {\n          lineStrokeWidth: 1,\n          tickStrokeWidth: 0.5\n        }\n      },\n      yAxis: {\n        font: this._defaultFont,\n        color: {\n          lineColor: '#000'\n        },\n        size: {\n          lineStrokeWidth: 1,\n          tickStrokeWidth: 0.5\n        }\n      },\n      dataValue: {\n        font: this._defaultFont,\n        location: {\n          isMiddle: true\n        },\n        display: {\n          isPercentage: true,\n          isCategory: false\n        }\n      },\n      categoryLabel: {\n        font: this._defaultFont,\n        location: {\n          isTop: true,\n          isWithinBars: true\n        }\n      },\n      chartDescriptor: {\n        font: this._defaultFont,\n        location: {\n          isTop: true\n        },\n        labelSettings: {\n          maxPerRow: 3\n        }\n      }\n    };\n  }\n\n  render() {\n    console.log(this._defaultSettings);\n    let content = {\n      chartSettings: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Chart Data\",\n        isOpen: true,\n        content: this._GetChartDataContent(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'chart-data', false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Size\",\n        isOpen: false,\n        content: this._GetSizeContent(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'size', false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Background Color\",\n        isOpen: false,\n        content: this._GetRemainderContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.remainder === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'remainder', {\n              remainder: this._defaultSettings.remainder\n            });\n          }\n        }\n      }, 'background-color', false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Orientation\",\n        isOpen: false,\n        content: this._GetOrientationContent(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'orietation', false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)],\n      designOptions: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"X-Axis\",\n        isOpen: false,\n        content: this._GetXAxisContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.xAxis === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'xAxis', {\n              xAxis: this._defaultSettings.xAxis\n            });\n          }\n        }\n      }, 'x-axis', false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Y-Axis\",\n        isOpen: false,\n        content: this._GetYAxisContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.yAxis === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'yAxis', {\n              yAxis: this._defaultSettings.yAxis\n            });\n          }\n        }\n      }, 'y-axis', false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Data Labels\",\n        isOpen: false,\n        content: this._GetDataLabelsContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.dataValue === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'dataValue', {\n              dataValue: this._defaultSettings.dataValue\n            });\n          }\n        }\n      }, 'data-labels', false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        keys: \"category-labels\",\n        name: \"Category Labels\",\n        isOpen: false,\n        content: this._GetCategoryContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.categoryLabel === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'categoryLabel', {\n              categoryLabel: this._defaultSettings.categoryLabel\n            });\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        keys: \"category-legend\",\n        name: \"Category Legend\",\n        isOpen: false,\n        content: this._GetDescriptionContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.chartDescriptor === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'chartDescriptor', {\n              chartDescriptor: this._defaultSettings.chartDescriptor\n            });\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        content: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this);\n  }\n\n  _SetChartSettings(category, key, value) {\n    this._settingsManager.SetChartSettings(category, key, value);\n  }\n  /**\n   * @summary     Update existing decorator entry \n   */\n\n\n  _UpdateDecoratorSettings(decorator, category, key, value) {\n    this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n  }\n\n  _CheckboxHandler(checkboxValue, key, decoratorSettings) {\n    this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n  }\n\n  _GetChartDataContent() {\n    if (this.props.type === 'bar-editor') {\n      return [/*#__PURE__*/_jsxDEV(BarChartInputFields, {\n        chartData: this.props.chartData,\n        setChartData: d => {\n          this.props.setChartData(d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this)];\n    }\n\n    return [/*#__PURE__*/_jsxDEV(StackedBarInputFields, {\n      chartData: this.props.chartData,\n      setChartData: d => {\n        this.props.setChartData(d);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetSizeContent() {\n    let cSettings = this.props.cSettings,\n        cols = 15;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Width:\",\n        index: 'c-width',\n        initialValue: cSettings.size.chartWidth,\n        rows: 1,\n        cols: cols,\n        onChange: (d, i) => {\n          this._SetChartSettings('size', 'chartWidth', parseFloat(d));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Height:\",\n        index: 'c-height',\n        initialValue: cSettings.size.chartHeight,\n        rows: 1,\n        cols: cols,\n        onChange: (d, i) => {\n          this._SetChartSettings('size', 'chartHeight', parseFloat(d));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Bar Padding:\",\n        index: 'c-padding',\n        initialValue: cSettings.size.padding,\n        rows: 1,\n        cols: cols,\n        onChange: (d, i) => {\n          this._SetChartSettings('size', 'padding', parseFloat(d));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetOrientationContent() {\n    let orientation = this.props.cSettings.orientation;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(LabeledCheckbox, {\n        label: \"Landscape:\",\n        initialValue: orientation.landscape,\n        onClick: value => {\n          this._SetChartSettings('orientation', 'landscape', value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetRemainderContent() {\n    let color = this.props.dSettings.remainder === undefined ? '#000' : this.props.dSettings.remainder.color.barColor;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n        label: \"Bar Color:\",\n        color: color,\n        onChange: value => {\n          this._UpdateDecoratorSettings('remainder', 'color', 'barColor', value);\n        }\n      }, 'remainder-color-picker', false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetXAxisContent() {\n    let xAxisSettings = this.props.dSettings.xAxis === undefined ? this._defaultSettings.xAxis : this.props.dSettings.xAxis;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Axis Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Axis Label:\",\n          index: 'x-axis',\n          initialValue: '',\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n          label: \"Axis Color:\",\n          color: xAxisSettings.color.lineColor,\n          onChange: value => {\n            this._UpdateDecoratorSettings('xAxis', 'color', 'lineColor', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Line width:\",\n          index: 'x-axis',\n          initialValue: xAxisSettings.size.lineStrokeWidth,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('xAxis', 'size', 'lineStrokeWidth', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Tick width:\",\n          index: 'x-axis',\n          initialValue: xAxisSettings.size.tickStrokeWidth,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('xAxis', 'size', 'tickStrokeWidth', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: xAxisSettings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('xAxis', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('xAxis', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('xAxis', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetYAxisContent() {\n    let yAxisSettings = this.props.dSettings.yAxis === undefined ? this._defaultSettings.yAxis : this.props.dSettings.yAxis;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Axis Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Axis Label:\",\n          index: 'y-axis',\n          initialValue: '',\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n          label: \"Axis Color:\",\n          color: yAxisSettings.color.lineColor,\n          onChange: value => {\n            this._UpdateDecoratorSettings('yAxis', 'color', 'lineColor', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Line width:\",\n          index: 'y-axis',\n          initialValue: yAxisSettings.size.lineStrokeWidth,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('yAxis', 'size', 'lineStrokeWidth', parseFloat(d));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Tick width:\",\n          index: 'y-axis',\n          initialValue: yAxisSettings.size.tickStrokeWidth,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('yAxis', 'size', 'tickStrokeWidth', parseFloat(d));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: yAxisSettings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('yAxis', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('yAxis', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('yAxis', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetDataLabelsContent() {\n    let settings = this.props.dSettings.dataValue === undefined ? this._defaultSettings.dataValue : this.props.dSettings.dataValue;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Display Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledCheckbox, {\n          label: \"Display Category:\",\n          initialValue: settings.display.isCategory,\n          onClick: d => {\n            this._UpdateDecoratorSettings('dataValue', 'display', 'isCategory', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledCheckbox, {\n          label: \"Display Percentage:\",\n          initialValue: settings.display.isPercentage,\n          onClick: d => {\n            this._UpdateDecoratorSettings('dataValue', 'display', 'isPercentage', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledDropdown, {\n          label: \"Location:\",\n          options: ['Middle', 'Top'],\n          selected: settings.location.isMiddle ? 'Middle' : 'Top',\n          onChange: value => {\n            let location = false;\n            if (value === 'Middle') location = true;\n\n            this._UpdateDecoratorSettings('dataValue', 'location', 'isMiddle', location);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: settings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('dataValue', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('dataValue', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('dataValue', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetCategoryContent() {\n    let settings = this.props.dSettings.categoryLabel === undefined ? this._defaultSettings.categoryLabel : this.props.dSettings.categoryLabel;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Location Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledDropdown, {\n          label: \"Location:\",\n          options: ['Top', 'Bottom'],\n          selected: settings.location.isTop === true ? 'Top' : 'Bottom',\n          onChange: value => {\n            let location = false;\n            if (value === 'Top') location = true;\n\n            this._UpdateDecoratorSettings('categoryLabel', 'location', 'isTop', location);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledCheckbox, {\n          label: \"Display inside bars:\",\n          initialValue: settings.location.isWithinBars,\n          onClick: d => {\n            this._UpdateDecoratorSettings('categoryLabel', 'location', 'isWithinBars', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: settings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('categoryLabel', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('categoryLabel', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('categoryLabel', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetDescriptionContent() {\n    let settings = this.props.dSettings.chartDescriptor === undefined ? this._defaultSettings.chartDescriptor : this.props.dSettings.chartDescriptor;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Display Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledDropdown, {\n          label: \"Location:\",\n          options: ['Top', 'Bottom'],\n          selected: settings.location.isTop === true ? 'Top' : 'Bottom',\n          onChange: value => {\n            let location = false;\n            if (value === 'Top') location = true;\n\n            this._UpdateDecoratorSettings('chartDescriptor', 'location', 'isTop', location);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Max per row:\",\n          index: 'maxPerRow',\n          initialValue: settings.labelSettings.maxPerRow,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('chartDescriptor', 'labelSettings', 'maxPerRow', parseFloat(d));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: settings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('chartDescriptor', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('chartDescriptor', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('chartDescriptor', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 13\n    }, this)];\n  }\n\n}\n\nexport { BarEditor };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/BarEditor.js"],"names":["React","Editor","BarChartInputFields","Menu","LabeledTextField","LabeledColorPicker","FontSelector","LabeledDropdown","StackedBarInputFields","LabeledCheckbox","SettingsManager","BarEditor","Component","constructor","props","state","currentTab","_defaultFont","fontFamily","fontSize","textColor","_settingsManager","cSettings","dSettings","setChartSettings","settings","setDecoratorSettings","_defaultSettings","remainder","color","barColor","xAxis","font","lineColor","size","lineStrokeWidth","tickStrokeWidth","yAxis","dataValue","location","isMiddle","display","isPercentage","isCategory","categoryLabel","isTop","isWithinBars","chartDescriptor","labelSettings","maxPerRow","render","console","log","content","chartSettings","_GetChartDataContent","displayCheckbox","_GetSizeContent","_GetRemainderContent","isChecked","undefined","checkboxHandler","d","_CheckboxHandler","_GetOrientationContent","designOptions","_GetXAxisContent","_GetYAxisContent","_GetDataLabelsContent","_GetCategoryContent","_GetDescriptionContent","_SetChartSettings","category","key","value","SetChartSettings","_UpdateDecoratorSettings","decorator","UpdateDecoratorSettings","checkboxValue","decoratorSettings","DecoratorToggle","type","chartData","setChartData","cols","chartWidth","i","parseFloat","chartHeight","padding","orientation","landscape","xAxisSettings","yAxisSettings"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,mBAAjB,EAAsCC,IAAtC,EAA4CC,gBAA5C,EAA8DC,kBAA9D,EACMC,YADN,EACoBC,eADpB,EACqCC,qBADrC,QACiE,oBADjE;AAEA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,eAAT,QAAgC,+BAAhC;;;AAEA,MAAMC,SAAN,SAAwBX,KAAK,CAACY,SAA9B,CACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,CADH,CACK;;AADL,KAAb;AAIA,SAAKC,YAAL,GAAoB;AAChBC,MAAAA,UAAU,EAAE,+BADI;AAEhBC,MAAAA,QAAQ,EAAE,EAFM;AAGhBC,MAAAA,SAAS,EAAE;AAHK,KAApB;AAMA,SAAKC,gBAAL,GAAwB,IAAIX,eAAJ,CAAoB;AACxCY,MAAAA,SAAS,EAAE,KAAKR,KAAL,CAAWQ,SADkB;AAExCC,MAAAA,SAAS,EAAE,KAAKT,KAAL,CAAWS,SAFkB;AAGxCC,MAAAA,gBAAgB,EAAGC,QAAD,IAAc;AAAE,aAAKX,KAAL,CAAWU,gBAAX,CAA4BC,QAA5B;AAAwC,OAHlC;AAIxCC,MAAAA,oBAAoB,EAAGD,QAAD,IAAc;AAAE,aAAKX,KAAL,CAAWY,oBAAX,CAAgCD,QAAhC;AAA4C;AAJ1C,KAApB,CAAxB;AAOA,SAAKE,gBAAL,GAAwB;AACpBC,MAAAA,SAAS,EAAE;AACPC,QAAAA,KAAK,EAAE;AACHC,UAAAA,QAAQ,EAAE;AADP;AADA,OADS;AAMpBC,MAAAA,KAAK,EAAE;AACHC,QAAAA,IAAI,EAAE,KAAKf,YADR;AAEHY,QAAAA,KAAK,EAAE;AACHI,UAAAA,SAAS,EAAE;AADR,SAFJ;AAKHC,QAAAA,IAAI,EAAE;AACFC,UAAAA,eAAe,EAAE,CADf;AAEFC,UAAAA,eAAe,EAAE;AAFf;AALH,OANa;AAgBpBC,MAAAA,KAAK,EAAE;AACHL,QAAAA,IAAI,EAAE,KAAKf,YADR;AAEHY,QAAAA,KAAK,EAAE;AACHI,UAAAA,SAAS,EAAE;AADR,SAFJ;AAKHC,QAAAA,IAAI,EAAE;AACFC,UAAAA,eAAe,EAAE,CADf;AAEFC,UAAAA,eAAe,EAAE;AAFf;AALH,OAhBa;AA0BpBE,MAAAA,SAAS,EAAE;AACPN,QAAAA,IAAI,EAAE,KAAKf,YADJ;AAEPsB,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAFH;AAGPC,QAAAA,OAAO,EAAE;AACLC,UAAAA,YAAY,EAAE,IADT;AAELC,UAAAA,UAAU,EAAE;AAFP;AAHF,OA1BS;AAkCpBC,MAAAA,aAAa,EAAE;AACXZ,QAAAA,IAAI,EAAE,KAAKf,YADA;AAEXsB,QAAAA,QAAQ,EAAE;AACNM,UAAAA,KAAK,EAAE,IADD;AAENC,UAAAA,YAAY,EAAE;AAFR;AAFC,OAlCK;AAyCpBC,MAAAA,eAAe,EAAE;AACbf,QAAAA,IAAI,EAAE,KAAKf,YADE;AAEbsB,QAAAA,QAAQ,EAAE;AAAEM,UAAAA,KAAK,EAAE;AAAT,SAFG;AAGbG,QAAAA,aAAa,EAAE;AACXC,UAAAA,SAAS,EAAE;AADA;AAHF;AAzCG,KAAxB;AAiDH;;AAEDC,EAAAA,MAAM,GACN;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKzB,gBAAjB;AACA,QAAI0B,OAAO,GAAG;AACVC,MAAAA,aAAa,EAAE,cACX,QAAC,IAAD;AAEI,QAAA,IAAI,EAAC,YAFT;AAGI,QAAA,MAAM,EAAE,IAHZ;AAII,QAAA,OAAO,EAAE,KAAKC,oBAAL,EAJb;AAKI,QAAA,QAAQ,EAAE;AAAEC,UAAAA,eAAe,EAAE;AAAnB;AALd,SACQ,YADR;AAAA;AAAA;AAAA;AAAA,cADW,eAOX,QAAC,IAAD;AAEI,QAAA,IAAI,EAAC,MAFT;AAGI,QAAA,MAAM,EAAE,KAHZ;AAII,QAAA,OAAO,EAAE,KAAKC,eAAL,EAJb;AAKI,QAAA,QAAQ,EAAE;AAAED,UAAAA,eAAe,EAAE;AAAnB;AALd,SACQ,MADR;AAAA;AAAA;AAAA;AAAA,cAPW,eAaX,QAAC,IAAD;AAEI,QAAA,IAAI,EAAC,kBAFT;AAGI,QAAA,MAAM,EAAE,KAHZ;AAII,QAAA,OAAO,EAAE,KAAKE,oBAAL,EAJb;AAKI,QAAA,QAAQ,EAAE;AACNF,UAAAA,eAAe,EAAE,IADX;AAENG,UAAAA,SAAS,EAAE,EAAE,KAAK7C,KAAL,CAAWS,SAAX,CAAqBK,SAArB,KAAmCgC,SAArC,CAFL;AAGNC,UAAAA,eAAe,EAAGC,CAAD,IAAO;AACpB,iBAAKC,gBAAL,CAAsBD,CAAtB,EAAyB,WAAzB,EAAsC;AAAClC,cAAAA,SAAS,EAAE,KAAKD,gBAAL,CAAsBC;AAAlC,aAAtC;AACH;AALK;AALd,SACQ,kBADR;AAAA;AAAA;AAAA;AAAA,cAbW,eAyBX,QAAC,IAAD;AAEI,QAAA,IAAI,EAAC,aAFT;AAGI,QAAA,MAAM,EAAE,KAHZ;AAII,QAAA,OAAO,EAAE,KAAKoC,sBAAL,EAJb;AAKI,QAAA,QAAQ,EAAE;AAAER,UAAAA,eAAe,EAAE;AAAnB;AALd,SACQ,YADR;AAAA;AAAA;AAAA;AAAA,cAzBW,CADL;AAiCVS,MAAAA,aAAa,EAAE,cACX,QAAC,IAAD;AAEI,QAAA,IAAI,EAAC,QAFT;AAGI,QAAA,MAAM,EAAE,KAHZ;AAII,QAAA,OAAO,EAAE,KAAKC,gBAAL,EAJb;AAKI,QAAA,QAAQ,EAAE;AACNV,UAAAA,eAAe,EAAE,IADX;AAENG,UAAAA,SAAS,EAAE,EAAE,KAAK7C,KAAL,CAAWS,SAAX,CAAqBQ,KAArB,KAA+B6B,SAAjC,CAFL;AAGNC,UAAAA,eAAe,EAAGC,CAAD,IAAO;AACpB,iBAAKC,gBAAL,CAAsBD,CAAtB,EAAyB,OAAzB,EAAkC;AAAC/B,cAAAA,KAAK,EAAE,KAAKJ,gBAAL,CAAsBI;AAA9B,aAAlC;AACH;AALK;AALd,SACQ,QADR;AAAA;AAAA;AAAA;AAAA,cADW,eAcX,QAAC,IAAD;AAEI,QAAA,IAAI,EAAC,QAFT;AAGI,QAAA,MAAM,EAAE,KAHZ;AAII,QAAA,OAAO,EAAE,KAAKoC,gBAAL,EAJb;AAKI,QAAA,QAAQ,EAAE;AACNX,UAAAA,eAAe,EAAE,IADX;AAENG,UAAAA,SAAS,EAAE,EAAE,KAAK7C,KAAL,CAAWS,SAAX,CAAqBc,KAArB,KAA+BuB,SAAjC,CAFL;AAGNC,UAAAA,eAAe,EAAGC,CAAD,IAAO;AACpB,iBAAKC,gBAAL,CAAsBD,CAAtB,EAAyB,OAAzB,EAAkC;AAACzB,cAAAA,KAAK,EAAE,KAAKV,gBAAL,CAAsBU;AAA9B,aAAlC;AACH;AALK;AALd,SACQ,QADR;AAAA;AAAA;AAAA;AAAA,cAdW,eA2BX,QAAC,IAAD;AAEI,QAAA,IAAI,EAAC,aAFT;AAGI,QAAA,MAAM,EAAE,KAHZ;AAII,QAAA,OAAO,EAAE,KAAK+B,qBAAL,EAJb;AAKI,QAAA,QAAQ,EAAE;AACNZ,UAAAA,eAAe,EAAE,IADX;AAENG,UAAAA,SAAS,EAAE,EAAE,KAAK7C,KAAL,CAAWS,SAAX,CAAqBe,SAArB,KAAmCsB,SAArC,CAFL;AAGNC,UAAAA,eAAe,EAAGC,CAAD,IAAO;AACpB,iBAAKC,gBAAL,CAAsBD,CAAtB,EAAyB,WAAzB,EAAsC;AAACxB,cAAAA,SAAS,EAAE,KAAKX,gBAAL,CAAsBW;AAAlC,aAAtC;AACH;AALK;AALd,SACQ,aADR;AAAA;AAAA;AAAA;AAAA,cA3BW,eAwCX,QAAC,IAAD;AACI,QAAA,IAAI,EAAC,iBADT;AAEI,QAAA,IAAI,EAAC,iBAFT;AAGI,QAAA,MAAM,EAAE,KAHZ;AAII,QAAA,OAAO,EAAE,KAAK+B,mBAAL,EAJb;AAKI,QAAA,QAAQ,EAAE;AACNb,UAAAA,eAAe,EAAE,IADX;AAENG,UAAAA,SAAS,EAAE,EAAE,KAAK7C,KAAL,CAAWS,SAAX,CAAqBqB,aAArB,KAAuCgB,SAAzC,CAFL;AAGNC,UAAAA,eAAe,EAAGC,CAAD,IAAO;AACpB,iBAAKC,gBAAL,CAAsBD,CAAtB,EAAyB,eAAzB,EAA0C;AAAClB,cAAAA,aAAa,EAAE,KAAKjB,gBAAL,CAAsBiB;AAAtC,aAA1C;AACH;AALK;AALd;AAAA;AAAA;AAAA;AAAA,cAxCW,eAqDX,QAAC,IAAD;AACI,QAAA,IAAI,EAAC,iBADT;AAEI,QAAA,IAAI,EAAC,iBAFT;AAGI,QAAA,MAAM,EAAE,KAHZ;AAII,QAAA,OAAO,EAAE,KAAK0B,sBAAL,EAJb;AAKI,QAAA,QAAQ,EAAE;AACNd,UAAAA,eAAe,EAAE,IADX;AAENG,UAAAA,SAAS,EAAE,EAAE,KAAK7C,KAAL,CAAWS,SAAX,CAAqBwB,eAArB,KAAyCa,SAA3C,CAFL;AAGNC,UAAAA,eAAe,EAAGC,CAAD,IAAO;AACpB,iBAAKC,gBAAL,CAAsBD,CAAtB,EAAyB,iBAAzB,EAA4C;AAACf,cAAAA,eAAe,EAAE,KAAKpB,gBAAL,CAAsBoB;AAAxC,aAA5C;AACH;AALK;AALd;AAAA;AAAA;AAAA;AAAA,cArDW;AAjCL,KAAd;AAqGA,wBACI;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEM;AAAjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAEDkB,EAAAA,iBAAiB,CAACC,QAAD,EAAWC,GAAX,EAAgBC,KAAhB,EACjB;AACI,SAAKrD,gBAAL,CAAsBsD,gBAAtB,CAAuCH,QAAvC,EAAiDC,GAAjD,EAAsDC,KAAtD;AACH;AAED;AACJ;AACA;;;AACIE,EAAAA,wBAAwB,CAACC,SAAD,EAAYL,QAAZ,EAAsBC,GAAtB,EAA2BC,KAA3B,EACxB;AACI,SAAKrD,gBAAL,CAAsByD,uBAAtB,CAA8CD,SAA9C,EAAyDL,QAAzD,EAAmEC,GAAnE,EAAwEC,KAAxE;AACH;;AAEDX,EAAAA,gBAAgB,CAACgB,aAAD,EAAgBN,GAAhB,EAAqBO,iBAArB,EAChB;AACI,SAAK3D,gBAAL,CAAsB4D,eAAtB,CAAsCF,aAAtC,EAAqDN,GAArD,EAA0DO,iBAA1D;AACH;;AAEDzB,EAAAA,oBAAoB,GACpB;AACI,QAAI,KAAKzC,KAAL,CAAWoE,IAAX,KAAoB,YAAxB,EAAsC;AAClC,aAAO,cACH,QAAC,mBAAD;AACI,QAAA,SAAS,EAAE,KAAKpE,KAAL,CAAWqE,SAD1B;AAEI,QAAA,YAAY,EAAGrB,CAAD,IAAO;AAAE,eAAKhD,KAAL,CAAWsE,YAAX,CAAwBtB,CAAxB;AAA6B;AAFxD;AAAA;AAAA;AAAA;AAAA,cADG,CAAP;AAKH;;AACD,WAAO,cACH,QAAC,qBAAD;AACI,MAAA,SAAS,EAAE,KAAKhD,KAAL,CAAWqE,SAD1B;AAEI,MAAA,YAAY,EAAGrB,CAAD,IAAO;AAAE,aAAKhD,KAAL,CAAWsE,YAAX,CAAwBtB,CAAxB;AAA6B;AAFxD;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAKH;;AAEDL,EAAAA,eAAe,GACf;AACI,QAAInC,SAAS,GAAG,KAAKR,KAAL,CAAWQ,SAA3B;AAAA,QAAsC+D,IAAI,GAAG,EAA7C;AACA,WAAO,cACH;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI,QAAC,gBAAD;AACI,QAAA,KAAK,EAAC,QADV;AAEI,QAAA,KAAK,EAAE,SAFX;AAGI,QAAA,YAAY,EAAE/D,SAAS,CAACY,IAAV,CAAeoD,UAHjC;AAII,QAAA,IAAI,EAAE,CAJV;AAKI,QAAA,IAAI,EAAED,IALV;AAMI,QAAA,QAAQ,EAAE,CAACvB,CAAD,EAAIyB,CAAJ,KAAU;AAAE,eAAKhB,iBAAL,CAAuB,MAAvB,EAA+B,YAA/B,EAA6CiB,UAAU,CAAC1B,CAAD,CAAvD;AAA8D;AANxF;AAAA;AAAA;AAAA;AAAA,cADJ,eASI,QAAC,gBAAD;AACI,QAAA,KAAK,EAAC,SADV;AAEI,QAAA,KAAK,EAAE,UAFX;AAGI,QAAA,YAAY,EAAExC,SAAS,CAACY,IAAV,CAAeuD,WAHjC;AAII,QAAA,IAAI,EAAE,CAJV;AAKI,QAAA,IAAI,EAAEJ,IALV;AAMI,QAAA,QAAQ,EAAE,CAACvB,CAAD,EAAIyB,CAAJ,KAAU;AAAE,eAAKhB,iBAAL,CAAuB,MAAvB,EAA+B,aAA/B,EAA8CiB,UAAU,CAAC1B,CAAD,CAAxD;AAA+D;AANzF;AAAA;AAAA;AAAA;AAAA,cATJ,eAiBI,QAAC,gBAAD;AACI,QAAA,KAAK,EAAC,cADV;AAEI,QAAA,KAAK,EAAE,WAFX;AAGI,QAAA,YAAY,EAAExC,SAAS,CAACY,IAAV,CAAewD,OAHjC;AAII,QAAA,IAAI,EAAE,CAJV;AAKI,QAAA,IAAI,EAAEL,IALV;AAMI,QAAA,QAAQ,EAAE,CAACvB,CAAD,EAAIyB,CAAJ,KAAU;AAAE,eAAKhB,iBAAL,CAAuB,MAAvB,EAA+B,SAA/B,EAA0CiB,UAAU,CAAC1B,CAAD,CAApD;AAA2D;AANrF;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AA4BH;;AAEDE,EAAAA,sBAAsB,GACtB;AACI,QAAI2B,WAAW,GAAG,KAAK7E,KAAL,CAAWQ,SAAX,CAAqBqE,WAAvC;AACA,WAAO,cACH;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACI,QAAC,eAAD;AACI,QAAA,KAAK,EAAC,YADV;AAEI,QAAA,YAAY,EAAEA,WAAW,CAACC,SAF9B;AAGI,QAAA,OAAO,EAAGlB,KAAD,IAAW;AAAE,eAAKH,iBAAL,CAAuB,aAAvB,EAAsC,WAAtC,EAAmDG,KAAnD;AAA0D;AAHpF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAQH;;AAEDhB,EAAAA,oBAAoB,GACpB;AACI,QAAI7B,KAAK,GAAI,KAAKf,KAAL,CAAWS,SAAX,CAAqBK,SAArB,KAAmCgC,SAApC,GAAiD,MAAjD,GACN,KAAK9C,KAAL,CAAWS,SAAX,CAAqBK,SAArB,CAA+BC,KAA/B,CAAqCC,QAD3C;AAEA,WAAO,cACH;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACI,QAAC,kBAAD;AAEI,QAAA,KAAK,EAAC,YAFV;AAGI,QAAA,KAAK,EAAED,KAHX;AAII,QAAA,QAAQ,EAAG6C,KAAD,IAAW;AAAE,eAAKE,wBAAL,CAA8B,WAA9B,EAA2C,OAA3C,EAAoD,UAApD,EAAgEF,KAAhE;AAAyE;AAJpG,SACQ,wBADR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAUH;;AAEDR,EAAAA,gBAAgB,GAChB;AACI,QAAI2B,aAAa,GAAI,KAAK/E,KAAL,CAAWS,SAAX,CAAqBQ,KAArB,KAA+B6B,SAAhC,GAChB,KAAKjC,gBAAL,CAAsBI,KADN,GACc,KAAKjB,KAAL,CAAWS,SAAX,CAAqBQ,KADvD;AAEA,WAAO,cACH;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,gBAAD;AACI,UAAA,KAAK,EAAC,aADV;AAEI,UAAA,KAAK,EAAE,QAFX;AAGI,UAAA,YAAY,EAAE,EAHlB;AAII,UAAA,IAAI,EAAE,CAJV;AAKI,UAAA,IAAI,EAAE,CALV;AAMI,UAAA,QAAQ,EAAE,CAAC+B,CAAD,EAAIyB,CAAJ,KAAU,CAAG;AAN3B;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAUI,QAAC,kBAAD;AACI,UAAA,KAAK,EAAC,aADV;AAEI,UAAA,KAAK,EAAEM,aAAa,CAAChE,KAAd,CAAoBI,SAF/B;AAGI,UAAA,QAAQ,EAAGyC,KAAD,IAAW;AACjB,iBAAKE,wBAAL,CAA8B,OAA9B,EAAuC,OAAvC,EAAgD,WAAhD,EAA6DF,KAA7D;AACH;AALL;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAiBI,QAAC,gBAAD;AACI,UAAA,KAAK,EAAC,aADV;AAEI,UAAA,KAAK,EAAE,QAFX;AAGI,UAAA,YAAY,EAAEmB,aAAa,CAAC3D,IAAd,CAAmBC,eAHrC;AAII,UAAA,IAAI,EAAE,CAJV;AAKI,UAAA,IAAI,EAAE,CALV;AAMI,UAAA,QAAQ,EAAE,CAAC2B,CAAD,EAAIyB,CAAJ,KAAU;AAChB,iBAAKX,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,iBAA/C,EAAkEd,CAAlE;AACH;AARL;AAAA;AAAA;AAAA;AAAA,gBAjBJ,eA2BI,QAAC,gBAAD;AACI,UAAA,KAAK,EAAC,aADV;AAEI,UAAA,KAAK,EAAE,QAFX;AAGI,UAAA,YAAY,EAAE+B,aAAa,CAAC3D,IAAd,CAAmBE,eAHrC;AAII,UAAA,IAAI,EAAE,CAJV;AAKI,UAAA,IAAI,EAAE,CALV;AAMI,UAAA,QAAQ,EAAE,CAAC0B,CAAD,EAAIyB,CAAJ,KAAU;AAChB,iBAAKX,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,iBAA/C,EAAkEd,CAAlE;AACH;AARL;AAAA;AAAA;AAAA;AAAA,gBA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAuCI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,YAAD;AACI,UAAA,WAAW,EAAE+B,aAAa,CAAC7D,IAD/B;AAEI,UAAA,gBAAgB,EAAG8B,CAAD,IAAO;AACrB,iBAAKc,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,YAA/C,EAA6Dd,CAA7D;AACH,WAJL;AAKI,UAAA,cAAc,EAAGA,CAAD,IAAO;AACnB,iBAAKc,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,UAA/C,EAA2DY,UAAU,CAAC1B,CAAD,CAArE;AACH,WAPL;AAQI,UAAA,eAAe,EAAGA,CAAD,IAAO;AACpB,iBAAKc,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,WAA/C,EAA4Dd,CAA5D;AACH;AAVL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAvCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAwDH;;AAEDK,EAAAA,gBAAgB,GAChB;AACI,QAAI2B,aAAa,GAAI,KAAKhF,KAAL,CAAWS,SAAX,CAAqBc,KAArB,KAA+BuB,SAAhC,GAChB,KAAKjC,gBAAL,CAAsBU,KADN,GACc,KAAKvB,KAAL,CAAWS,SAAX,CAAqBc,KADvD;AAEA,WAAO,cACH;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,gBAAD;AACI,UAAA,KAAK,EAAC,aADV;AAEI,UAAA,KAAK,EAAE,QAFX;AAGI,UAAA,YAAY,EAAE,EAHlB;AAII,UAAA,IAAI,EAAE,CAJV;AAKI,UAAA,IAAI,EAAE,CALV;AAMI,UAAA,QAAQ,EAAE,CAACyB,CAAD,EAAIyB,CAAJ,KAAU,CAAG;AAN3B;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAUI,QAAC,kBAAD;AACI,UAAA,KAAK,EAAC,aADV;AAEI,UAAA,KAAK,EAAEO,aAAa,CAACjE,KAAd,CAAoBI,SAF/B;AAGI,UAAA,QAAQ,EAAGyC,KAAD,IAAW;AACjB,iBAAKE,wBAAL,CAA8B,OAA9B,EAAuC,OAAvC,EAAgD,WAAhD,EAA6DF,KAA7D;AACH;AALL;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAiBI,QAAC,gBAAD;AACI,UAAA,KAAK,EAAC,aADV;AAEI,UAAA,KAAK,EAAE,QAFX;AAGI,UAAA,YAAY,EAAEoB,aAAa,CAAC5D,IAAd,CAAmBC,eAHrC;AAII,UAAA,IAAI,EAAE,CAJV;AAKI,UAAA,IAAI,EAAE,CALV;AAMI,UAAA,QAAQ,EAAE,CAAC2B,CAAD,EAAIyB,CAAJ,KAAU;AAChB,iBAAKX,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,iBAA/C,EAAkEY,UAAU,CAAC1B,CAAD,CAA5E;AACH;AARL;AAAA;AAAA;AAAA;AAAA,gBAjBJ,eA2BI,QAAC,gBAAD;AACI,UAAA,KAAK,EAAC,aADV;AAEI,UAAA,KAAK,EAAE,QAFX;AAGI,UAAA,YAAY,EAAEgC,aAAa,CAAC5D,IAAd,CAAmBE,eAHrC;AAII,UAAA,IAAI,EAAE,CAJV;AAKI,UAAA,IAAI,EAAE,CALV;AAMI,UAAA,QAAQ,EAAE,CAAC0B,CAAD,EAAIyB,CAAJ,KAAU;AAChB,iBAAKX,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,iBAA/C,EAAkEY,UAAU,CAAC1B,CAAD,CAA5E;AACH;AARL;AAAA;AAAA;AAAA;AAAA,gBA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAuCI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,YAAD;AACI,UAAA,WAAW,EAAEgC,aAAa,CAAC9D,IAD/B;AAEI,UAAA,gBAAgB,EAAG8B,CAAD,IAAO;AACrB,iBAAKc,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,YAA/C,EAA6Dd,CAA7D;AACH,WAJL;AAKI,UAAA,cAAc,EAAGA,CAAD,IAAO;AACnB,iBAAKc,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,UAA/C,EAA2DY,UAAU,CAAC1B,CAAD,CAArE;AACH,WAPL;AAQI,UAAA,eAAe,EAAGA,CAAD,IAAO;AACpB,iBAAKc,wBAAL,CAA8B,OAA9B,EAAuC,MAAvC,EAA+C,WAA/C,EAA4Dd,CAA5D;AACH;AAVL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAvCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAyDH;;AAEDM,EAAAA,qBAAqB,GACrB;AACI,QAAI3C,QAAQ,GAAI,KAAKX,KAAL,CAAWS,SAAX,CAAqBe,SAArB,KAAmCsB,SAApC,GACX,KAAKjC,gBAAL,CAAsBW,SADX,GACuB,KAAKxB,KAAL,CAAWS,SAAX,CAAqBe,SAD3D;AAEA,WAAO,cACH;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,eAAD;AACI,UAAA,KAAK,EAAC,mBADV;AAEI,UAAA,YAAY,EAAEb,QAAQ,CAACgB,OAAT,CAAiBE,UAFnC;AAGI,UAAA,OAAO,EAAGmB,CAAD,IAAO;AACZ,iBAAKc,wBAAL,CAA8B,WAA9B,EAA2C,SAA3C,EAAsD,YAAtD,EAAoEd,CAApE;AACH;AALL;AAAA;AAAA;AAAA;AAAA,gBAFJ,eASI,QAAC,eAAD;AACI,UAAA,KAAK,EAAC,qBADV;AAEI,UAAA,YAAY,EAAErC,QAAQ,CAACgB,OAAT,CAAiBC,YAFnC;AAGI,UAAA,OAAO,EAAGoB,CAAD,IAAO;AACZ,iBAAKc,wBAAL,CAA8B,WAA9B,EAA2C,SAA3C,EAAsD,cAAtD,EAAsEd,CAAtE;AACH;AALL;AAAA;AAAA;AAAA;AAAA,gBATJ,eAgBI,QAAC,eAAD;AACI,UAAA,KAAK,EAAC,WADV;AAEI,UAAA,OAAO,EAAE,CAAC,QAAD,EAAW,KAAX,CAFb;AAGI,UAAA,QAAQ,EAAGrC,QAAQ,CAACc,QAAT,CAAkBC,QAAlB,GAA6B,QAA7B,GAAwC,KAHvD;AAII,UAAA,QAAQ,EAAGkC,KAAD,IAAW;AACjB,gBAAInC,QAAQ,GAAG,KAAf;AACA,gBAAImC,KAAK,KAAK,QAAd,EAAwBnC,QAAQ,GAAG,IAAX;;AACxB,iBAAKqC,wBAAL,CAA8B,WAA9B,EAA2C,UAA3C,EAAuD,UAAvD,EAAmErC,QAAnE;AACH;AARL;AAAA;AAAA;AAAA;AAAA,gBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eA4BI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,YAAD;AACI,UAAA,WAAW,EAAEd,QAAQ,CAACO,IAD1B;AAEI,UAAA,gBAAgB,EAAG8B,CAAD,IAAO;AACrB,iBAAKc,wBAAL,CAA8B,WAA9B,EAA2C,MAA3C,EAAmD,YAAnD,EAAiEd,CAAjE;AACH,WAJL;AAKI,UAAA,cAAc,EAAGA,CAAD,IAAO;AACnB,iBAAKc,wBAAL,CAA8B,WAA9B,EAA2C,MAA3C,EAAmD,UAAnD,EAA+DY,UAAU,CAAC1B,CAAD,CAAzE;AACH,WAPL;AAQI,UAAA,eAAe,EAAGA,CAAD,IAAO;AACpB,iBAAKc,wBAAL,CAA8B,WAA9B,EAA2C,MAA3C,EAAmD,WAAnD,EAAgEd,CAAhE;AACH;AAVL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AA8CH;;AAEDO,EAAAA,mBAAmB,GACnB;AACI,QAAI5C,QAAQ,GAAI,KAAKX,KAAL,CAAWS,SAAX,CAAqBqB,aAArB,KAAuCgB,SAAxC,GACX,KAAKjC,gBAAL,CAAsBiB,aADX,GAC2B,KAAK9B,KAAL,CAAWS,SAAX,CAAqBqB,aAD/D;AAEA,WAAO,cACH;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,eAAD;AACI,UAAA,KAAK,EAAC,WADV;AAEI,UAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,QAAR,CAFb;AAGI,UAAA,QAAQ,EAAGnB,QAAQ,CAACc,QAAT,CAAkBM,KAAlB,KAA4B,IAA7B,GAAqC,KAArC,GAA6C,QAH3D;AAII,UAAA,QAAQ,EAAG6B,KAAD,IAAW;AACjB,gBAAInC,QAAQ,GAAG,KAAf;AACA,gBAAImC,KAAK,KAAK,KAAd,EAAqBnC,QAAQ,GAAG,IAAX;;AACrB,iBAAKqC,wBAAL,CAA8B,eAA9B,EAA+C,UAA/C,EAA2D,OAA3D,EAAoErC,QAApE;AACH;AARL;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAYI,QAAC,eAAD;AACI,UAAA,KAAK,EAAC,sBADV;AAEI,UAAA,YAAY,EAAEd,QAAQ,CAACc,QAAT,CAAkBO,YAFpC;AAGI,UAAA,OAAO,EAAGgB,CAAD,IAAO;AACZ,iBAAKc,wBAAL,CAA8B,eAA9B,EAA+C,UAA/C,EAA2D,cAA3D,EAA2Ed,CAA3E;AACH;AALL;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAqBI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,YAAD;AACI,UAAA,WAAW,EAAErC,QAAQ,CAACO,IAD1B;AAEI,UAAA,gBAAgB,EAAG8B,CAAD,IAAO;AACrB,iBAAKc,wBAAL,CAA8B,eAA9B,EAA+C,MAA/C,EAAuD,YAAvD,EAAqEd,CAArE;AACH,WAJL;AAKI,UAAA,cAAc,EAAGA,CAAD,IAAO;AACnB,iBAAKc,wBAAL,CAA8B,eAA9B,EAA+C,MAA/C,EAAuD,UAAvD,EAAmEY,UAAU,CAAC1B,CAAD,CAA7E;AACH,WAPL;AAQI,UAAA,eAAe,EAAGA,CAAD,IAAO;AACpB,iBAAKc,wBAAL,CAA8B,eAA9B,EAA+C,MAA/C,EAAuD,WAAvD,EAAoEd,CAApE;AACH;AAVL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAuCH;;AAEDQ,EAAAA,sBAAsB,GACtB;AACI,QAAI7C,QAAQ,GAAI,KAAKX,KAAL,CAAWS,SAAX,CAAqBwB,eAArB,KAAyCa,SAA1C,GACX,KAAKjC,gBAAL,CAAsBoB,eADX,GAC6B,KAAKjC,KAAL,CAAWS,SAAX,CAAqBwB,eADjE;AAGA,WAAO,cACH;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,eAAD;AACI,UAAA,KAAK,EAAC,WADV;AAEI,UAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,QAAR,CAFb;AAGI,UAAA,QAAQ,EAAGtB,QAAQ,CAACc,QAAT,CAAkBM,KAAlB,KAA4B,IAA7B,GAAqC,KAArC,GAA6C,QAH3D;AAII,UAAA,QAAQ,EAAG6B,KAAD,IAAW;AACjB,gBAAInC,QAAQ,GAAG,KAAf;AACA,gBAAImC,KAAK,KAAK,KAAd,EAAqBnC,QAAQ,GAAG,IAAX;;AACrB,iBAAKqC,wBAAL,CAA8B,iBAA9B,EAAiD,UAAjD,EAA6D,OAA7D,EAAsErC,QAAtE;AACH;AARL;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAYI,QAAC,gBAAD;AACI,UAAA,KAAK,EAAC,cADV;AAEI,UAAA,KAAK,EAAE,WAFX;AAGI,UAAA,YAAY,EAAEd,QAAQ,CAACuB,aAAT,CAAuBC,SAHzC;AAII,UAAA,IAAI,EAAE,CAJV;AAKI,UAAA,IAAI,EAAE,CALV;AAMI,UAAA,QAAQ,EAAE,CAACa,CAAD,EAAIyB,CAAJ,KAAU;AAChB,iBAAKX,wBAAL,CAA8B,iBAA9B,EAAiD,eAAjD,EAAkE,WAAlE,EAA+EY,UAAU,CAAC1B,CAAD,CAAzF;AACH;AARL;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAwBI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,YAAD;AACI,UAAA,WAAW,EAAErC,QAAQ,CAACO,IAD1B;AAEI,UAAA,gBAAgB,EAAG8B,CAAD,IAAO;AACrB,iBAAKc,wBAAL,CAA8B,iBAA9B,EAAiD,MAAjD,EAAyD,YAAzD,EAAuEd,CAAvE;AACH,WAJL;AAKI,UAAA,cAAc,EAAGA,CAAD,IAAO;AACnB,iBAAKc,wBAAL,CAA8B,iBAA9B,EAAiD,MAAjD,EAAyD,UAAzD,EAAqEY,UAAU,CAAC1B,CAAD,CAA/E;AACH,WAPL;AAQI,UAAA,eAAe,EAAGA,CAAD,IAAO;AACpB,iBAAKc,wBAAL,CAA8B,iBAA9B,EAAiD,MAAjD,EAAyD,WAAzD,EAAsEd,CAAtE;AACH;AAVL;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AA0CH;;AApiBL;;AAuiBA,SAASnD,SAAT","sourcesContent":["import React from 'react';\nimport { Editor, BarChartInputFields, Menu, LabeledTextField, LabeledColorPicker \n    , FontSelector, LabeledDropdown, StackedBarInputFields} from './Components/index';\nimport { LabeledCheckbox } from './Components/LabeledCheckbox';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\n\nclass BarEditor extends React.Component\n{\n    constructor(props) \n    {\n        super(props);\n        this.state = {\n            currentTab: 0 // 0 - Settings and 1 - Design Options\n        };\n\n        this._defaultFont = {\n            fontFamily: 'Times New Roman, Times, serif',\n            fontSize: 10,\n            textColor: '#000'\n        };\n\n        this._settingsManager = new SettingsManager({\n            cSettings: this.props.cSettings,\n            dSettings: this.props.dSettings,\n            setChartSettings: (settings) => { this.props.setChartSettings(settings); },\n            setDecoratorSettings: (settings) => { this.props.setDecoratorSettings(settings); }\n        });\n\n        this._defaultSettings = {\n            remainder: {\n                color: {\n                    barColor: '#000'\n                }\n            },\n            xAxis: {\n                font: this._defaultFont,\n                color: {\n                    lineColor: '#000'\n                },\n                size: {\n                    lineStrokeWidth: 1,\n                    tickStrokeWidth: 0.5,\n                }\n            },\n            yAxis: {\n                font: this._defaultFont,\n                color: {\n                    lineColor: '#000'\n                },\n                size: {\n                    lineStrokeWidth: 1,\n                    tickStrokeWidth: 0.5,\n                }\n            }, \n            dataValue: {\n                font: this._defaultFont,\n                location: { isMiddle: true, },\n                display: { \n                    isPercentage: true,\n                    isCategory: false,\n                }\n            },\n            categoryLabel: {\n                font: this._defaultFont,\n                location: {\n                    isTop: true,\n                    isWithinBars: true,\n                }\n            },\n            chartDescriptor: {\n                font: this._defaultFont,\n                location: { isTop: true },\n                labelSettings: {\n                    maxPerRow: 3,\n                }\n            }\n        };\n    }\n\n    render()\n    {        \n        console.log(this._defaultSettings);\n        let content = {\n            chartSettings: [\n                <Menu \n                    key='chart-data'\n                    name='Chart Data'\n                    isOpen={true}\n                    content={this._GetChartDataContent()}\n                    checkbox={{ displayCheckbox: false }}/>,\n                <Menu \n                    key='size'\n                    name='Size'\n                    isOpen={false}\n                    content={this._GetSizeContent()}\n                    checkbox={{ displayCheckbox: false }}/>,\n                <Menu \n                    key='background-color'\n                    name='Background Color'\n                    isOpen={false}\n                    content={this._GetRemainderContent()}\n                    checkbox={{ \n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.remainder === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'remainder', {remainder: this._defaultSettings.remainder});\n                        }\n                    }}/>,\n                <Menu \n                    key='orietation'\n                    name='Orientation'\n                    isOpen={false}\n                    content={this._GetOrientationContent()} \n                    checkbox={{ displayCheckbox: false }}/>,\n            ],\n            designOptions: [\n                <Menu \n                    key='x-axis'\n                    name='X-Axis'\n                    isOpen={false}\n                    content={this._GetXAxisContent()}\n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.xAxis === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'xAxis', {xAxis: this._defaultSettings.xAxis});\n                        }\n                    }}\n                />,\n                <Menu \n                    key='y-axis'\n                    name='Y-Axis'\n                    isOpen={false}\n                    content={this._GetYAxisContent()}\n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.yAxis === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'yAxis', {yAxis: this._defaultSettings.yAxis});\n                        }\n                    }}\n                />,\n                <Menu \n                    key='data-labels'\n                    name='Data Labels'\n                    isOpen={false}\n                    content={this._GetDataLabelsContent()}\n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.dataValue === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'dataValue', {dataValue: this._defaultSettings.dataValue});\n                        }\n                    }}\n                />,\n                <Menu \n                    keys='category-labels'\n                    name='Category Labels'\n                    isOpen={false}\n                    content={this._GetCategoryContent()}\n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.categoryLabel === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'categoryLabel', {categoryLabel: this._defaultSettings.categoryLabel})\n                        }\n                    }}\n                />,\n                <Menu \n                    keys='category-legend'\n                    name='Category Legend'\n                    isOpen={false}\n                    content={this._GetDescriptionContent()}\n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.chartDescriptor === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'chartDescriptor', {chartDescriptor: this._defaultSettings.chartDescriptor});\n                        }\n                    }}\n                />,\n            ]\n        }\n        return (\n            <div>\n                <Editor content={content} />\n            </div>\n        );\n    }\n\n    _SetChartSettings(category, key, value)\n    {\n        this._settingsManager.SetChartSettings(category, key, value);\n    }\n\n    /**\n     * @summary     Update existing decorator entry \n     */\n    _UpdateDecoratorSettings(decorator, category, key, value)\n    {\n        this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n    }\n\n    _CheckboxHandler(checkboxValue, key, decoratorSettings)\n    {\n        this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n    }\n\n    _GetChartDataContent()\n    {\n        if (this.props.type === 'bar-editor') {\n            return [\n                <BarChartInputFields \n                    chartData={this.props.chartData}\n                    setChartData={(d) => { this.props.setChartData(d); }} />\n            ];\n        } \n        return [\n            <StackedBarInputFields \n                chartData={this.props.chartData}\n                setChartData={(d) => { this.props.setChartData(d); }}/>\n        ];\n    }\n\n    _GetSizeContent()\n    {\n        let cSettings = this.props.cSettings, cols = 15;\n        return [\n            <div className='center'>\n                <LabeledTextField \n                    label='Width:'\n                    index={'c-width'}\n                    initialValue={cSettings.size.chartWidth}\n                    rows={1}\n                    cols={cols}\n                    onChange={(d, i) => { this._SetChartSettings('size', 'chartWidth', parseFloat(d)); }}\n                    />\n                <LabeledTextField\n                    label='Height:'\n                    index={'c-height'}\n                    initialValue={cSettings.size.chartHeight}\n                    rows={1}\n                    cols={cols}\n                    onChange={(d, i) => { this._SetChartSettings('size', 'chartHeight', parseFloat(d)); }} \n                />\n                <LabeledTextField\n                    label='Bar Padding:'\n                    index={'c-padding'}\n                    initialValue={cSettings.size.padding}\n                    rows={1}\n                    cols={cols}\n                    onChange={(d, i) => { this._SetChartSettings('size', 'padding', parseFloat(d)); }} \n                />\n            </div>\n        ];\n    }\n\n    _GetOrientationContent()\n    {\n        let orientation = this.props.cSettings.orientation;\n        return [\n            <div className='center'>\n                <LabeledCheckbox \n                    label='Landscape:'\n                    initialValue={orientation.landscape}\n                    onClick={(value) => { this._SetChartSettings('orientation', 'landscape', value)}}/>\n            </div> \n        ];\n    }\n\n    _GetRemainderContent()\n    {\n        let color = (this.props.dSettings.remainder === undefined) ? '#000' \n            : this.props.dSettings.remainder.color.barColor;\n        return [\n            <div className='center'>\n                <LabeledColorPicker \n                    key='remainder-color-picker'\n                    label='Bar Color:'\n                    color={color}\n                    onChange={(value) => { this._UpdateDecoratorSettings('remainder', 'color', 'barColor', value); }} \n                />\n            </div>\n        ];\n    }\n\n    _GetXAxisContent()\n    {\n        let xAxisSettings = (this.props.dSettings.xAxis === undefined) ? \n            this._defaultSettings.xAxis : this.props.dSettings.xAxis;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Axis Settings:</h5>\n                    <LabeledTextField\n                        label='Axis Label:'\n                        index={'x-axis'}\n                        initialValue={''}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { }} \n                    />\n                    <LabeledColorPicker \n                        label='Axis Color:'\n                        color={xAxisSettings.color.lineColor}\n                        onChange={(value) => { \n                            this._UpdateDecoratorSettings('xAxis', 'color', 'lineColor', value)\n                        }}\n                    />\n                    <LabeledTextField\n                        label='Line width:'\n                        index={'x-axis'}\n                        initialValue={xAxisSettings.size.lineStrokeWidth}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('xAxis', 'size', 'lineStrokeWidth', d);\n                        }} \n                    />\n                    <LabeledTextField\n                        label='Tick width:'\n                        index={'x-axis'}\n                        initialValue={xAxisSettings.size.tickStrokeWidth}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('xAxis', 'size', 'tickStrokeWidth', d);\n                        }} \n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        initialFont={xAxisSettings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('xAxis', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('xAxis', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('xAxis', 'font', 'textColor', d);\n                        }}/>\n                </div>\n            </div>\n        ];\n    }\n\n    _GetYAxisContent()\n    {\n        let yAxisSettings = (this.props.dSettings.yAxis === undefined) ? \n            this._defaultSettings.yAxis : this.props.dSettings.yAxis;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Axis Settings:</h5>\n                    <LabeledTextField\n                        label='Axis Label:'\n                        index={'y-axis'}\n                        initialValue={''}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { }} \n                    />\n                    <LabeledColorPicker \n                        label='Axis Color:'\n                        color={yAxisSettings.color.lineColor}\n                        onChange={(value) => { \n                            this._UpdateDecoratorSettings('yAxis', 'color', 'lineColor', value);\n                        }}\n                    />\n                    <LabeledTextField\n                        label='Line width:'\n                        index={'y-axis'}\n                        initialValue={yAxisSettings.size.lineStrokeWidth}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('yAxis', 'size', 'lineStrokeWidth', parseFloat(d));\n                        }} \n                    />\n                    <LabeledTextField\n                        label='Tick width:'\n                        index={'y-axis'}\n                        initialValue={yAxisSettings.size.tickStrokeWidth}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('yAxis', 'size', 'tickStrokeWidth', parseFloat(d));\n                        }} \n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        initialFont={yAxisSettings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('yAxis', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('yAxis', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('yAxis', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];    \n    }\n\n    _GetDataLabelsContent()\n    {\n        let settings = (this.props.dSettings.dataValue === undefined) ? \n            this._defaultSettings.dataValue : this.props.dSettings.dataValue;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Display Settings</h5>\n                    <LabeledCheckbox \n                        label='Display Category:'\n                        initialValue={settings.display.isCategory}\n                        onClick={(d) => { \n                            this._UpdateDecoratorSettings('dataValue', 'display', 'isCategory', d);\n                        }}\n                    />\n                    <LabeledCheckbox \n                        label='Display Percentage:'\n                        initialValue={settings.display.isPercentage}\n                        onClick={(d) => { \n                            this._UpdateDecoratorSettings('dataValue', 'display', 'isPercentage', d);\n                        }}\n                    />\n                    <LabeledDropdown \n                        label='Location:'\n                        options={['Middle', 'Top']}\n                        selected={(settings.location.isMiddle ? 'Middle' : 'Top')}\n                        onChange={(value) => {\n                            let location = false;\n                            if (value === 'Middle') location = true;\n                            this._UpdateDecoratorSettings('dataValue', 'location', 'isMiddle', location);\n                        }}\n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        initialFont={settings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('dataValue', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('dataValue', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('dataValue', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n\n    _GetCategoryContent()\n    {\n        let settings = (this.props.dSettings.categoryLabel === undefined) ? \n            this._defaultSettings.categoryLabel : this.props.dSettings.categoryLabel;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Location Settings:</h5>\n                    <LabeledDropdown \n                        label='Location:'\n                        options={['Top', 'Bottom']}\n                        selected={(settings.location.isTop === true) ? 'Top' : 'Bottom'}\n                        onChange={(value) => { \n                            let location = false;\n                            if (value === 'Top') location = true;\n                            this._UpdateDecoratorSettings('categoryLabel', 'location', 'isTop', location);\n                        }}\n                    />\n                    <LabeledCheckbox \n                        label='Display inside bars:'\n                        initialValue={settings.location.isWithinBars}\n                        onClick={(d) => { \n                            this._UpdateDecoratorSettings('categoryLabel', 'location', 'isWithinBars', d);\n                        }}\n                    /> \n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        initialFont={settings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('categoryLabel', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('categoryLabel', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('categoryLabel', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n\n    _GetDescriptionContent()\n    {\n        let settings = (this.props.dSettings.chartDescriptor === undefined) ? \n            this._defaultSettings.chartDescriptor : this.props.dSettings.chartDescriptor;\n\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Display Settings:</h5>\n                    <LabeledDropdown \n                        label='Location:'\n                        options={['Top', 'Bottom']}\n                        selected={(settings.location.isTop === true) ? 'Top' : 'Bottom'}\n                        onChange={(value) => {\n                            let location = false;\n                            if (value === 'Top') location = true;\n                            this._UpdateDecoratorSettings('chartDescriptor', 'location', 'isTop', location)\n                        }}\n                    /> \n                    <LabeledTextField \n                        label='Max per row:'\n                        index={'maxPerRow'}\n                        initialValue={settings.labelSettings.maxPerRow}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('chartDescriptor', 'labelSettings', 'maxPerRow', parseFloat(d));\n                        }} \n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        initialFont={settings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('chartDescriptor', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('chartDescriptor', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('chartDescriptor', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n}\n\nexport { BarEditor };"]},"metadata":{},"sourceType":"module"}