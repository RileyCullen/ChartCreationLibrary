{"ast":null,"code":"// Cullen, Riley\n// LineDataValueDecorator.js\n// May 13, 2021\nimport { ALineChartDecorator } from \"./ALineChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass LineDataValueDecorator extends ALineChartDecorator {\n  /**\n   * @summary     Displays each data value point on the chart.\n   * @description For each data element in _data, this decorator will create\n   *              a label displaying the point's value on the chart.\n   * \n   * @param {ALineChart} chart    The chart element we want decorate.\n   * @param {string}     location The location relative the point we want to\n   *                              display the decorator.\n   * @param {JSON Array} font     The font of the data value decorator.\n   */\n  constructor({\n    chart,\n    location = 'Bottom',\n    font = {\n      fontSize: 8,\n      fontFamily: 'Times New Roman, Times, serif',\n      textColor: 'black'\n    }\n  }) {\n    super(chart);\n    this._font = Lodash.cloneDeep(font);\n    this._location = location;\n  }\n  /**\n   * @summary     Creates a chart with the data value decorators.\n   * @description Calls _chart's CreateChart function and then calls _AddValues.\n   */\n\n\n  CreateChart() {\n    this._chart.CreateChart();\n\n    this._AddValues();\n  }\n\n  GetDecoratorSettings() {\n    return {\n      dataValue: {\n        font: this._font,\n        location: {\n          location: this._location\n        }\n      }\n    };\n  }\n  /**\n   * @summary     Creates the data value decorators.\n   * @description Iterates through all of the entries in _data and creates a\n   *              data value decorator.\n   */\n\n\n  _AddValues() {\n    this._data.forEach(d => {\n      var text = d.value,\n          textWidth = this._GetFontSize(text, this._font),\n          xPos = this._xScale(d.category) + this._internalOffsetX - textWidth / 2,\n          yPos = this._yScale(d.value) - this._internalOffsetY,\n          fontHeight = this._GetFontSize('M', this._font);\n\n      switch (this._location) {\n        case 'Bottom':\n          yPos += fontHeight / 2 + this._pointRadius;\n          break;\n\n        case 'Top':\n          yPos -= fontHeight / 2 + this._pointRadius;\n          break;\n\n        case 'Left':\n          xPos -= textWidth / 2 + this._pointRadius;\n          break;\n\n        case 'Right':\n          xPos += textWidth / 2 + this._pointRadius;\n          break;\n\n        default:\n          break;\n      }\n\n      var textObj = new Konva.Text({\n        x: xPos,\n        y: yPos,\n        text: text,\n        fontSize: this._font.fontSize,\n        fontfamily: this._font.fontFamily,\n        fill: this._font.textColor\n      });\n\n      this._group.add(textObj);\n    });\n  }\n\n}\n\nexport { LineDataValueDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/LineChart/Decorators/LineDataValueDecorator.js"],"names":["ALineChartDecorator","Konva","Lodash","LineDataValueDecorator","constructor","chart","location","font","fontSize","fontFamily","textColor","_font","cloneDeep","_location","CreateChart","_chart","_AddValues","GetDecoratorSettings","dataValue","_data","forEach","d","text","value","textWidth","_GetFontSize","xPos","_xScale","category","_internalOffsetX","yPos","_yScale","_internalOffsetY","fontHeight","_pointRadius","textObj","Text","x","y","fontfamily","fill","_group","add"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,mBAAT,QAAoC,uBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,sBAAN,SAAqCH,mBAArC,CACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACII,EAAAA,WAAW,CAAC;AACRC,IAAAA,KADQ;AAERC,IAAAA,QAAQ,GAAG,QAFH;AAGRC,IAAAA,IAAI,GAAG;AACHC,MAAAA,QAAQ,EAAE,CADP;AAEHC,MAAAA,UAAU,EAAE,+BAFT;AAGHC,MAAAA,SAAS,EAAE;AAHR;AAHC,GAAD,EASX;AACI,UAAML,KAAN;AACA,SAAKM,KAAL,GAAaT,MAAM,CAACU,SAAP,CAAiBL,IAAjB,CAAb;AACA,SAAKM,SAAL,GAAiBP,QAAjB;AACH;AAED;AACJ;AACA;AACA;;;AACIQ,EAAAA,WAAW,GACX;AACI,SAAKC,MAAL,CAAYD,WAAZ;;AACA,SAAKE,UAAL;AACH;;AAEDC,EAAAA,oBAAoB,GACpB;AACI,WAAO;AACHC,MAAAA,SAAS,EAAE;AACPX,QAAAA,IAAI,EAAE,KAAKI,KADJ;AAEPL,QAAAA,QAAQ,EAAE;AACNA,UAAAA,QAAQ,EAAE,KAAKO;AADT;AAFH;AADR,KAAP;AAQH;AAED;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,UAAU,GACV;AACI,SAAKG,KAAL,CAAWC,OAAX,CAAoBC,CAAD,IAAO;AACtB,UAAIC,IAAI,GAASD,CAAC,CAACE,KAAnB;AAAA,UACIC,SAAS,GAAI,KAAKC,YAAL,CAAkBH,IAAlB,EAAwB,KAAKX,KAA7B,CADjB;AAAA,UAEIe,IAAI,GAAS,KAAKC,OAAL,CAAaN,CAAC,CAACO,QAAf,IAA2B,KAAKC,gBAAhC,GAAmDL,SAAS,GAAG,CAFhF;AAAA,UAGIM,IAAI,GAAS,KAAKC,OAAL,CAAaV,CAAC,CAACE,KAAf,IAAwB,KAAKS,gBAH9C;AAAA,UAIIC,UAAU,GAAG,KAAKR,YAAL,CAAkB,GAAlB,EAAuB,KAAKd,KAA5B,CAJjB;;AAMA,cAAO,KAAKE,SAAZ;AACI,aAAK,QAAL;AACIiB,UAAAA,IAAI,IAAKG,UAAU,GAAG,CAAd,GAAmB,KAAKC,YAAhC;AACA;;AACJ,aAAK,KAAL;AACIJ,UAAAA,IAAI,IAAKG,UAAU,GAAG,CAAd,GAAmB,KAAKC,YAAhC;AACA;;AACJ,aAAK,MAAL;AACIR,UAAAA,IAAI,IAAKF,SAAS,GAAG,CAAb,GAAkB,KAAKU,YAA/B;AACA;;AACJ,aAAK,OAAL;AACIR,UAAAA,IAAI,IAAKF,SAAS,GAAG,CAAb,GAAkB,KAAKU,YAA/B;AACA;;AACJ;AACI;AAdR;;AAiBA,UAAIC,OAAO,GAAG,IAAIlC,KAAK,CAACmC,IAAV,CAAe;AACzBC,QAAAA,CAAC,EAAEX,IADsB;AAEzBY,QAAAA,CAAC,EAAER,IAFsB;AAGzBR,QAAAA,IAAI,EAAEA,IAHmB;AAIzBd,QAAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWH,QAJI;AAKzB+B,QAAAA,UAAU,EAAE,KAAK5B,KAAL,CAAWF,UALE;AAMzB+B,QAAAA,IAAI,EAAE,KAAK7B,KAAL,CAAWD;AANQ,OAAf,CAAd;;AAQA,WAAK+B,MAAL,CAAYC,GAAZ,CAAgBP,OAAhB;AACH,KAjCD;AAkCH;;AAzFL;;AA4FA,SAAShC,sBAAT","sourcesContent":["// Cullen, Riley\n// LineDataValueDecorator.js\n// May 13, 2021\n\nimport { ALineChartDecorator } from \"./ALineChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass LineDataValueDecorator extends ALineChartDecorator\n{\n    /**\n     * @summary     Displays each data value point on the chart.\n     * @description For each data element in _data, this decorator will create\n     *              a label displaying the point's value on the chart.\n     * \n     * @param {ALineChart} chart    The chart element we want decorate.\n     * @param {string}     location The location relative the point we want to\n     *                              display the decorator.\n     * @param {JSON Array} font     The font of the data value decorator.\n     */\n    constructor({\n        chart, \n        location = 'Bottom', \n        font = {\n            fontSize: 8,\n            fontFamily: 'Times New Roman, Times, serif',\n            textColor: 'black'\n        }\n    })\n    {\n        super(chart);\n        this._font = Lodash.cloneDeep(font);\n        this._location = location;\n    }\n\n    /**\n     * @summary     Creates a chart with the data value decorators.\n     * @description Calls _chart's CreateChart function and then calls _AddValues.\n     */\n    CreateChart() \n    {\n        this._chart.CreateChart();\n        this._AddValues();\n    }\n\n    GetDecoratorSettings()\n    {\n        return {\n            dataValue: {\n                font: this._font,\n                location: {\n                    location: this._location,\n                },\n            }\n        }\n    }\n\n    /**\n     * @summary     Creates the data value decorators.\n     * @description Iterates through all of the entries in _data and creates a\n     *              data value decorator.\n     */    \n    _AddValues()\n    {\n        this._data.forEach((d) => {\n            var text       = d.value,\n                textWidth  = this._GetFontSize(text, this._font),\n                xPos       = this._xScale(d.category) + this._internalOffsetX - textWidth / 2,\n                yPos       = this._yScale(d.value) - this._internalOffsetY,\n                fontHeight = this._GetFontSize('M', this._font);\n\n            switch(this._location) {\n                case 'Bottom':\n                    yPos += (fontHeight / 2) + this._pointRadius;\n                    break;\n                case 'Top':\n                    yPos -= (fontHeight / 2) + this._pointRadius;\n                    break;\n                case 'Left':\n                    xPos -= (textWidth / 2) + this._pointRadius;\n                    break;\n                case 'Right':\n                    xPos += (textWidth / 2) + this._pointRadius;\n                    break;\n                default: \n                    break;\n            }\n\n            var textObj = new Konva.Text({\n                x: xPos,\n                y: yPos,\n                text: text,\n                fontSize: this._font.fontSize,\n                fontfamily: this._font.fontFamily,\n                fill: this._font.textColor,\n            });\n            this._group.add(textObj);\n        });\n    }\n}\n\nexport { LineDataValueDecorator };"]},"metadata":{},"sourceType":"module"}