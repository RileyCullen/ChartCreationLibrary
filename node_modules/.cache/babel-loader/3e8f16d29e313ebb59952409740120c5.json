{"ast":null,"code":"// Cullen, Riley\n// AInfographic.js\n// October 26, 2020 \nimport Konva from 'konva';\nimport html2canvas from 'html2canvas';\nimport { ChartHandler, GraphicsHandler, TextHandler } from '../Handlers/index';\nimport { BasicBarChart, StackedBarChart } from '../Charts/BarChart/index';\nimport { IconBarChart } from '../Charts/IconBarChart/index';\nimport { GenerateIconDataArray, WaffleChart } from '../Charts/WaffleChart';\nimport { LineChart, LineXAxisDecorator, LineYAxisDecorator } from '../Charts/LineChart';\nimport { DonutChart, PieChart } from '../Charts/PieChart';\n\nclass AInfographic {\n  /**\n   * @summary     An abstract class the provide structure and common functionality\n   *              to the Infographic type.\n   * @description See summary.\n   * \n   * @requires D3.js\n   * @requires Konva.js\n   * \n   * @source _AddTextSelection() uses code from https://konvajs.org/docs/sandbox/Editable_Text.html\n   * @source Selecting mutliple elements demo uses code from https://konvajs.org/docs/select_and_transform/Basic_demo.html#page-title\n   * @source _DrawSVG code taken from https://konvajs.org/docs/sandbox/SVG_On_Canvas.html\n   * @source Download code taken from https://konvajs.org/docs/data_and_serialization/High-Quality-Export.html\n   * \n   * @param {double} height The height of the canvas element\n   * @param {double} width  The width of the canvas element\n   */\n  constructor(height, width, editorHandler, textCallback, chartCallback, graphicCallback) {\n    if (AInfographic === this.constructor) {\n      throw new TypeError('Abstract class \"AInfographic\" cannot be instantiated');\n    }\n\n    if (this.CreateInfographic === undefined) {\n      throw new TypeError('Types extending \"AInfographic\" must implement CreateInfographic()');\n    }\n\n    if (this.Draw === undefined) {\n      throw new TypeError('Types extending \"AInfographic\" must implement Draw()');\n    }\n\n    this._chartHandler = new ChartHandler();\n    this._textHandler = new TextHandler();\n    this._graphicsHandler = new GraphicsHandler();\n    this._tr = new Konva.Transformer({\n      nodes: [],\n      resizeEnabled: false,\n      rotateEnabled: false\n    });\n    this._chartHeight = height;\n    this._chartWidth = width;\n    this._stage = new Konva.Stage({\n      container: 'canvas-container',\n      width: this._chartWidth,\n      height: this._chartHeight\n    });\n    /*this._selectionRectangle = new Konva.Rect({\n        fill: 'rgba(0, 0, 255, 0.5)',\n        visible: false,\n    });\n    this._hasSelected = false;\n    this._isSelecting = false;\n    this._oldNodes = [];\n    this._mouseX1 = 0, this._mouseX2 = 0, this._mouseY1 = 0, this._mouseY2 = 0;*/\n\n    this._main = new Konva.Layer(); // this._UIAdder = new UIAdder(this._chartWidth, this._chartHeight);\n\n    this._editorHandler = editorHandler;\n    this._textCallback = textCallback;\n    this._chartCallback = chartCallback;\n    this._graphicCallback = graphicCallback;\n    this._selectedTextIndex = -1;\n    this._selectedTextHelper = -1;\n    this._selectedChartIndex = -1;\n    this._selectedGraphicIndex = -1;\n\n    this._stage.add(this._main);\n\n    this._main.add(this._tr);\n\n    this._AddStageBorder();\n  }\n  /**\n   * @summary     Returns chart's dimensions to caller.\n   * @description Returns the chart's width and height in the form of a JSON\n   *              object to the caller.\n   * @returns A JSON object containing the chart's width and height.\n   */\n\n\n  GetDimensions() {\n    return {\n      width: this._chartWidth,\n      height: this._chartHeight\n    };\n  }\n  /**\n   * @summary     Manages memory for infographic type.\n   * @description A function that is responsible for freeing memory that would \n   *              otherwise cause memory leaks. \n   */\n\n\n  Clean() {\n    // Remove chart/text listeners\n    this._RemoveTextListeners();\n\n    this._RemoveChartListeners();\n\n    this._RemoveGraphicListeners(); // Remove all the elements from this._stage\n\n\n    this._stage.destroy();\n\n    this._stage = 0;\n  }\n\n  ClearSelection() {\n    this._tr.nodes([]);\n\n    this._selectedChartIndex = -1;\n    this._selectedGraphicIndex = -1;\n    this._selectedTextIndex = this._selectedTextHelper = -1;\n  }\n\n  Download() {\n    // function from https://stackoverflow.com/a/15832662/512042\n    function downloadURI(uri, name) {\n      var link = document.createElement('a');\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      link.remove();\n    }\n\n    var dataURL = this._stage.toDataURL({\n      pixelRatio: 5\n    });\n\n    downloadURI(dataURL, 'Infographic.png');\n  }\n\n  UpdateLayering(layerAction) {\n    if (this._selectedChartIndex !== -1) {\n      this._chartHandler.UpdateLayering(this._selectedChartIndex, layerAction);\n    } else if (this._selectedGraphicIndex !== -1) {\n      this._graphicsHandler.UpdateLayering(this._selectedGraphicIndex, layerAction);\n    } else if (this._selectedTextIndex !== -1) {\n      this._textHandler.UpdateLayering(this._selectedTextIndex, layerAction);\n    }\n  }\n\n  InsertElement({\n    type,\n    element\n  }) {\n    let group = new Konva.Group({\n      x: this._chartWidth / 2,\n      y: this._chartHeight / 2\n    });\n\n    this._main.add(group);\n\n    if (type === 'chart') {\n      let chart = 0,\n          decoratorList = [];\n\n      switch (element) {\n        case 'Bar':\n          chart = new BasicBarChart({\n            data: [{\n              category: 'A',\n              value: 10,\n              color: '#000'\n            }, {\n              category: 'B',\n              value: 30,\n              color: '#000'\n            }],\n            group: group,\n            width: 100,\n            height: 100,\n            padding: 0.2\n          });\n          break;\n\n        case 'Stacked':\n          chart = new StackedBarChart({\n            data: [{\n              category: 'A',\n              subcategory: 'one',\n              value: 10,\n              color: '#000'\n            }, {\n              category: 'A',\n              subcategory: 'two',\n              value: 20,\n              color: '#999'\n            }],\n            group: group,\n            width: 100,\n            height: 100,\n            padding: 0.2\n          });\n          break;\n\n        case 'Icon':\n          chart = new IconBarChart({\n            data: [{\n              category: 'A',\n              value: 15,\n              color: '#999'\n            }, {\n              category: 'B',\n              value: 30,\n              color: '#999'\n            }],\n            group: group,\n            width: 100,\n            height: 100,\n            padding: 50\n          });\n          break;\n\n        case 'Waffle':\n          chart = new WaffleChart({\n            numerator: 1,\n            denominator: 3,\n            group: group,\n            presetA: GenerateIconDataArray({\n              icon: '\\uf004',\n              color: '#999',\n              offset: 85,\n              font: '\"Font Awesome 5 Free\"'\n            }),\n            presetB: GenerateIconDataArray({\n              icon: '\\uf004',\n              color: '#000',\n              offset: 85,\n              font: '\"Font Awesome 5 Free\"'\n            }),\n            fontSize: 80,\n            isDynamicResize: false\n          });\n          break;\n\n        case 'Line':\n          chart = new LineChart({\n            data: [{\n              category: 'A',\n              value: 10\n            }, {\n              category: 'B',\n              value: 20\n            }],\n            group: group,\n            chartWidth: 100,\n            chartHeight: 100,\n            lineWidth: 1,\n            pointRadius: 3\n          });\n          decoratorList[0] = new LineXAxisDecorator({\n            chart: chart\n          });\n          decoratorList[1] = new LineYAxisDecorator({\n            chart: decoratorList[0]\n          });\n          break;\n\n        case 'Pie':\n          chart = new PieChart({\n            data: [{\n              category: 'A',\n              value: 10,\n              color: '#999'\n            }, {\n              category: 'B',\n              value: 90,\n              color: '#000'\n            }],\n            group: group,\n            radius: 50\n          });\n          break;\n\n        case 'Donut':\n          chart = new DonutChart({\n            data: [{\n              category: 'A',\n              value: 20,\n              color: '#999'\n            }, {\n              category: 'B',\n              value: 80,\n              color: '#000'\n            }],\n            group: group,\n            radius: 50,\n            innerRadius: 35\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      if (chart !== 0) {\n        this._chartHandler.AddChart({\n          chart: chart,\n          group: group,\n          type: element\n        });\n\n        decoratorList.forEach(d => {\n          this._chartHandler.AddDecorator({\n            decorator: d,\n            id: this._chartHandler.GetCurrChartID()\n          });\n        });\n        if (decoratorList.length === 0) chart.CreateChart();else decoratorList[decoratorList.length - 1].CreateChart();\n\n        this._AddGraphSelection();\n\n        this._ChartHelper(group);\n      }\n    } else if (type === 'icon') {\n      let icon = new Konva.Text({\n        text: String.fromCharCode(parseInt(element, 16)),\n        fontFamily: '\"Font Awesome 5 Free\"',\n        fontStyle: '900',\n        fill: '#000',\n        fontSize: 100\n      });\n\n      this._graphicsHandler.AddGraphic({\n        type: type,\n        graphic: icon,\n        group: group\n      });\n\n      this._AddGraphicSelection();\n\n      this._GraphicHelper(group);\n    }\n\n    this._main.batchDraw();\n  }\n\n  _CreateSwitchableContainer(attrs = {}, id = '') {\n    attrs.name = 'Switchable Container ' + id;\n    return new Konva.Group(attrs);\n  }\n  /**\n   * @summary Removes the event listeners from each text node.\n   */\n\n\n  _RemoveTextListeners() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('EditableText');\n    });\n\n    selection.forEach(textElem => {\n      textElem.off('dblclick');\n    });\n  }\n  /**\n   * @summary Removes the event listeners from each chart node.\n   */\n\n\n  _RemoveChartListeners() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('Chart');\n    });\n\n    selection.forEach(chartElem => {\n      chartElem.off('dblclick');\n    });\n  }\n\n  _RemoveGraphicListeners() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Graphic');\n    });\n\n    selection.forEach(group => {\n      group.off('dblclick');\n    });\n  }\n\n  _CreateImage({\n    x,\n    y,\n    width,\n    height,\n    src,\n    group\n  }) {\n    let image = new Image(),\n        imageHelper = new Konva.Image(),\n        imageGroup = new Konva.Group();\n\n    image.onload = () => {\n      imageHelper.setAttrs({\n        x: x,\n        y: y,\n        height: height,\n        width: width,\n        image: image,\n        opacity: 1,\n        stroke: 'black',\n        strokeWidth: 0\n      });\n      imageHelper.cache();\n      imageHelper.filters([Konva.Filters.Contrast, Konva.Filters.Brighten, Konva.Filters.Blur]);\n      imageHelper.brightness(0);\n      imageHelper.blurRadius(0);\n      imageHelper.contrast(0);\n\n      this._main.batchDraw();\n\n      image.onload = null;\n    };\n\n    image.src = src;\n    imageGroup.add(imageHelper);\n    group.add(imageGroup);\n\n    this._graphicsHandler.AddGraphic({\n      type: 'image',\n      graphic: imageHelper,\n      group: imageGroup\n    });\n  }\n  /**\n   * @summary     A function that takes in a font and a font weight and maps it\n   *              to the proper quill code.\n   * \n   * @param {string} font   The font associated with a quill code.\n   * @param {int}    weight The weight associated with a quill code. \n   */\n\n\n  _quillMap(font, weight = 0) {\n    if (font === 'museo' && weight === 900) return '900-museo';else if (font === 'canada-type-gibson') {\n      switch (weight) {\n        case 100:\n          return '100-canada';\n\n        case 200:\n          return '200-canada';\n\n        case 400:\n          return '400-canada';\n\n        case 500:\n          return '500-canada';\n\n        case 600:\n          return '600-canada';\n\n        case 700:\n          return '700-canada';\n\n        case 900:\n          return '900-canada';\n\n        default:\n          return '100-canada';\n      }\n    } else if (font === 'Montserrat') return '200-Montserrat';else if (font === 'Open Sans') return 'Open-Sans';else if (font === 'Roboto') {\n      switch (weight) {\n        case 100:\n          return '100-Roboto';\n\n        case 300:\n          return '300-Roboto';\n\n        case 400:\n          return '400-Roboto';\n\n        case 500:\n          return '500-Roboto';\n\n        case 700:\n          return '700-Roboto';\n\n        case 900:\n          return '900-Roboto';\n\n        default:\n          return '100-Roboto';\n      }\n    }\n  }\n  /**\n   * @summary     Adds a black border around the edges of the canvas element.\n   */\n\n\n  _AddStageBorder() {\n    var bkg = new Konva.Rect({\n      x: 0,\n      y: 0,\n      width: this._stage.width(),\n      height: this._stage.height(),\n      fill: 'white',\n      stroke: 'black'\n    });\n\n    this._main.add(bkg);\n\n    bkg.moveToBottom();\n  }\n  /**\n   * @summary     Returns the width of a text element given the text's font.\n   * @description Using canvas' measureText function, _GetTextWidth returns the\n   *              width in pixels of a given piece of text.\n   * \n   * @param {string} text       The text we want to determine the width of.\n   * @param {double} fontSize   The font size of the text we want to find the width of.\n   * @param {string} fontFamily The font family of the text we want to analyze.\n   */\n\n\n  _GetTextWidth(text, fontSize, fontFamily) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = fontSize + 'px ' + fontFamily;\n    var helper = ctx.measureText(text).width;\n    canvas.remove();\n    return helper;\n  }\n  /**\n   * @param {double} width  The width of the element we are centering.\n   * @param {double} center The x-coordinate we want to center about.\n   */\n\n\n  _CenterXAbout(width, center) {\n    return center - width / 2;\n  }\n  /**\n   * @summary     Calls additional functions to complete the infographic.\n   * @description Renders all of the text elements and adds the capability to \n   *              edit graphs and text elements.\n   */\n\n\n  _FinalizeInfog() {\n    this._RenderText();\n\n    this._AddGraphSelection();\n\n    this._AddTextSelection();\n\n    this._AddGraphicSelection(); // this._AddMultipleElementSelector();\n\n  }\n  /**\n   * @summary     Renders all of the text elements.\n   * @description Iterates through all of the elements in textHandler and converts\n   *              them from DOM elements to Konva.Image elements.\n   */\n\n\n  _RenderText() {\n    var helperElem = document.createElement('div');\n    helperElem.style.position = 'absolute';\n    document.getElementById('renderHelper').appendChild(helperElem);\n\n    for (var i = 0; i < this._textHandler.GetSize(); i++) {\n      helperElem.appendChild(this._textHandler.GetTextElem(i));\n\n      this._HTMLToCanvas('.EditableText', i);\n\n      this._textHandler.GetTextElem(i).remove();\n    }\n\n    helperElem.remove();\n  }\n  /**\n   * @summary     Converts DOM elements on the page to Konva.Image elements\n   * @description Uses the html2canvas module to convert DOM elements located \n   *              within the body into Konva.Image elements.\n   * \n   * @param {int} index The index of the text element we want to convert.\n   */\n\n\n  _HTMLToCanvas(query, index) {\n    var element = document.querySelector(query); // var comp = window.getComputedStyle(element, null);\n\n    html2canvas(element, {\n      logging: false,\n      backgroundColor: null,\n      scrollY: -window.scrollY // width: comp.width.replace('px', ''),\n\n    }).then(image => {\n      // console.log('image width: ' + image.width)\n      this._textHandler.GetImage(index).image(image);\n\n      this._main.batchDraw();\n    }).catch(() => {\n      var helperElem = document.createElement('div');\n      helperElem.style.position = 'absolute';\n      document.getElementById('renderHelper').appendChild(helperElem);\n      helperElem.appendChild(this._textHandler.GetTextElem(index));\n\n      this._HTMLToCanvas('.EditableText', index);\n\n      this._textHandler.GetTextElem(index).remove();\n\n      helperElem.remove();\n    });\n    /*console.log('width: ' + comp.width);\n    console.log('height: ' + comp.height);\n    console.log('x: ' + comp.x);\n    console.log('y: ' + comp.y)*/\n  }\n  /**\n   * @summary     Adds the capability to select and edit text.\n   * @description Iterates through all of the elements in the text handler and\n   *              adds an event listener that triggers when the text element\n   *              is double clicked.\n   */\n\n\n  _AddTextSelection() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('EditableText');\n    });\n\n    selection.forEach(textElem => {\n      textElem.on('dblclick', () => {\n        textElem.setAttr('draggable', true);\n\n        this._tr.nodes([textElem]);\n\n        this._tr.moveToTop();\n\n        this._main.batchDraw();\n\n        this._selectedTextIndex = textElem.getAttr('id');\n        this._selectedTextHelper = this._selectedTextIndex;\n\n        this._textCallback(this._textHandler.GetHandlerElem(this._selectedTextIndex));\n\n        this._editorHandler('text-editor');\n\n        setTimeout(() => {\n          this._stage.on('click', HandleOutsideClick);\n        });\n\n        var HandleOutsideClick = e => {\n          if (e.target !== textElem) {\n            this._selectedTextIndex = -1;\n\n            this._editorHandler('none');\n\n            this._tr.nodes([]);\n\n            textElem.setAttr('draggable', false);\n\n            this._main.batchDraw();\n\n            this._stage.off('click', HandleOutsideClick);\n          }\n        };\n      });\n      textElem.on('dragend', () => {\n        this._SwitchContainerOnDrag(textElem);\n      });\n    });\n  }\n  /**\n   * @summary     Updates current handler element.\n   * @description Updates the text handler element located at _selectedTextIndex\n   *              with data from the parameterized textElem variable.\n   * \n   * @param {JSON} textElem A JSON object containing the updated textElem information.\n   */\n\n\n  UpdateTextHandler(textElem) {\n    if (textElem.image === undefined || textElem.textElem === undefined || textElem.group === undefined || textElem.spanCSS === undefined || textElem === 0) {\n      return;\n    }\n\n    this._textHandler.UpdateTextElem({\n      index: this._selectedTextHelper,\n      textElem: textElem.textElem,\n      group: textElem.group,\n      image: textElem.image,\n      spanCSS: textElem.spanCSS\n    });\n\n    this._selectedTextHelper = -1;\n  }\n\n  Remove() {\n    // TODO remove entries from handler\n    if (this._selectedChartIndex !== -1) {\n      this._tr.nodes([]);\n\n      this._main.batchDraw();\n\n      this._chartHandler.RemoveHandlerElem(this._selectedChartIndex);\n\n      this._selectedChartIndex = -1;\n    } else if (this._selectedTextIndex !== -1) {\n      this._tr.nodes([]);\n\n      this._main.batchDraw();\n\n      this._textHandler.RemoveHandlerElem(this._selectedTextIndex);\n\n      this._selectedChartIndex = -1;\n    } else if (this._selectedGraphicIndex !== -1) {\n      this._tr.nodes([]);\n\n      this._main.batchDraw();\n\n      this._graphicsHandler.RemoveHandlerElem(this._selectedGraphicIndex);\n\n      this._selectedGraphicIndex = -1;\n    }\n  }\n\n  UpdateChartDecorators(settings) {\n    if (settings === 0 || this._selectedChartIndex === -1) return;\n\n    this._chartHandler.UpdateChartDecorators(this._selectedChartIndex, settings);\n  }\n  /**\n   * @summary     Updates the selected chart.\n   * @description Updates the chart (and its associated data) at index \n   *              _selectedChartIndex.\n   * @param {misc} chartData The structure of this variable depends on the \n   *                         type of chart we are dealing with.\n   */\n\n\n  UpdateChartData(chartData) {\n    if (chartData === 0 || this._selectedChartIndex === -1) return;\n\n    var elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex),\n        name = elem.group.getAttr('name');\n\n    if (name === 'Selectable Chart Waffle') {\n      // We assume that the data will be formatted as follows\n      // data = {\n      //    numerator: {num}, denominator: {num}\n      // }\n      if (chartData.numerator === 0 || chartData.denominator === 0) return;\n      var numerator = chartData.numerator,\n          denominator = chartData.denominator;\n      elem.chart.UpdateData(parseInt(numerator), parseInt(denominator));\n    } else {\n      // We assume that the data will be formated as follows\n      // data = [\n      //    { category: {string}, value: {float}, color: {string}}, ...   \n      // ]\n      elem.chart.UpdateData(chartData);\n    }\n\n    this._UpdateDecorators(elem);\n  }\n\n  UpdateChartSettings(settings) {\n    if (settings === 0 || this._selectedChartIndex === -1) return;\n\n    let elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex);\n\n    elem.chart.UpdateChartSettings(settings);\n\n    this._UpdateDecorators(elem);\n  }\n\n  UpdateGraphicSettings(settings) {\n    if (settings === 0 || this._selectedGraphicIndex === -1) return;\n\n    this._graphicsHandler.UpdateGraphicSettings({\n      id: this._selectedGraphicIndex,\n      settings: settings\n    });\n\n    this._tr.forceUpdate();\n\n    this._main.batchDraw();\n  }\n  /**\n   * @summary     Updates decorators.\n   * @description Iterates though all the decorators in handlerElem and updates\n   *              them.\n   * \n   * @param {JSON} handlerElem \n   */\n\n\n  _UpdateDecorators(handlerElem) {\n    var prev = handlerElem.chart;\n\n    for (var i = 0; i <= handlerElem.decoratorSize; i++) {\n      handlerElem.decorators[i].UpdateDecorator(prev);\n      prev = handlerElem.decorators[i];\n    }\n\n    prev.CreateChart();\n\n    this._tr.forceUpdate();\n\n    this._main.batchDraw();\n  }\n  /**\n   * @summary     Adds the capability to select and edit graphs.\n   * @description Iterates through all of the elements in the graph handler and\n   *              adds an event listener when they are double clicked on.\n   */\n\n\n  _AddGraphSelection() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('Chart');\n    });\n\n    selection.forEach(chart => {\n      /**\n       * Adds ability to select and edit graphs.\n       */\n      chart.on('dblclick', () => {\n        this._ChartHelper(chart);\n      });\n      chart.on('dragend', () => {\n        this._SwitchContainerOnDrag(chart);\n      });\n    });\n  }\n\n  _ChartHelper(chart) {\n    this._selectedChartIndex = parseInt(chart.getAttr('id'));\n\n    this._tr.nodes([chart]);\n\n    this._tr.moveToTop();\n\n    this._main.batchDraw();\n\n    chart.setAttr('draggable', true);\n\n    let selectedChart = this._chartHandler.GetHandlerElem(this._selectedChartIndex).chart,\n        dSettings = this._chartHandler.GetDecoratorSettingsArray(this._selectedChartIndex);\n\n    this._chartCallback(selectedChart.GetData(), selectedChart.GetChartSettings(), dSettings);\n\n    if (chart.getAttr('name') === 'Selectable Chart Waffle') {\n      this._editorHandler('waffle-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Pie') {\n      this._editorHandler('pie-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Bar') {\n      this._editorHandler('bar-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Stacked') {\n      this._editorHandler('stacked-bar-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Line') {\n      this._editorHandler('line-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Icon') {\n      this._editorHandler('icon-bar-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Donut') {\n      this._editorHandler('donut-editor');\n    }\n\n    setTimeout(() => {\n      this._stage.on('click', HandleOutsideClick);\n    });\n\n    var HandleOutsideClick = e => {\n      if (e.target !== chart) {\n        this._selectedChartIndex = -1;\n\n        this._editorHandler('none');\n\n        this._tr.nodes([]);\n\n        chart.setAttr('draggable', false);\n\n        this._main.batchDraw();\n\n        this._stage.off('click', HandleOutsideClick);\n      }\n    };\n  }\n\n  _AddGraphicSelection() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Graphic');\n    });\n\n    selection.forEach(group => {\n      group.on('dblclick', () => {\n        this._GraphicHelper(group);\n      });\n      group.on('dragend', () => {\n        this._SwitchContainerOnDrag(group);\n      });\n    });\n  }\n\n  _GraphicHelper(group) {\n    this._selectedGraphicIndex = group.getAttr('id');\n\n    let type = this._graphicsHandler.GetType(this._selectedGraphicIndex);\n\n    this._tr.nodes([group]);\n\n    this._tr.moveToTop();\n\n    this._main.batchDraw();\n\n    group.setAttr('draggable', true);\n\n    this._editorHandler(type + '-editor');\n\n    this._graphicCallback(this._graphicsHandler.GetSettings(this._selectedGraphicIndex));\n\n    setTimeout(() => {\n      this._stage.on('click', HandleOutsideClick);\n    });\n\n    var HandleOutsideClick = e => {\n      if (e.target !== group) {\n        this._selectedGraphicIndex = -1;\n\n        this._tr.nodes([]);\n\n        group.setAttr('draggable', false);\n\n        this._main.batchDraw();\n\n        this._editorHandler('none');\n\n        this._stage.off('click', HandleOutsideClick);\n      }\n    };\n  }\n\n  _SwitchContainerOnDrag(elem) {\n    let selection = this._stage.find(node => {\n      return node.hasName('Switchable') && node.hasName('Container');\n    }),\n        parent = this._FindTopContainer(elem);\n\n    selection = selection.filter(d => parent !== d);\n    selection.forEach(group => {\n      if (Konva.Util.haveIntersection(group.getClientRect(), elem.getClientRect())) {\n        let absPos = elem.getAbsolutePosition();\n        elem.moveTo(group);\n        elem.absolutePosition({\n          x: absPos.x,\n          y: absPos.y\n        });\n      }\n    });\n  }\n\n  _FindTopContainer(elem) {\n    let parent = elem.getParent();\n\n    while (parent.getDepth() > 2 && !parent.hasName('Switchable')) {\n      parent = parent.getParent();\n    }\n\n    return parent;\n  }\n\n  _AddMultipleElementSelector() {\n    this._main.add(this._selectionRectangle);\n\n    this._MultipleSelectorStart();\n\n    this._MultipleSelectorMove();\n\n    this._MultipleSelectorEnd();\n\n    this._MultipleSelectorDeselect();\n  }\n\n  _MultipleSelectorStart() {\n    this._stage.on('mousedown touchstart', e => {\n      //if (e.target !== this._stage) return;\n      this._isSelecting = true;\n      this._mouseX1 = this._stage.getPointerPosition().x;\n      this._mouseX2 = this._mouseX1;\n      this._mouseY1 = this._stage.getPointerPosition().y;\n      this._mouseY2 = this._mouseY1;\n\n      this._selectionRectangle.visible(true);\n\n      this._selectionRectangle.width(0);\n\n      this._selectionRectangle.height(0);\n\n      this._main.batchDraw();\n    });\n  }\n\n  _MultipleSelectorMove() {\n    this._stage.on('mousemove touchmove', () => {\n      if (!this._selectionRectangle.visible()) return;\n      this._mouseX2 = this._stage.getPointerPosition().x;\n      this._mouseY2 = this._stage.getPointerPosition().y;\n\n      this._selectionRectangle.setAttrs({\n        x: Math.min(this._mouseX1, this._mouseX2),\n        y: Math.min(this._mouseY1, this._mouseY2),\n        width: Math.abs(this._mouseX2 - this._mouseX1),\n        height: Math.abs(this._mouseY2 - this._mouseY1)\n      });\n\n      this._main.batchDraw();\n    });\n  }\n\n  _MultipleSelectorEnd() {\n    this._stage.on('mouseup touchend', () => {\n      if (!this._selectionRectangle.visible()) return; // selection code \n\n      var elems = this._stage.find('.Selectable').toArray();\n\n      var box = this._selectionRectangle.getClientRect();\n      /*var selected = elems.filter((element) => {\n          if (Konva.Util.haveIntersection(box, element.getClientRect())) {\n              alert('h')\n              return element;\n          }\n          var x = element.getClientRect().x,\n              y = element.getClientRect().y;\n          if (x >= box.x &&\n              x <= box.x + box.width &&\n              y >= box.y &&\n              y <= box.y + box.height)\n          {\n              element.setAttr('draggable', true);\n              this._oldNodes.push(element);\n              return element;\n          }\n      });*/\n\n\n      var selected = elems.filter(elem => Konva.Util.haveIntersection(box, elem.getClientRect()));\n      console.log(selected);\n\n      this._tr.nodes(selected);\n\n      this._tr.moveToTop();\n\n      this._main.batchDraw();\n\n      setTimeout(() => {\n        this._selectionRectangle.visible(false);\n\n        this._main.batchDraw();\n\n        this._hasSelected = true;\n        this._isSelecting = false;\n      });\n    });\n  }\n\n  _MultipleSelectorDeselect() {\n    this._stage.on('click tap', e => {\n      if (this._selectionRectangle.visible()) return;\n\n      if (this._hasSelected) {\n        this._oldNodes.forEach(node => {\n          node.setAttr('draggable', false);\n        });\n\n        this._tr.nodes([]);\n\n        this._main.batchDraw();\n\n        this._hasSelected = false;\n        return;\n      }\n    });\n  }\n\n}\n\nexport { AInfographic };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/InfographicTemplates/AInfographic.js"],"names":["Konva","html2canvas","ChartHandler","GraphicsHandler","TextHandler","BasicBarChart","StackedBarChart","IconBarChart","GenerateIconDataArray","WaffleChart","LineChart","LineXAxisDecorator","LineYAxisDecorator","DonutChart","PieChart","AInfographic","constructor","height","width","editorHandler","textCallback","chartCallback","graphicCallback","TypeError","CreateInfographic","undefined","Draw","_chartHandler","_textHandler","_graphicsHandler","_tr","Transformer","nodes","resizeEnabled","rotateEnabled","_chartHeight","_chartWidth","_stage","Stage","container","_main","Layer","_editorHandler","_textCallback","_chartCallback","_graphicCallback","_selectedTextIndex","_selectedTextHelper","_selectedChartIndex","_selectedGraphicIndex","add","_AddStageBorder","GetDimensions","Clean","_RemoveTextListeners","_RemoveChartListeners","_RemoveGraphicListeners","destroy","ClearSelection","Download","downloadURI","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","remove","dataURL","toDataURL","pixelRatio","UpdateLayering","layerAction","InsertElement","type","element","group","Group","x","y","chart","decoratorList","data","category","value","color","padding","subcategory","numerator","denominator","presetA","icon","offset","font","presetB","fontSize","isDynamicResize","chartWidth","chartHeight","lineWidth","pointRadius","radius","innerRadius","AddChart","forEach","d","AddDecorator","decorator","id","GetCurrChartID","length","CreateChart","_AddGraphSelection","_ChartHelper","Text","text","String","fromCharCode","parseInt","fontFamily","fontStyle","fill","AddGraphic","graphic","_AddGraphicSelection","_GraphicHelper","batchDraw","_CreateSwitchableContainer","attrs","selection","find","node","hasName","textElem","off","chartElem","_CreateImage","src","image","Image","imageHelper","imageGroup","onload","setAttrs","opacity","stroke","strokeWidth","cache","filters","Filters","Contrast","Brighten","Blur","brightness","blurRadius","contrast","_quillMap","weight","bkg","Rect","moveToBottom","_GetTextWidth","canvas","ctx","getContext","helper","measureText","_CenterXAbout","center","_FinalizeInfog","_RenderText","_AddTextSelection","helperElem","style","position","getElementById","i","GetSize","GetTextElem","_HTMLToCanvas","query","index","querySelector","logging","backgroundColor","scrollY","window","then","GetImage","catch","on","setAttr","moveToTop","getAttr","GetHandlerElem","setTimeout","HandleOutsideClick","e","target","_SwitchContainerOnDrag","UpdateTextHandler","spanCSS","UpdateTextElem","Remove","RemoveHandlerElem","UpdateChartDecorators","settings","UpdateChartData","chartData","elem","UpdateData","_UpdateDecorators","UpdateChartSettings","UpdateGraphicSettings","forceUpdate","handlerElem","prev","decoratorSize","decorators","UpdateDecorator","selectedChart","dSettings","GetDecoratorSettingsArray","GetData","GetChartSettings","GetType","GetSettings","parent","_FindTopContainer","filter","Util","haveIntersection","getClientRect","absPos","getAbsolutePosition","moveTo","absolutePosition","getParent","getDepth","_AddMultipleElementSelector","_selectionRectangle","_MultipleSelectorStart","_MultipleSelectorMove","_MultipleSelectorEnd","_MultipleSelectorDeselect","_isSelecting","_mouseX1","getPointerPosition","_mouseX2","_mouseY1","_mouseY2","visible","Math","min","abs","elems","toArray","box","selected","console","log","_hasSelected","_oldNodes"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// AInfographic.js\n// October 26, 2020 \n\nimport Konva from 'konva';\nimport html2canvas from 'html2canvas';\nimport { ChartHandler, GraphicsHandler, TextHandler } from '../Handlers/index';\nimport { BasicBarChart, StackedBarChart } from '../Charts/BarChart/index';\nimport { IconBarChart } from '../Charts/IconBarChart/index';\nimport { GenerateIconDataArray, WaffleChart } from '../Charts/WaffleChart';\nimport { LineChart, LineXAxisDecorator, LineYAxisDecorator } from '../Charts/LineChart';\nimport { DonutChart, PieChart } from '../Charts/PieChart';\n\nclass AInfographic \n{\n    /**\n     * @summary     An abstract class the provide structure and common functionality\n     *              to the Infographic type.\n     * @description See summary.\n     * \n     * @requires D3.js\n     * @requires Konva.js\n     * \n     * @source _AddTextSelection() uses code from https://konvajs.org/docs/sandbox/Editable_Text.html\n     * @source Selecting mutliple elements demo uses code from https://konvajs.org/docs/select_and_transform/Basic_demo.html#page-title\n     * @source _DrawSVG code taken from https://konvajs.org/docs/sandbox/SVG_On_Canvas.html\n     * @source Download code taken from https://konvajs.org/docs/data_and_serialization/High-Quality-Export.html\n     * \n     * @param {double} height The height of the canvas element\n     * @param {double} width  The width of the canvas element\n     */\n    constructor(height, width, editorHandler, textCallback, chartCallback, graphicCallback)\n    {\n        if (AInfographic === this.constructor) {\n            throw new TypeError('Abstract class \"AInfographic\" cannot be instantiated');\n        }\n\n        if (this.CreateInfographic === undefined) {\n            throw new TypeError('Types extending \"AInfographic\" must implement CreateInfographic()');\n        }\n\n        if (this.Draw === undefined) {\n            throw new TypeError('Types extending \"AInfographic\" must implement Draw()');\n        }\n\n        this._chartHandler = new ChartHandler();\n        this._textHandler = new TextHandler();\n        this._graphicsHandler = new GraphicsHandler();\n\n        this._tr = new Konva.Transformer({\n            nodes: [],\n            resizeEnabled: false,\n            rotateEnabled: false,\n        });\n\n        this._chartHeight = height;\n        this._chartWidth = width;\n        this._stage = new Konva.Stage({\n            container: 'canvas-container',\n            width: this._chartWidth,\n            height: this._chartHeight,\n        });\n\n        /*this._selectionRectangle = new Konva.Rect({\n            fill: 'rgba(0, 0, 255, 0.5)',\n            visible: false,\n        });\n        this._hasSelected = false;\n        this._isSelecting = false;\n        this._oldNodes = [];\n        this._mouseX1 = 0, this._mouseX2 = 0, this._mouseY1 = 0, this._mouseY2 = 0;*/\n\n        this._main = new Konva.Layer();\n        // this._UIAdder = new UIAdder(this._chartWidth, this._chartHeight);\n\n        this._editorHandler = editorHandler;\n        this._textCallback = textCallback;\n        this._chartCallback = chartCallback;\n        this._graphicCallback = graphicCallback;\n\n        this._selectedTextIndex = -1;\n        this._selectedTextHelper = -1;\n        this._selectedChartIndex = -1;\n        this._selectedGraphicIndex = -1;\n\n        this._stage.add(this._main);\n\n        this._main.add(this._tr);\n\n        this._AddStageBorder();\n    }\n\n    /**\n     * @summary     Returns chart's dimensions to caller.\n     * @description Returns the chart's width and height in the form of a JSON\n     *              object to the caller.\n     * @returns A JSON object containing the chart's width and height.\n     */\n    GetDimensions()\n    {\n        return {\n            width: this._chartWidth,\n            height: this._chartHeight,\n        };\n    }\n\n    /**\n     * @summary     Manages memory for infographic type.\n     * @description A function that is responsible for freeing memory that would \n     *              otherwise cause memory leaks. \n     */\n    Clean()\n    {\n        // Remove chart/text listeners\n        this._RemoveTextListeners();\n        this._RemoveChartListeners();\n        this._RemoveGraphicListeners();\n\n        // Remove all the elements from this._stage\n        this._stage.destroy();\n        this._stage = 0;\n    }\n\n    ClearSelection()\n    {\n        this._tr.nodes([]);\n        this._selectedChartIndex = -1;\n        this._selectedGraphicIndex = -1;\n        this._selectedTextIndex = this._selectedTextHelper = -1;\n    }\n\n    Download()\n    {\n        // function from https://stackoverflow.com/a/15832662/512042\n        function downloadURI(uri, name) {\n            var link = document.createElement('a');\n            link.download = name;\n            link.href = uri;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            link.remove();\n        }\n        var dataURL = this._stage.toDataURL({pixelRatio: 5})\n        downloadURI(dataURL, 'Infographic.png');\n    }\n\n    UpdateLayering(layerAction)\n    {\n        if (this._selectedChartIndex !== -1) {\n            this._chartHandler.UpdateLayering(this._selectedChartIndex, layerAction);\n        } else if (this._selectedGraphicIndex !== -1) {\n            this._graphicsHandler.UpdateLayering(this._selectedGraphicIndex, layerAction);\n        } else if (this._selectedTextIndex !== -1) {\n            this._textHandler.UpdateLayering(this._selectedTextIndex, layerAction);\n        }\n    }\n\n    InsertElement({type, element})\n    {\n        let group = new Konva.Group({\n            x: this._chartWidth / 2,\n            y: this._chartHeight / 2,\n        });\n        this._main.add(group);\n        if (type === 'chart') {\n            let chart = 0, \n                decoratorList = [];\n            switch(element) {\n                case 'Bar':\n                    chart = new BasicBarChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 10,\n                                color: '#000',\n                            },\n                            {\n                                category: 'B',\n                                value: 30,\n                                color: '#000'\n                            }\n                        ],\n                        group: group,\n                        width: 100,\n                        height: 100,\n                        padding: 0.2,\n                    });\n                    break;\n                case 'Stacked':\n                    chart = new StackedBarChart({\n                        data: [\n                            {\n                                category: 'A',\n                                subcategory: 'one',\n                                value: 10,\n                                color: '#000',\n                            },\n                            {\n                                category: 'A',\n                                subcategory: 'two',\n                                value: 20,\n                                color: '#999',\n                            }\n                        ],\n                        group: group,\n                        width: 100,\n                        height: 100, \n                        padding: 0.2,\n                    });\n                    break;\n                case 'Icon':\n                    chart = new IconBarChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 15,\n                                color: '#999'\n                            },\n                            {\n                                category: 'B',\n                                value: 30,\n                                color: '#999',\n                            }\n                        ],\n                        group: group,\n                        width: 100,\n                        height: 100,\n                        padding: 50,\n                    });\n                    break;\n                case 'Waffle':\n                    chart = new WaffleChart({\n                        numerator: 1,\n                        denominator: 3,\n                        group: group,\n                        presetA: GenerateIconDataArray({\n                            icon: '\\uf004',\n                            color: '#999',\n                            offset: 85,\n                            font: '\"Font Awesome 5 Free\"'\n                        }),\n                        presetB: GenerateIconDataArray({\n                            icon: '\\uf004',\n                            color: '#000',\n                            offset: 85,\n                            font: '\"Font Awesome 5 Free\"'\n                        }),\n                        fontSize: 80,\n                        isDynamicResize: false,\n                    });\n                    break;\n                case 'Line':\n                    chart = new LineChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 10,\n                            },\n                            {\n                                category: 'B',\n                                value: 20,\n                            }\n                        ],\n                        group: group,\n                        chartWidth: 100,\n                        chartHeight: 100,\n                        lineWidth: 1,\n                        pointRadius: 3,\n                    });\n                    decoratorList[0] = new LineXAxisDecorator({\n                        chart: chart,\n                    });\n                    decoratorList[1] = new LineYAxisDecorator({\n                        chart: decoratorList[0],\n                    });\n                    break;\n                case 'Pie':\n                    chart = new PieChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 10,\n                                color: '#999',\n                            },\n                            {\n                                category: 'B',\n                                value: 90,\n                                color: '#000',\n                            }\n                        ],\n                        group: group,\n                        radius: 50,\n                    });\n                    break;\n                case 'Donut':\n                    chart = new DonutChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 20,\n                                color: '#999',\n                            },\n                            {\n                                category: 'B',\n                                value: 80,\n                                color: '#000'\n                            }\n                        ],\n                        group: group,\n                        radius: 50,\n                        innerRadius: 35,\n                    });\n                    break;\n                default:\n                    break;\n            }\n            if (chart !== 0) {\n                this._chartHandler.AddChart({\n                    chart: chart,\n                    group: group,\n                    type: element,\n                });\n                decoratorList.forEach(d => {\n                    this._chartHandler.AddDecorator({\n                        decorator: d, \n                        id: this._chartHandler.GetCurrChartID()\n                    });\n                });\n\n                if (decoratorList.length === 0) chart.CreateChart();\n                else decoratorList[decoratorList.length - 1].CreateChart();\n\n                this._AddGraphSelection();\n                this._ChartHelper(group);\n            }\n        } else if (type === 'icon') {\n            let icon = new Konva.Text({\n                text: String.fromCharCode(parseInt(element, 16)),\n                fontFamily: '\"Font Awesome 5 Free\"',\n                fontStyle: '900',\n                fill: '#000',\n                fontSize: 100,\n            });\n            this._graphicsHandler.AddGraphic({\n                type: type,\n                graphic: icon,\n                group: group,\n            });\n            this._AddGraphicSelection();\n            this._GraphicHelper(group);\n        }\n        this._main.batchDraw();\n    }\n\n    _CreateSwitchableContainer(attrs = {}, id = '')\n    {\n        attrs.name = 'Switchable Container ' + id;\n        return new Konva.Group(attrs);\n    }\n\n    /**\n     * @summary Removes the event listeners from each text node.\n     */\n    _RemoveTextListeners()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('EditableText');\n        });\n        selection.forEach(textElem => { textElem.off('dblclick'); })\n    }\n\n    /**\n     * @summary Removes the event listeners from each chart node.\n     */\n    _RemoveChartListeners()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('Chart');\n        });\n        selection.forEach(chartElem => { chartElem.off('dblclick'); })\n    }\n\n    _RemoveGraphicListeners()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Graphic');\n        });\n        selection.forEach(group => { group.off('dblclick'); });\n    }\n\n    _CreateImage({x, y, width, height, src, group})\n    {\n        let image = new Image(), imageHelper = new Konva.Image(),\n            imageGroup = new Konva.Group();\n\n        image.onload = () => {\n            imageHelper.setAttrs({\n                x: x, \n                y: y,\n                height: height,\n                width: width,\n                image: image,\n                opacity: 1,\n                stroke: 'black',\n                strokeWidth: 0\n            });\n            imageHelper.cache();\n            imageHelper.filters([\n                Konva.Filters.Contrast,\n                Konva.Filters.Brighten,\n                Konva.Filters.Blur,\n            ]);\n\n            imageHelper.brightness(0);\n            imageHelper.blurRadius(0);\n            imageHelper.contrast(0);\n\n            this._main.batchDraw();\n            image.onload = null;\n        };\n\n        image.src = src;\n        imageGroup.add(imageHelper);\n        group.add(imageGroup);\n        this._graphicsHandler.AddGraphic({\n            type: 'image',\n            graphic: imageHelper,\n            group: imageGroup,\n        });\n    }\n\n    /**\n     * @summary     A function that takes in a font and a font weight and maps it\n     *              to the proper quill code.\n     * \n     * @param {string} font   The font associated with a quill code.\n     * @param {int}    weight The weight associated with a quill code. \n     */\n    _quillMap(font, weight = 0)\n    {\n        if (font === 'museo' && weight === 900) return '900-museo';\n        else if (font === 'canada-type-gibson') {\n            switch (weight) {\n                case 100: return '100-canada';\n                case 200: return '200-canada';\n                case 400: return '400-canada';\n                case 500: return '500-canada';\n                case 600: return '600-canada';\n                case 700: return '700-canada';\n                case 900: return '900-canada';\n                default: return '100-canada';\n            }\n        } else if (font === 'Montserrat') return '200-Montserrat';\n        else if (font === 'Open Sans') return 'Open-Sans';\n        else if (font === 'Roboto') {\n            switch(weight) {\n                case 100: return '100-Roboto';\n                case 300: return '300-Roboto';\n                case 400: return '400-Roboto';\n                case 500: return '500-Roboto';\n                case 700: return '700-Roboto';\n                case 900: return '900-Roboto';\n                default: return '100-Roboto';\n            }\n        }\n    }\n\n    /**\n     * @summary     Adds a black border around the edges of the canvas element.\n     */\n    _AddStageBorder()\n    {\n        var bkg = new Konva.Rect({\n            x: 0,\n            y: 0,\n            width: this._stage.width(),\n            height: this._stage.height(),\n            fill: 'white',\n            stroke: 'black',\n        });\n        this._main.add(bkg);\n        bkg.moveToBottom();\n    }\n\n    /**\n     * @summary     Returns the width of a text element given the text's font.\n     * @description Using canvas' measureText function, _GetTextWidth returns the\n     *              width in pixels of a given piece of text.\n     * \n     * @param {string} text       The text we want to determine the width of.\n     * @param {double} fontSize   The font size of the text we want to find the width of.\n     * @param {string} fontFamily The font family of the text we want to analyze.\n     */\n    _GetTextWidth(text, fontSize, fontFamily)\n    {\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n\n        ctx.font = fontSize + 'px ' + fontFamily;\n        var helper = ctx.measureText(text).width;\n        canvas.remove();\n\n        return helper;\n    }\n    /**\n     * @param {double} width  The width of the element we are centering.\n     * @param {double} center The x-coordinate we want to center about.\n     */\n    _CenterXAbout(width, center)\n    {\n        return center - (width / 2);\n    }\n\n    /**\n     * @summary     Calls additional functions to complete the infographic.\n     * @description Renders all of the text elements and adds the capability to \n     *              edit graphs and text elements.\n     */\n    _FinalizeInfog()\n    {\n        this._RenderText();\n        this._AddGraphSelection();\n        this._AddTextSelection();\n        this._AddGraphicSelection();\n        // this._AddMultipleElementSelector();\n    }\n\n    /**\n     * @summary     Renders all of the text elements.\n     * @description Iterates through all of the elements in textHandler and converts\n     *              them from DOM elements to Konva.Image elements.\n     */\n    _RenderText()\n    {\n        var helperElem = document.createElement('div');\n        helperElem.style.position = 'absolute';\n        document.getElementById('renderHelper').appendChild(helperElem);\n\n        for (var i = 0; i < this._textHandler.GetSize(); i++) {\n            helperElem.appendChild(this._textHandler.GetTextElem(i));\n            this._HTMLToCanvas('.EditableText', i);\n            this._textHandler.GetTextElem(i).remove();\n        }\n        helperElem.remove();\n    }\n\n    /**\n     * @summary     Converts DOM elements on the page to Konva.Image elements\n     * @description Uses the html2canvas module to convert DOM elements located \n     *              within the body into Konva.Image elements.\n     * \n     * @param {int} index The index of the text element we want to convert.\n     */\n    _HTMLToCanvas(query, index)\n    {\n        var element = document.querySelector(query);\n        // var comp = window.getComputedStyle(element, null);\n        html2canvas(element, {\n            logging: false,\n            backgroundColor: null,\n            scrollY: -(window.scrollY),\n            // width: comp.width.replace('px', ''),\n        }).then((image) => {\n            // console.log('image width: ' + image.width)\n            this._textHandler.GetImage(index).image(image);\n            this._main.batchDraw();\n        }).catch(() => {\n            var helperElem = document.createElement('div');\n            helperElem.style.position = 'absolute';\n            document.getElementById('renderHelper').appendChild(helperElem);\n\n            helperElem.appendChild(this._textHandler.GetTextElem(index));\n            this._HTMLToCanvas('.EditableText', index);\n            this._textHandler.GetTextElem(index).remove();\n            helperElem.remove();\n        });\n        /*console.log('width: ' + comp.width);\n        console.log('height: ' + comp.height);\n        console.log('x: ' + comp.x);\n        console.log('y: ' + comp.y)*/\n    }\n\n    /**\n     * @summary     Adds the capability to select and edit text.\n     * @description Iterates through all of the elements in the text handler and\n     *              adds an event listener that triggers when the text element\n     *              is double clicked.\n     */\n    _AddTextSelection()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('EditableText');\n        });\n\n        selection.forEach((textElem) => {\n            textElem.on('dblclick', () => {\n                textElem.setAttr('draggable', true);\n\n                this._tr.nodes([textElem]);\n                this._tr.moveToTop();\n                this._main.batchDraw();\n\n                this._selectedTextIndex = textElem.getAttr('id');\n                this._selectedTextHelper = this._selectedTextIndex;\n  \n                this._textCallback(this._textHandler.GetHandlerElem(this._selectedTextIndex))\n                this._editorHandler('text-editor');\n\n                setTimeout(() => {\n                    this._stage.on('click', HandleOutsideClick);\n                });\n\n                var HandleOutsideClick = (e) => {\n                    if (e.target !== textElem) {\n                        this._selectedTextIndex = -1;\n                        this._editorHandler('none');\n                        this._tr.nodes([]);\n                        textElem.setAttr('draggable', false);\n                        this._main.batchDraw();\n                        this._stage.off('click', HandleOutsideClick);\n                    }\n                };\n            });\n\n            textElem.on('dragend', () => {\n                this._SwitchContainerOnDrag(textElem);\n            });\n        });\n    }\n\n    /**\n     * @summary     Updates current handler element.\n     * @description Updates the text handler element located at _selectedTextIndex\n     *              with data from the parameterized textElem variable.\n     * \n     * @param {JSON} textElem A JSON object containing the updated textElem information.\n     */\n    UpdateTextHandler(textElem)\n    {\n        if (textElem.image === undefined || textElem.textElem === undefined || \n            textElem.group === undefined || textElem.spanCSS === undefined || \n            textElem === 0) {\n            return;\n        } \n        this._textHandler.UpdateTextElem({\n            index: this._selectedTextHelper,\n            textElem: textElem.textElem,\n            group: textElem.group,\n            image: textElem.image,\n            spanCSS: textElem.spanCSS,\n        });\n        this._selectedTextHelper = -1;\n    }\n\n    Remove()\n    {\n        // TODO remove entries from handler\n        if (this._selectedChartIndex !== -1) {\n            this._tr.nodes([]);\n            this._main.batchDraw();\n            this._chartHandler.RemoveHandlerElem(this._selectedChartIndex);\n            this._selectedChartIndex = -1;\n        } else if (this._selectedTextIndex !== -1) {\n            this._tr.nodes([]);\n            this._main.batchDraw();\n            this._textHandler.RemoveHandlerElem(this._selectedTextIndex);\n            this._selectedChartIndex = -1;\n        } else if (this._selectedGraphicIndex !== -1) {\n            this._tr.nodes([]);\n            this._main.batchDraw();\n            this._graphicsHandler.RemoveHandlerElem(this._selectedGraphicIndex);\n            this._selectedGraphicIndex = -1;\n        }\n    }\n\n    UpdateChartDecorators(settings)\n    {\n        if (settings === 0 || this._selectedChartIndex === -1) return;\n        this._chartHandler.UpdateChartDecorators(this._selectedChartIndex, settings);\n    }\n\n    /**\n     * @summary     Updates the selected chart.\n     * @description Updates the chart (and its associated data) at index \n     *              _selectedChartIndex.\n     * @param {misc} chartData The structure of this variable depends on the \n     *                         type of chart we are dealing with.\n     */\n    UpdateChartData(chartData)\n    {\n        if (chartData === 0 || this._selectedChartIndex === -1) return;\n        var elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex),\n            name = elem.group.getAttr('name');\n        if (name === 'Selectable Chart Waffle') {\n            // We assume that the data will be formatted as follows\n            // data = {\n            //    numerator: {num}, denominator: {num}\n            // }\n            if (chartData.numerator === 0 || chartData.denominator === 0) return;\n            var numerator = chartData.numerator, denominator = chartData.denominator;\n            elem.chart.UpdateData(parseInt(numerator), parseInt(denominator));\n        } else {\n            // We assume that the data will be formated as follows\n            // data = [\n            //    { category: {string}, value: {float}, color: {string}}, ...   \n            // ]\n            elem.chart.UpdateData(chartData);\n        } \n\n        this._UpdateDecorators(elem);\n    }\n\n    UpdateChartSettings(settings)\n    {\n        if (settings === 0 || this._selectedChartIndex === -1) return;\n        let elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex);\n        elem.chart.UpdateChartSettings(settings);\n        this._UpdateDecorators(elem);\n    }\n\n    UpdateGraphicSettings(settings)\n    {\n        if (settings === 0 || this._selectedGraphicIndex === -1) return;\n        this._graphicsHandler.UpdateGraphicSettings({\n            id: this._selectedGraphicIndex, \n            settings:settings\n        });\n        this._tr.forceUpdate();\n        this._main.batchDraw();\n    }\n\n    /**\n     * @summary     Updates decorators.\n     * @description Iterates though all the decorators in handlerElem and updates\n     *              them.\n     * \n     * @param {JSON} handlerElem \n     */\n    _UpdateDecorators(handlerElem)\n    {\n        var prev = handlerElem.chart;\n        for (var i = 0; i <= handlerElem.decoratorSize; i++) {\n            handlerElem.decorators[i].UpdateDecorator(prev);\n            prev = handlerElem.decorators[i];\n        }\n        prev.CreateChart();\n        this._tr.forceUpdate();\n        this._main.batchDraw();\n    }\n\n    /**\n     * @summary     Adds the capability to select and edit graphs.\n     * @description Iterates through all of the elements in the graph handler and\n     *              adds an event listener when they are double clicked on.\n     */\n    _AddGraphSelection()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('Chart');\n        });\n        selection.forEach((chart) => {\n            /**\n             * Adds ability to select and edit graphs.\n             */\n            chart.on('dblclick', () => {\n                this._ChartHelper(chart);\n            });\n\n            chart.on('dragend', () => {\n                this._SwitchContainerOnDrag(chart);\n            });\n        });\n    }\n\n\n    _ChartHelper(chart)\n    {\n        this._selectedChartIndex = parseInt(chart.getAttr('id'));\n                this._tr.nodes([chart]);\n                this._tr.moveToTop();\n                this._main.batchDraw();\n                chart.setAttr('draggable', true);\n\n                let selectedChart = this._chartHandler.GetHandlerElem(this._selectedChartIndex).chart,\n                    dSettings = this._chartHandler.GetDecoratorSettingsArray(this._selectedChartIndex);\n                this._chartCallback(selectedChart.GetData(), selectedChart.GetChartSettings(), dSettings);\n\n                if (chart.getAttr('name') === 'Selectable Chart Waffle') {\n                    this._editorHandler('waffle-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Pie') {\n                    this._editorHandler('pie-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Bar') {\n                    this._editorHandler('bar-editor')\n                } else if (chart.getAttr('name') === 'Selectable Chart Stacked') {\n                    this._editorHandler('stacked-bar-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Line') {\n                    this._editorHandler('line-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Icon') {\n                    this._editorHandler('icon-bar-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Donut') {\n                    this._editorHandler('donut-editor');\n                }\n\n                setTimeout(() => {\n                    this._stage.on('click', HandleOutsideClick);\n                });\n\n                var HandleOutsideClick = (e) => {\n                    if (e.target !== chart) {\n                        this._selectedChartIndex = -1;\n                        this._editorHandler('none');\n                        this._tr.nodes([]);\n                        chart.setAttr('draggable', false);\n                        this._main.batchDraw();\n                        this._stage.off('click', HandleOutsideClick);\n                    }\n                };\n    }\n\n    _AddGraphicSelection()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Graphic');\n        });\n\n        selection.forEach((group) => {\n            group.on('dblclick', () => {\n                this._GraphicHelper(group);\n            });\n\n            group.on('dragend', () => {\n                this._SwitchContainerOnDrag(group);\n            });\n        });\n    }\n\n    _GraphicHelper(group)\n    {\n        this._selectedGraphicIndex = group.getAttr('id');\n        let type = this._graphicsHandler.GetType(this._selectedGraphicIndex);\n        this._tr.nodes([group]);\n        this._tr.moveToTop();\n        this._main.batchDraw();\n        group.setAttr('draggable', true);\n\n        this._editorHandler(type + '-editor');\n\n        this._graphicCallback(\n            this._graphicsHandler.GetSettings(this._selectedGraphicIndex)\n        );\n\n        setTimeout(() => {\n            this._stage.on('click', HandleOutsideClick);\n        });\n\n        var HandleOutsideClick = (e) => {\n            if (e.target !== group) {\n                this._selectedGraphicIndex = -1;\n                this._tr.nodes([]);\n                group.setAttr('draggable', false);\n                this._main.batchDraw();\n                this._editorHandler('none');\n                this._stage.off('click', HandleOutsideClick);\n            }\n        };\n    }\n\n    _SwitchContainerOnDrag(elem)\n    {\n        let selection = this._stage.find((node) => {\n            return node.hasName('Switchable') && node.hasName('Container');\n        }),\n            parent = this._FindTopContainer(elem);\n        \n        selection = selection.filter(d => parent !== d)\n    \n        selection.forEach(group => {\n            if (Konva.Util.haveIntersection(group.getClientRect(), elem.getClientRect())) {\n                let absPos = elem.getAbsolutePosition();\n                elem.moveTo(group);\n                elem.absolutePosition({\n                    x: absPos.x,\n                    y: absPos.y\n                });\n            }\n        });\n    }\n\n    _FindTopContainer(elem)\n    {\n        let parent = elem.getParent();\n        while (parent.getDepth() > 2 && !parent.hasName('Switchable')) {\n            parent = parent.getParent();\n        }\n        return parent;\n    }\n\n    _AddMultipleElementSelector()\n    {\n        this._main.add(this._selectionRectangle);\n        this._MultipleSelectorStart();\n        this._MultipleSelectorMove();\n        this._MultipleSelectorEnd();\n        this._MultipleSelectorDeselect();\n    }\n\n    _MultipleSelectorStart()\n    {\n        this._stage.on('mousedown touchstart', e => {\n            //if (e.target !== this._stage) return;\n            this._isSelecting = true;\n\n            this._mouseX1 = this._stage.getPointerPosition().x;\n            this._mouseX2 = this._mouseX1;\n            this._mouseY1 = this._stage.getPointerPosition().y;\n            this._mouseY2 = this._mouseY1;\n\n            this._selectionRectangle.visible(true);\n            this._selectionRectangle.width(0);\n            this._selectionRectangle.height(0);\n            this._main.batchDraw();\n        });\n    }\n\n    _MultipleSelectorMove()\n    {\n        this._stage.on('mousemove touchmove', () => {\n            if (!this._selectionRectangle.visible()) return;\n\n            this._mouseX2 = this._stage.getPointerPosition().x;\n            this._mouseY2 = this._stage.getPointerPosition().y;\n\n            this._selectionRectangle.setAttrs({\n                x: Math.min(this._mouseX1, this._mouseX2),\n                y: Math.min(this._mouseY1, this._mouseY2),\n                width: Math.abs(this._mouseX2 - this._mouseX1),\n                height: Math.abs(this._mouseY2 - this._mouseY1),\n            });\n\n            this._main.batchDraw();\n        });\n    }\n\n    _MultipleSelectorEnd()\n    {\n        this._stage.on('mouseup touchend', () => {\n            if (!this._selectionRectangle.visible()) return;\n            // selection code \n            var elems = this._stage.find('.Selectable').toArray();\n            var box = this._selectionRectangle.getClientRect();\n            /*var selected = elems.filter((element) => {\n                if (Konva.Util.haveIntersection(box, element.getClientRect())) {\n                    alert('h')\n                    return element;\n                }\n                var x = element.getClientRect().x,\n                    y = element.getClientRect().y;\n                if (x >= box.x &&\n                    x <= box.x + box.width &&\n                    y >= box.y &&\n                    y <= box.y + box.height)\n                {\n                    element.setAttr('draggable', true);\n                    this._oldNodes.push(element);\n                    return element;\n                }\n            });*/\n\n            var selected = elems.filter((elem) =>\n                Konva.Util.haveIntersection(box, elem.getClientRect())\n            );\n            console.log(selected)\n\n            this._tr.nodes(selected);\n            this._tr.moveToTop();\n            this._main.batchDraw();\n\n            setTimeout(() => {\n                this._selectionRectangle.visible(false);\n                this._main.batchDraw();\n                this._hasSelected = true;\n                this._isSelecting = false;\n            });\n        });\n    }\n\n    _MultipleSelectorDeselect()\n    {\n        this._stage.on('click tap', e => {\n            if (this._selectionRectangle.visible()) return;\n            if (this._hasSelected) {\n                this._oldNodes.forEach(node => {\n                    node.setAttr('draggable', false);\n                });\n                \n                this._tr.nodes([]);\n                this._main.batchDraw();\n                this._hasSelected = false;\n                return;\n            }\n        });\n    }\n}\n\nexport { AInfographic };"]},"metadata":{},"sourceType":"module"}