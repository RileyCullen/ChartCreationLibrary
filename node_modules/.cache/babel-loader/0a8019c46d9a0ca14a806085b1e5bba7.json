{"ast":null,"code":"// Cullen, Riley\n// BasicBarChart.js\n// October 6, 2020\nimport { ABarChart } from './ABarChart';\nimport * as d3 from 'd3';\nimport Konva from 'konva';\n\nclass BasicBarChart extends ABarChart {\n  /**\n  * @summary     A basic bar chart consisting of only vertical bars.\n  * @description This type provides the user the possibility of creating a \n  *              basic bar chart. Essentially, this type is only responsible \n  *              for creating the vertical bars contained within a bar chart.\n  * \n  * @requires ABarChart.js\n  * \n  * @see ABarChart.js for constructor parameters.\n  */\n  constructor({\n    data,\n    group,\n    width,\n    height,\n    padding,\n    rotateBy = 0,\n    stacked = false\n  }) {\n    super(data, group, width, height, padding, rotateBy, stacked);\n  }\n  /**\n   * @summary     This function adds the bar chart to the Konva.Group passed in\n   *              to the constructor.\n   * @description This function calls _CreationHelper, which is \n   *              responsible for adding the bars to the Konva.Group.\n   */\n\n\n  CreateChart() {\n    this._CreationHelper();\n  }\n  /**\n   * @summary     Creates the bar chart.\n   * @description This function creates a custom DOM container and uses D3\n   *              (_BindData) to create custom DOM elements inside the container\n   *              and canvas (_DrawBars) to render the bars on canvas.\n   */\n\n\n  _CreationHelper() {\n    var virtualCanvas = document.createElement('custom');\n    var custom = d3.select(virtualCanvas);\n\n    this._BindData(custom);\n\n    this._DrawBars(custom, false);\n  }\n  /**\n   * @summary     Binds data to custom a DOM element in memory.\n   * @description Uses D3 to create custom DOM elements named custom.rect and\n   *              binds rendering data to it so that it can be correctly drawn\n   *              on the canvas.\n   */\n\n\n  _BindData(custom) {\n    custom.selectAll('custom.rect').data(this._data).enter().append('custom').attr('class', 'rect').attr('x', d => {\n      return this._xScale(d.category);\n    }).attr('y', d => {\n      return this._chartHeight;\n    }).attr('width', d => {\n      return this._xScale.bandwidth();\n    }).attr('height', d => {\n      return -(this._chartHeight - this._yScale(d.value));\n    }).attr('fillStyle', d => {\n      return d.color;\n    }).attr('fillStyleHidden', d => {\n      return d.color;\n    });\n  }\n  /**\n   * @summary     Uses binded data to add Konva.js elements to group.\n   * @description Uses the data bound to the custom DOM elements in _BindData\n   *              to create a canvas representation of the D3 chart using \n   *              Konva.js.\n   */\n\n\n  _DrawBars(custom, hidden) {\n    var elements = custom.selectAll('custom.rect');\n    var helper = new Konva.Group();\n    elements.each(function (d, i) {\n      var node = d3.select(this);\n      helper.add(new Konva.Rect({\n        x: parseFloat(node.attr('x')),\n        y: parseFloat(node.attr('y')),\n        width: parseFloat(node.attr('width')),\n        height: parseFloat(node.attr('height')),\n        fill: hidden ? node.attr('fillStyleHidden') : node.attr('fillStyle')\n      }));\n    });\n    helper.rotate(this._rotateBy);\n\n    this._group.add(helper);\n\n    console.log('group');\n    console.log(this._group);\n  }\n\n}\n\nexport { BasicBarChart };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/BarChart/ConcreteCharts/BasicBarChart.js"],"names":["ABarChart","d3","Konva","BasicBarChart","constructor","data","group","width","height","padding","rotateBy","stacked","CreateChart","_CreationHelper","virtualCanvas","document","createElement","custom","select","_BindData","_DrawBars","selectAll","_data","enter","append","attr","d","_xScale","category","_chartHeight","bandwidth","_yScale","value","color","hidden","elements","helper","Group","each","i","node","add","Rect","x","parseFloat","y","fill","rotate","_rotateBy","_group","console","log"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// BasicBarChart.js\n// October 6, 2020\n\nimport { ABarChart } from './ABarChart';\nimport * as d3 from 'd3';\nimport Konva from 'konva';\n\nclass BasicBarChart extends ABarChart \n{\n     /**\n     * @summary     A basic bar chart consisting of only vertical bars.\n     * @description This type provides the user the possibility of creating a \n     *              basic bar chart. Essentially, this type is only responsible \n     *              for creating the vertical bars contained within a bar chart.\n     * \n     * @requires ABarChart.js\n     * \n     * @see ABarChart.js for constructor parameters.\n     */\n    constructor({data, group, width, height, padding, rotateBy = 0, stacked = false})\n    {\n        super(data, group, width, height, padding, rotateBy, stacked);\n    }\n\n    /**\n     * @summary     This function adds the bar chart to the Konva.Group passed in\n     *              to the constructor.\n     * @description This function calls _CreationHelper, which is \n     *              responsible for adding the bars to the Konva.Group.\n     */\n    CreateChart()\n    {\n        this._CreationHelper();\n    }\n\n    /**\n     * @summary     Creates the bar chart.\n     * @description This function creates a custom DOM container and uses D3\n     *              (_BindData) to create custom DOM elements inside the container\n     *              and canvas (_DrawBars) to render the bars on canvas.\n     */\n    _CreationHelper()\n    {\n        var virtualCanvas = document.createElement('custom');\n        var custom = d3.select(virtualCanvas);\n\n        this._BindData(custom);\n        this._DrawBars(custom, false);\n    }\n\n    /**\n     * @summary     Binds data to custom a DOM element in memory.\n     * @description Uses D3 to create custom DOM elements named custom.rect and\n     *              binds rendering data to it so that it can be correctly drawn\n     *              on the canvas.\n     */\n    _BindData(custom)\n    {\n        custom.selectAll('custom.rect')\n            .data(this._data)\n            .enter()\n            .append('custom')\n            .attr('class', 'rect')\n            .attr('x', (d) => {\n                return this._xScale(d.category);\n            })\n            .attr('y', (d) => {\n                return this._chartHeight;\n            })\n            .attr('width', (d) => {\n                return this._xScale.bandwidth();\n            })\n            .attr('height', (d) => {\n                return -(this._chartHeight - this._yScale(d.value));\n            })\n            .attr('fillStyle', d => { return d.color; })\n            .attr('fillStyleHidden', d => { return d.color; });\n    }\n\n    /**\n     * @summary     Uses binded data to add Konva.js elements to group.\n     * @description Uses the data bound to the custom DOM elements in _BindData\n     *              to create a canvas representation of the D3 chart using \n     *              Konva.js.\n     */\n    _DrawBars(custom, hidden)\n    {\n        var elements = custom.selectAll('custom.rect');\n        var helper = new Konva.Group();\n        elements.each(function(d,i) {\n            var node = d3.select(this);\n            helper.add(new Konva.Rect({\n                x: parseFloat(node.attr('x')),\n                y: parseFloat(node.attr('y')),\n                width: parseFloat(node.attr('width')),\n                height: parseFloat(node.attr('height')),\n                fill: hidden ? node.attr('fillStyleHidden') : node.attr('fillStyle')\n            }));\n        });\n        helper.rotate(this._rotateBy);\n        this._group.add(helper);\n        console.log('group');\n        console.log(this._group);\n    }\n}\n\nexport { BasicBarChart };"]},"metadata":{},"sourceType":"module"}