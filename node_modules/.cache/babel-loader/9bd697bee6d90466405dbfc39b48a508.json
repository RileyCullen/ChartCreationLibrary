{"ast":null,"code":"// Cullen, Riley\n// AWaffleChart.js\n// December 23, 2020\nclass AWaffleChart {\n  /**\n   * @summary     Abstract class for the waffle chart type.\n   * @description Abstract class that provides a common interface for the waffle\n   *              chart type to use.\n   * \n   * @param {int} numerator        The number of presetA icons to display.\n   * @param {int} denominator      The number of total icons.\n   * @param {Konva.Group} group    The group we want to add the chart to. \n   * @param {WafflePreset} presetA The first set of icons to display.\n   * @param {WafflePreset} presetB The second set of icons to display.\n   * @param {int} fontSize         The icon size.\n   * @param {bool} isDynamicResize Determines if the waffle chart will dynamically \n   *                               resize the chart when data is updated.\n   */\n  constructor(numerator, denominator, group, presetA, presetB, fontSize, isDynamicResize, maxIconsPerRow) {\n    if (AWaffleChart === this.constructor) {\n      throw new TypeError('Abstract class \"AWaffleChart\" cannot be instantiated');\n    }\n\n    if (this.CreateChart === undefined) {\n      throw new TypeError('Types extending \"AWaffleChart\" must implement CreateChart()');\n    }\n\n    this._numerator = numerator;\n    this._denominator = denominator;\n    this._group = group;\n    this._presetA = presetA;\n    this._presetB = presetB;\n    this._fontSize = fontSize;\n    this._isDynamicResize = isDynamicResize;\n    this._maxIconsPerRow = maxIconsPerRow;\n  }\n  /**\n   * @summary     Updates the data bound to the given waffle chart.\n   * @description Updates the numerator and denominator bound to the calling\n   *              waffle chart (note: UpdateData only updates _numerator and\n   *              _denominator. CreateChart still needs to be called to actually\n   *              change the chart given on the canvas).\n   * \n   * @param {int} numerator   The number of presetA icons in a waffle chart.\n   * @param {int} denominator The number of total icons in a waffle chart.\n   */\n\n\n  UpdateData(numerator, denominator) {\n    if (numerator === null || numerator === '' || denominator === null || denominator === '') return;\n    if (isNaN(numerator) || isNaN(denominator)) return;\n    this._numerator = numerator;\n    this._denominator = denominator;\n  }\n\n  UpdateChartSettings(settings) {\n    this._presetA.color = settings.icon.aColor;\n    this._presetB.color = settings.icon.bColor;\n    this._fontSize = settings.icon.size;\n    this._presetA.offset = settings.icon.padding;\n    this._presetB.offset = settings.icon.padding;\n    this._maxIconsPerRow = settings.icon.maxIconsPerRow;\n    this._isDynamicResize = settings.dynamicResize.isChecked;\n\n    this._group.setAttr('width', settings.dynamicResize.width);\n\n    this._group.setAttr('height', settings.dynamicResize.height);\n\n    console.log(this._isDynamicResize);\n  }\n\n  GetData() {\n    return {\n      numerator: this._numerator,\n      denominator: this._denominator\n    };\n  }\n\n  GetChartSettings() {\n    return {\n      icon: {\n        aColor: this._presetA.color,\n        bColor: this._presetB.color,\n        size: this._fontSize,\n        padding: this._presetA.offset,\n        maxIconsPerRow: this._maxIconsPerRow\n      },\n      dynamicResize: {\n        isChecked: this._isDynamicResize,\n        width: this._group.getAttr('width'),\n        height: this._group.getAttr('height')\n      }\n    };\n  }\n  /**\n   * @summary     Removes group and its children from canvas.\n   * @description A wrapper function that call's _group's destroy function. \n   *              This function removes the group and its children from the \n   *              canvas\n   */\n\n\n  Remove() {\n    this._group.destroy();\n  }\n  /**\n   * @summary     Removes all of the children in _group.\n   * @description A wrapper function that calls the Konva.js function \n   *              destroyChildren() which removes all of the children in\n   *              _group.\n   */\n\n\n  _DestroyChildren() {\n    this._group.destroyChildren();\n  }\n  /**\n   * @summary     Generates the data used to create waffle chart.\n   * @description A function that creates a JSON array used to draw the waffle \n   *              chart on the canvas.\n   */\n\n\n  _GenerateWaffleDataArr() {\n    var tmp = [];\n\n    for (var i = 0; i < this._denominator; i++) {\n      tmp[i] = {\n        'iconType': i < this._numerator ? this._presetA.icon : this._presetB.icon,\n        'color': i < this._numerator ? this._presetA.color : this._presetB.color,\n        'offset': i < this._numerator ? this._presetA.offset : this._presetB.offset,\n        'fontSize': this._fontSize,\n        'id': i < this._numerator ? 0 : 1,\n        'fontFamily': i < this._numerator ? this._presetA.font : this._presetB.font\n      };\n    }\n\n    return tmp;\n  }\n  /**\n   * @summary     Removes waffle chart elements the custom DOM container and \n   *              from _group.\n   * @description Removes d3 data bound to the chart's DOM container and calls\n   *              _DestroyChildren.\n   * \n   * @param {D3 selection} custom The D3 selection we want to clean.\n   */\n\n\n  _RemoveWaffleChart(custom) {\n    this._RemoveCustomElements(custom);\n\n    this._DestroyChildren();\n  }\n  /**\n   * @summary     Removes all of the D3 elements called custom.rect.\n   * @description Selects all of the elements named custom.rect and removes them\n   *              from the container.\n   * \n   * @param {D3 Selection} custom The D3 selection we want to clean.\n   */\n\n\n  _RemoveCustomElements(custom) {\n    custom.selectAll('custom.rect').remove();\n  }\n  /**\n   * @summary     Determines the size of waffle chart icons.\n   * @description Dynamically calculates the size of the icons within a waffle \n   *              chart given the width defined in _group.\n   * \n   * @param {double} timeout Max amount of tries the function will take before \n   *                         it times out.\n   */\n\n\n  _DetermineFontSize(timeout = 500) {\n    // Canvas variables\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n\n    var currentFontSize = 40,\n        widthPA = this._GetIconWidth(ctx, this._presetA, currentFontSize),\n        widthPB = this._GetIconWidth(ctx, this._presetB, currentFontSize);\n\n    var actualWidth = 0,\n        difference = 0,\n        tries = 0;\n\n    do {\n      actualWidth = widthPA * this._numerator + widthPB * (this._denominator - this._numerator);\n      difference = actualWidth - this._group.getAttr('width');\n      currentFontSize = difference > 0 ? currentFontSize - 0.5 : currentFontSize + 0.5;\n      widthPA = this._GetIconWidth(ctx, this._presetA, currentFontSize);\n      widthPB = this._GetIconWidth(ctx, this._presetB, currentFontSize);\n      this._presetA.offset = this._UpdatePresetOffset(widthPA);\n      this._presetB.offset = this._UpdatePresetOffset(widthPB);\n      tries++;\n    } while ((difference < -0.1 || difference > 0.1) && tries < timeout);\n\n    return currentFontSize;\n  }\n  /**\n   * @summary     Calculates the width of an icon within a preset.\n   * @description Finds the width of an icon within a preset given a specified \n   *              font size.\n   * \n   * @param {Canvas context} ctx   The context of the virtual canvas created \n   *                               in calling function.\n   * @param {Waffle Preset} preset The preset associated with the icon we want \n   *                               to calculate the width of.\n   * @param {int} fontSize         The size of the icon.\n   */\n\n\n  _GetIconWidth(ctx, preset, fontSize) {\n    ctx.font = '900 ' + fontSize + 'px ' + preset.font;\n    var sample = preset.icon;\n    return ctx.measureText(sample).width;\n  }\n  /**\n   * @summary     Updates the preset's offset.\n   * @description Updates the preset's offset using the preset's width.\n   * \n   * @param {double} width Width associated with a preset's icon.\n   */\n\n\n  _UpdatePresetOffset(width) {\n    return width + 3;\n  }\n\n}\n\nexport { AWaffleChart };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/WaffleChart/AWaffleChart.js"],"names":["AWaffleChart","constructor","numerator","denominator","group","presetA","presetB","fontSize","isDynamicResize","maxIconsPerRow","TypeError","CreateChart","undefined","_numerator","_denominator","_group","_presetA","_presetB","_fontSize","_isDynamicResize","_maxIconsPerRow","UpdateData","isNaN","UpdateChartSettings","settings","color","icon","aColor","bColor","size","offset","padding","dynamicResize","isChecked","setAttr","width","height","console","log","GetData","GetChartSettings","getAttr","Remove","destroy","_DestroyChildren","destroyChildren","_GenerateWaffleDataArr","tmp","i","font","_RemoveWaffleChart","custom","_RemoveCustomElements","selectAll","remove","_DetermineFontSize","timeout","canvas","document","createElement","ctx","getContext","currentFontSize","widthPA","_GetIconWidth","widthPB","actualWidth","difference","tries","_UpdatePresetOffset","preset","sample","measureText"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// AWaffleChart.js\n// December 23, 2020\n\nclass AWaffleChart\n{\n    /**\n     * @summary     Abstract class for the waffle chart type.\n     * @description Abstract class that provides a common interface for the waffle\n     *              chart type to use.\n     * \n     * @param {int} numerator        The number of presetA icons to display.\n     * @param {int} denominator      The number of total icons.\n     * @param {Konva.Group} group    The group we want to add the chart to. \n     * @param {WafflePreset} presetA The first set of icons to display.\n     * @param {WafflePreset} presetB The second set of icons to display.\n     * @param {int} fontSize         The icon size.\n     * @param {bool} isDynamicResize Determines if the waffle chart will dynamically \n     *                               resize the chart when data is updated.\n     */\n    constructor(numerator, denominator, group, presetA, presetB, fontSize, \n        isDynamicResize, maxIconsPerRow)\n    {\n        if (AWaffleChart === this.constructor) {\n            throw new TypeError('Abstract class \"AWaffleChart\" cannot be instantiated');\n        }\n        if (this.CreateChart === undefined) {\n            throw new TypeError('Types extending \"AWaffleChart\" must implement CreateChart()');\n        }\n\n        this._numerator = numerator;\n        this._denominator = denominator;\n        this._group = group;\n        this._presetA = presetA;\n        this._presetB = presetB;\n        this._fontSize = fontSize;\n        this._isDynamicResize = isDynamicResize;\n        this._maxIconsPerRow = maxIconsPerRow;\n    }\n\n    /**\n     * @summary     Updates the data bound to the given waffle chart.\n     * @description Updates the numerator and denominator bound to the calling\n     *              waffle chart (note: UpdateData only updates _numerator and\n     *              _denominator. CreateChart still needs to be called to actually\n     *              change the chart given on the canvas).\n     * \n     * @param {int} numerator   The number of presetA icons in a waffle chart.\n     * @param {int} denominator The number of total icons in a waffle chart.\n     */\n    UpdateData(numerator, denominator) \n    {\n        if (numerator === null || numerator === '' || denominator === null || denominator === '') return;\n        if (isNaN(numerator) || isNaN(denominator)) return;\n        this._numerator = numerator;\n        this._denominator = denominator;\n    }\n\n    UpdateChartSettings(settings)\n    {\n        this._presetA.color = settings.icon.aColor;\n        this._presetB.color = settings.icon.bColor;\n        this._fontSize = settings.icon.size;\n        this._presetA.offset = settings.icon.padding;\n        this._presetB.offset = settings.icon.padding;\n        this._maxIconsPerRow = settings.icon.maxIconsPerRow;\n\n        this._isDynamicResize = settings.dynamicResize.isChecked;\n        this._group.setAttr('width', settings.dynamicResize.width);\n        this._group.setAttr('height', settings.dynamicResize.height);\n        console.log(this._isDynamicResize)\n    }\n\n    GetData()\n    {\n        return {\n            numerator: this._numerator,\n            denominator: this._denominator,\n        }\n    }\n\n    GetChartSettings()\n    {\n        return {\n            icon: {\n                aColor: this._presetA.color,\n                bColor: this._presetB.color,\n                size: this._fontSize,\n                padding: this._presetA.offset,\n                maxIconsPerRow: this._maxIconsPerRow\n            },\n            dynamicResize: {\n                isChecked: this._isDynamicResize,\n                width: this._group.getAttr('width'),\n                height: this._group.getAttr('height'),\n            }\n        }\n    }\n\n    /**\n     * @summary     Removes group and its children from canvas.\n     * @description A wrapper function that call's _group's destroy function. \n     *              This function removes the group and its children from the \n     *              canvas\n     */\n    Remove()\n    {\n        this._group.destroy();\n    }\n\n    /**\n     * @summary     Removes all of the children in _group.\n     * @description A wrapper function that calls the Konva.js function \n     *              destroyChildren() which removes all of the children in\n     *              _group.\n     */\n    _DestroyChildren()\n    {\n        this._group.destroyChildren();\n    }\n\n    /**\n     * @summary     Generates the data used to create waffle chart.\n     * @description A function that creates a JSON array used to draw the waffle \n     *              chart on the canvas.\n     */\n    _GenerateWaffleDataArr()\n    {\n        var tmp = []\n        for(var i = 0; i < this._denominator; i++) {\n            tmp[i] = {\n                'iconType': (i < this._numerator) ? this._presetA.icon : this._presetB.icon,\n                'color': (i < this._numerator) ? this._presetA.color : this._presetB.color,\n                'offset': (i < this._numerator) ? this._presetA.offset : this._presetB.offset,\n                'fontSize': this._fontSize,\n                'id': (i < this._numerator) ? 0 : 1,\n                'fontFamily': (i < this._numerator) ? this._presetA.font : this._presetB.font\n            }\n        }\n        return tmp;\n    }\n\n    /**\n     * @summary     Removes waffle chart elements the custom DOM container and \n     *              from _group.\n     * @description Removes d3 data bound to the chart's DOM container and calls\n     *              _DestroyChildren.\n     * \n     * @param {D3 selection} custom The D3 selection we want to clean.\n     */\n    _RemoveWaffleChart(custom)\n    {\n        this._RemoveCustomElements(custom);\n        this._DestroyChildren();\n    }\n\n    /**\n     * @summary     Removes all of the D3 elements called custom.rect.\n     * @description Selects all of the elements named custom.rect and removes them\n     *              from the container.\n     * \n     * @param {D3 Selection} custom The D3 selection we want to clean.\n     */\n    _RemoveCustomElements(custom)\n    {\n        custom.selectAll('custom.rect')\n            .remove();\n    }\n\n    /**\n     * @summary     Determines the size of waffle chart icons.\n     * @description Dynamically calculates the size of the icons within a waffle \n     *              chart given the width defined in _group.\n     * \n     * @param {double} timeout Max amount of tries the function will take before \n     *                         it times out.\n     */\n    _DetermineFontSize(timeout = 500)\n    {\n        // Canvas variables\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n\n        var currentFontSize = 40, \n            widthPA = this._GetIconWidth(ctx, this._presetA, currentFontSize),\n            widthPB = this._GetIconWidth(ctx, this._presetB, currentFontSize);\n\n        var actualWidth = 0, difference = 0, tries = 0;\n\n        do {\n            actualWidth = (widthPA * this._numerator) + (widthPB * (this._denominator - this._numerator));\n            difference = actualWidth - this._group.getAttr('width');\n\n            currentFontSize = (difference > 0) ? currentFontSize - 0.5 : currentFontSize + 0.5;\n\n            widthPA = this._GetIconWidth(ctx, this._presetA, currentFontSize);\n            widthPB = this._GetIconWidth(ctx, this._presetB, currentFontSize);\n\n            this._presetA.offset = this._UpdatePresetOffset(widthPA);\n            this._presetB.offset = this._UpdatePresetOffset(widthPB);\n\n            tries++;\n        } while ((difference < -0.1 || difference > 0.1) && tries < timeout);\n        return currentFontSize;\n    }\n\n    /**\n     * @summary     Calculates the width of an icon within a preset.\n     * @description Finds the width of an icon within a preset given a specified \n     *              font size.\n     * \n     * @param {Canvas context} ctx   The context of the virtual canvas created \n     *                               in calling function.\n     * @param {Waffle Preset} preset The preset associated with the icon we want \n     *                               to calculate the width of.\n     * @param {int} fontSize         The size of the icon.\n     */\n    _GetIconWidth(ctx, preset, fontSize) \n    {\n        ctx.font = '900 ' + fontSize + 'px ' + preset.font;\n        var sample = preset.icon;\n        return ctx.measureText(sample).width;\n    }\n\n    /**\n     * @summary     Updates the preset's offset.\n     * @description Updates the preset's offset using the preset's width.\n     * \n     * @param {double} width Width associated with a preset's icon.\n     */\n    _UpdatePresetOffset(width)\n    {\n        return width + 3;\n    }\n}\n\nexport { AWaffleChart };"]},"metadata":{},"sourceType":"module"}