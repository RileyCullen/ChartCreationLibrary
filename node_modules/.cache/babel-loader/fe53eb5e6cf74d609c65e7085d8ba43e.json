{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/Components/FontSelector.js\";\nimport React from 'react';\nimport { DropdownList, TextField, ColorPicker } from './index';\nimport '../../../../css/React/Editors/FontSelector.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FontSelector extends React.Component {\n  constructor(props) {\n    super(props);\n    this._fontList = ['Times New Roman', 'museo', 'Montserrat', 'Roboto', 'Open Sans', 'canada-type-gibson'];\n    this.state = {\n      currentFont: this.props.initialFont\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"font-selector-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Font Family:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element-right\",\n        children: /*#__PURE__*/_jsxDEV(DropdownList, {\n          options: this._fontList,\n          selected: this.state.currentFont.fontFamily,\n          onChange: value => {\n            this._HandleChange('fontFamily', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Font Size:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element-right\",\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"font-size\",\n          index: 0,\n          initialValue: this.state.currentFont.fontSize,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._HandleChange('fontSize', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Text Color:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"element-right\",\n        children: /*#__PURE__*/_jsxDEV(ColorPicker, {\n          color: this.state.currentFont.textColor,\n          onChange: value => {\n            this._HandleChange('textColor', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  }\n\n  _HandleChange(key, value) {\n    let newFont = this.state.currentFont;\n    newFont[key] = value;\n    this.setState({\n      currentFont: newFont\n    });\n    if (key === 'fontFamily') this.props.updateFontFamily(value);else if (key === 'fontSize') this.props.updateFontSize(value);else if (key === 'textColor') this.props.updateTextColor(value);\n  }\n\n}\n\nexport { FontSelector };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/Components/FontSelector.js"],"names":["React","DropdownList","TextField","ColorPicker","FontSelector","Component","constructor","props","_fontList","state","currentFont","initialFont","render","fontFamily","value","_HandleChange","fontSize","d","i","textColor","key","newFont","setState","updateFontFamily","updateFontSize","updateTextColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,WAAlC,QAAqD,SAArD;AAEA,OAAO,gDAAP;;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiB,CAAC,iBAAD,EAAoB,OAApB,EAA6B,YAA7B,EAA2C,QAA3C,EACb,WADa,EACA,oBADA,CAAjB;AAGA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,KAAKH,KAAL,CAAWI;AADf,KAAb;AAGH;;AAEDC,EAAAA,MAAM,GACN;AACI,wBACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACI,QAAC,YAAD;AACI,UAAA,OAAO,EAAE,KAAKJ,SADlB;AAEI,UAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,WAAX,CAAuBG,UAFrC;AAGI,UAAA,QAAQ,EAAGC,KAAD,IAAW;AACjB,iBAAKC,aAAL,CAAmB,YAAnB,EAAiCD,KAAjC;AACH;AALL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ,eAYI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACI,QAAC,SAAD;AACI,UAAA,EAAE,EAAC,WADP;AAEI,UAAA,KAAK,EAAE,CAFX;AAGI,UAAA,YAAY,EAAE,KAAKL,KAAL,CAAWC,WAAX,CAAuBM,QAHzC;AAII,UAAA,IAAI,EAAE,CAJV;AAKI,UAAA,IAAI,EAAE,CALV;AAMI,UAAA,QAAQ,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChB,iBAAKH,aAAL,CAAmB,UAAnB,EAA+BE,CAA/B;AACH;AARL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAZJ,eAwBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxBJ,eAyBI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACI,QAAC,WAAD;AACI,UAAA,KAAK,EAAE,KAAKR,KAAL,CAAWC,WAAX,CAAuBS,SADlC;AAEI,UAAA,QAAQ,EAAGL,KAAD,IAAW;AACjB,iBAAKC,aAAL,CAAmB,WAAnB,EAAgCD,KAAhC;AACH;AAJL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAoCH;;AAEDC,EAAAA,aAAa,CAACK,GAAD,EAAMN,KAAN,EACb;AACI,QAAIO,OAAO,GAAG,KAAKZ,KAAL,CAAWC,WAAzB;AACAW,IAAAA,OAAO,CAACD,GAAD,CAAP,GAAeN,KAAf;AACA,SAAKQ,QAAL,CAAc;AACVZ,MAAAA,WAAW,EAAEW;AADH,KAAd;AAIA,QAAID,GAAG,KAAK,YAAZ,EAA0B,KAAKb,KAAL,CAAWgB,gBAAX,CAA4BT,KAA5B,EAA1B,KACK,IAAIM,GAAG,KAAK,UAAZ,EAAwB,KAAKb,KAAL,CAAWiB,cAAX,CAA0BV,KAA1B,EAAxB,KACA,IAAIM,GAAG,KAAK,WAAZ,EAAyB,KAAKb,KAAL,CAAWkB,eAAX,CAA2BX,KAA3B;AACjC;;AA/DL;;AAkEA,SAASV,YAAT","sourcesContent":["import React from 'react';\nimport { DropdownList, TextField, ColorPicker } from './index';\n\nimport '../../../../css/React/Editors/FontSelector.css';\n\nclass FontSelector extends React.Component \n{\n    constructor(props)\n    {\n        super(props);\n        this._fontList = ['Times New Roman', 'museo', 'Montserrat', 'Roboto', \n            'Open Sans', 'canada-type-gibson'];\n\n        this.state = {\n            currentFont: this.props.initialFont,\n        }\n    }\n\n    render()\n    {\n        return (\n            <div className='font-selector-container'>\n                <p>Font Family:</p>\n                <div className='element-right'>\n                    <DropdownList \n                        options={this._fontList} \n                        selected={this.state.currentFont.fontFamily}\n                        onChange={(value) => { \n                            this._HandleChange('fontFamily', value);\n                        }}\n                    />\n                </div>\n                <p>Font Size:</p>\n                <div className='element-right'>  \n                    <TextField \n                        id='font-size'\n                        index={0}\n                        initialValue={this.state.currentFont.fontSize}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._HandleChange('fontSize', d);\n                        }}\n                    />\n                </div>\n                <p>Text Color:</p>\n                <div className='element-right'>\n                    <ColorPicker \n                        color={this.state.currentFont.textColor}\n                        onChange={(value) => { \n                            this._HandleChange('textColor', value);\n                        }}    \n                    />\n                </div>\n            </div>\n        );\n    }\n\n    _HandleChange(key, value)\n    {\n        let newFont = this.state.currentFont;\n        newFont[key] = value;\n        this.setState({\n            currentFont: newFont,\n        });\n\n        if (key === 'fontFamily') this.props.updateFontFamily(value);\n        else if (key === 'fontSize') this.props.updateFontSize(value);\n        else if (key === 'textColor') this.props.updateTextColor(value);\n    }\n}\n\nexport { FontSelector };"]},"metadata":{},"sourceType":"module"}