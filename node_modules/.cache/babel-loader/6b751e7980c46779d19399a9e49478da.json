{"ast":null,"code":"// Cullen, Riley\n// APieChart.js\n// October 16, 2020\nclass APieChart {\n  /**\n   * @summary     This abstract class provides the structure for the PieChart\n   *              type.\n   * @description See summary. \n   * \n   * @requires D3.js\n   * @requires Konva.js\n   * \n   * @param {JSON Array}  data   : Data used to create chart.\n   * @param {Konva Group} group  : Konva.Group we want to add our chart to\n   * @param {float}       radius : This is the radius we want our chart to\n   *                               confine to\n   */\n  constructor(data, group, radius) {\n    if (this.constructor === APieChart) {\n      throw new TypeError('Abstract class \"APieChart\" cannot be instantiated');\n    }\n\n    if (this.CreateChart === undefined) {\n      throw new TypeError('Classes extending APieChart must implement \"CreateChart\"');\n    }\n\n    this._data = data;\n    this._group = group;\n    this._radius = radius;\n    this._centerX = radius;\n    this._centerY = radius;\n    this._totalValue = this._CalculateTotal();\n  }\n  /**\n   * @summary     This function calculates the total of all of the d.value's\n   *              in data.\n   * @description This function iterates through all of the data elements in\n   *              data and sums up their d.value to find the total so that the\n   *              pie chart can be broken into percentages.\n   */\n\n\n  _CalculateTotal() {\n    var total = 0;\n\n    this._data.forEach(d => {\n      total += d.value;\n    });\n\n    return total;\n  }\n  /**\n   * @summary     Updates _data.\n   * @description Function that updates _data so that a pie chart with a \n   *              different value can be created.\n   * \n   * @param {JSONArray} data The new data we want to be bound.\n   */\n\n\n  UpdateData(data) {\n    this._data = data;\n  }\n\n  UpdateChartSettings(settings) {\n    this._group.destroyChildren();\n\n    this._radius = parseFloat(settings.size.chartRadius);\n  }\n  /**\n   * @summary     Removes infographic from canvas.\n   */\n\n\n  Remove() {\n    this._group.destroy();\n  }\n  /**\n   * @summary Returns the radius of the pie chart.\n   */\n\n\n  GetRadius() {\n    return this._radius;\n  }\n  /**\n   * @summary Returns the current data array bound to the pie chart.\n   */\n\n\n  GetData() {\n    return this._data;\n  }\n\n  GetChartSettings() {\n    return {\n      size: {\n        chartRadius: this._radius\n      }\n    };\n  }\n\n}\n\nexport { APieChart };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/PieChart/APieChart.js"],"names":["APieChart","constructor","data","group","radius","TypeError","CreateChart","undefined","_data","_group","_radius","_centerX","_centerY","_totalValue","_CalculateTotal","total","forEach","d","value","UpdateData","UpdateChartSettings","settings","destroyChildren","parseFloat","size","chartRadius","Remove","destroy","GetRadius","GetData","GetChartSettings"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,SAAN,CACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EACX;AACI,QAAI,KAAKH,WAAL,KAAqBD,SAAzB,EAAoC;AAChC,YAAM,IAAIK,SAAJ,CAAc,mDAAd,CAAN;AACH;;AAED,QAAI,KAAKC,WAAL,KAAqBC,SAAzB,EAAoC;AAChC,YAAM,IAAIF,SAAJ,CAAc,0DAAd,CAAN;AACH;;AAED,SAAKG,KAAL,GAAaN,IAAb;AACA,SAAKO,MAAL,GAAcN,KAAd;AACA,SAAKO,OAAL,GAAeN,MAAf;AACA,SAAKO,QAAL,GAAgBP,MAAhB;AACA,SAAKQ,QAAL,GAAgBR,MAAhB;AACA,SAAKS,WAAL,GAAmB,KAAKC,eAAL,EAAnB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,eAAe,GACf;AACI,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAKP,KAAL,CAAWQ,OAAX,CAAmBC,CAAC,IAAI;AACpBF,MAAAA,KAAK,IAAIE,CAAC,CAACC,KAAX;AACH,KAFD;;AAGA,WAAOH,KAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACII,EAAAA,UAAU,CAACjB,IAAD,EAAO;AAAE,SAAKM,KAAL,GAAaN,IAAb;AAAoB;;AAEvCkB,EAAAA,mBAAmB,CAACC,QAAD,EACnB;AACI,SAAKZ,MAAL,CAAYa,eAAZ;;AACA,SAAKZ,OAAL,GAAea,UAAU,CAACF,QAAQ,CAACG,IAAT,CAAcC,WAAf,CAAzB;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,MAAM,GACN;AACI,SAAKjB,MAAL,CAAYkB,OAAZ;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,SAAS,GAAG;AAAE,WAAO,KAAKlB,OAAZ;AAAsB;AAEpC;AACJ;AACA;;;AACImB,EAAAA,OAAO,GAAG;AAAE,WAAO,KAAKrB,KAAZ;AAAoB;;AAEhCsB,EAAAA,gBAAgB,GAChB;AACI,WAAO;AACHN,MAAAA,IAAI,EAAE;AACFC,QAAAA,WAAW,EAAE,KAAKf;AADhB;AADH,KAAP;AAKH;;AAxFL;;AA2FA,SAASV,SAAT","sourcesContent":["// Cullen, Riley\n// APieChart.js\n// October 16, 2020\n\nclass APieChart \n{\n    /**\n     * @summary     This abstract class provides the structure for the PieChart\n     *              type.\n     * @description See summary. \n     * \n     * @requires D3.js\n     * @requires Konva.js\n     * \n     * @param {JSON Array}  data   : Data used to create chart.\n     * @param {Konva Group} group  : Konva.Group we want to add our chart to\n     * @param {float}       radius : This is the radius we want our chart to\n     *                               confine to\n     */\n    constructor(data, group, radius)\n    {\n        if (this.constructor === APieChart) {\n            throw new TypeError('Abstract class \"APieChart\" cannot be instantiated');\n        }\n\n        if (this.CreateChart === undefined) {\n            throw new TypeError('Classes extending APieChart must implement \"CreateChart\"');\n        }\n\n        this._data = data;\n        this._group = group;\n        this._radius = radius;\n        this._centerX = radius;\n        this._centerY = radius;\n        this._totalValue = this._CalculateTotal()\n    }\n\n    /**\n     * @summary     This function calculates the total of all of the d.value's\n     *              in data.\n     * @description This function iterates through all of the data elements in\n     *              data and sums up their d.value to find the total so that the\n     *              pie chart can be broken into percentages.\n     */\n    _CalculateTotal()\n    {\n        var total = 0;\n        this._data.forEach(d => {\n            total += d.value;\n        });\n        return total;\n    }\n\n    /**\n     * @summary     Updates _data.\n     * @description Function that updates _data so that a pie chart with a \n     *              different value can be created.\n     * \n     * @param {JSONArray} data The new data we want to be bound.\n     */\n    UpdateData(data) { this._data = data; }\n\n    UpdateChartSettings(settings)\n    {\n        this._group.destroyChildren();\n        this._radius = parseFloat(settings.size.chartRadius);\n    }\n\n    /**\n     * @summary     Removes infographic from canvas.\n     */\n    Remove()\n    {\n        this._group.destroy();\n    }\n\n    /**\n     * @summary Returns the radius of the pie chart.\n     */\n    GetRadius() { return this._radius; }\n\n    /**\n     * @summary Returns the current data array bound to the pie chart.\n     */\n    GetData() { return this._data; }\n\n    GetChartSettings()\n    {\n        return {\n            size: {\n                chartRadius: this._radius\n            }\n        }\n    }\n}\n\nexport { APieChart };"]},"metadata":{},"sourceType":"module"}