{"ast":null,"code":"// Cullen, Riley\n// NumericLabelDecorator.js\n// October 10, 2020\nimport { ABarChartDecorator } from \"./ABarChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass DataValueDecorator extends ABarChartDecorator {\n  /**\n   * @summary     This decorator adds a label to the bars with the bar's value \n   *              as the output.\n   * @description This decorator adds a label to the bars. This label can either be\n   *              a purely numeric variable, a percentage, a category, or a \n   *              combination of the previously mentioned labels.\n   * \n   * @requires ABarChartDecorator.js\n   * \n   * @see ABarChart.js\n   * \n   * @param {BarChart}   chart        See ABarChartDecorator.js    \n   * @param {Boolean}    isPercentage Determines if percentage sign will be displayed\n   * @param {Boolean}    isCategory   Determines if category will be displayed\n   * @param {Boolean}    isMiddle     Determines the location of data value labels.\n   *                                  When true, the data value labels will be located\n   *                                  in the middle of the bars. If false, the \n   *                                  values will be located at the top of the bars.\n   * @param {JSON array} font         Determines font of labels\n   * @param {string}     icon         The icon we passed to IconBarChart. Note\n   *                                  that this parameter is only necessary \n   *                                  when using CategoryLabel with IconBarChart.\n   * @param {double}     iconSize     The size of the icon. Again, this is only\n   *                                  necessary when using CategoryLabel with\n   *                                  IconBarChart.\n   * @param {string} backgroundStroke The stroke color for the background region\n   *                                  created around the data value.\n   * @param {string} backgroundFill   The fill color for the background region\n   *                                  created around the data value.\n   */\n  constructor({\n    chart,\n    displayPercentage = true,\n    displayCategory = false,\n    isMiddle = true,\n    stacked = chart._stacked,\n    font = {\n      fontSize: 8,\n      fontFamily: 'Times New Roman, Times, serif',\n      textColor: '#fff'\n    }\n  }) {\n    super(chart);\n    this._font = Lodash.cloneDeep(font);\n    this._isPercentage = displayPercentage;\n    this._isCategory = displayCategory;\n    this._isMiddle = isMiddle;\n    this._stacked = stacked;\n  }\n  /**\n   * @summary     This function adds a label to the bars within a bar chart.\n   * @description See summary. This is done by calling _chart's CreateBarChart\n   *              function and by calling _AddLabels.\n   */\n\n\n  CreateChart() {\n    this._chart.CreateChart();\n\n    this._AddLabels();\n  }\n\n  GetDecoratorSettings() {\n    return {\n      dataValue: {\n        font: this._font,\n        location: {\n          isMiddle: this._isMiddle\n        },\n        display: {\n          isPercentage: this._isPercentage,\n          isCategory: this._isCategory\n        }\n      }\n    };\n  }\n  /**\n   * @summary     This function adds the labels to the already drawn bar chart.\n   * @description This function iterates through all of the values in _data\n   *              and creates a label for each of the bars based on the booleans\n   *              passed through the constructor as well as the d.value for \n   *              that particular bar.\n   */\n\n\n  _AddLabels() {\n    // TODO: add background region code (see icon labels).\n    var helper = new Konva.Group();\n    var groups = this.GetGroups();\n\n    var offsetHelper = this._CreateOffsetHelper(groups);\n\n    var labelHeight = this._GetFontSize('M', this._font);\n\n    var lastValue = 0;\n\n    this._data.forEach(d => {\n      var label = d.value;\n      if (this._isPercentage) label += '%';\n      if (this._isCategory) label += ' ' + d.category;\n\n      var labelWidth = this._GetFontSize(label, this._font);\n\n      var yPos = this._isMiddle ? this._chartHeight - (this._chartHeight - this._yScale(d.value)) / 2 - labelHeight / 2 - offsetHelper[d.category] : this._yScale(d.value) - offsetHelper[d.category] - labelHeight - 5;\n      offsetHelper[d.category] += this._chartHeight - this._yScale(d.value);\n\n      if (labelWidth > offsetHelper[d.category] - lastValue && this._rotateBy !== 0 && this._stacked) {\n        label = '';\n        labelWidth = this._GetFontSize(label, this._font);\n      } else if (labelHeight > offsetHelper[d.category] - lastValue && this._stacked) {\n        label = '';\n      }\n\n      var text = new Konva.Text({\n        x: this._xScale(d.category) + this._xScale.bandwidth() / 2 - labelWidth / 2,\n        y: yPos,\n        text: label,\n        fontSize: this._font.fontSize,\n        fontFamily: this._font.fontFamily,\n        fill: this._font.textColor\n      }); // Text y position wrong when we rotate so we need to adjust them\n\n      if (this._rotateBy !== 0) {\n        text.x(text.x() + 1 / 2.5 * labelWidth);\n\n        if (this._stacked) {\n          text.y(this._chartHeight - (offsetHelper[d.category] + lastValue) / 2 + labelWidth / 2);\n        } else if (this._isMiddle) {\n          text.y(this._chartHeight / 2 + labelWidth / 2);\n        } else {\n          text.y(this._chartHeight + labelWidth);\n        }\n      }\n\n      text.rotate(-this._rotateBy);\n      helper.add(text);\n\n      if (offsetHelper[d.category] === this._chartHeight) {\n        lastValue = 0;\n      } else {\n        lastValue = offsetHelper[d.category];\n      }\n    });\n\n    this._group.add(helper);\n\n    helper.rotate(this._rotateBy);\n  }\n  /**\n   * @summary     Creates a background region for the a data value label.\n   * \n   * @param {double} x      Starting x position for background region.\n   * @param {double} y      Starting y position for background region.\n   * @param {double} width  Width of background region.\n   * @param {double} height Height of background region.\n   * \n   * @returns A Konva.Rect object representing the newly created background \n   *          region.\n   */\n\n\n  _CreateBackgroundRegion(x, y, width, height) {\n    return new Konva.Rect({\n      x: x - 5,\n      y: y - 5,\n      width: width + 10,\n      height: height + 10,\n      fill: this._backgroundFill,\n      stroke: this._backgroundStroke\n    });\n  }\n\n}\n\nexport { DataValueDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/BarChart/Decorators/DataValueDecorator.js"],"names":["ABarChartDecorator","Konva","Lodash","DataValueDecorator","constructor","chart","displayPercentage","displayCategory","isMiddle","stacked","_stacked","font","fontSize","fontFamily","textColor","_font","cloneDeep","_isPercentage","_isCategory","_isMiddle","CreateChart","_chart","_AddLabels","GetDecoratorSettings","dataValue","location","display","isPercentage","isCategory","helper","Group","groups","GetGroups","offsetHelper","_CreateOffsetHelper","labelHeight","_GetFontSize","lastValue","_data","forEach","d","label","value","category","labelWidth","yPos","_chartHeight","_yScale","_rotateBy","text","Text","x","_xScale","bandwidth","y","fill","rotate","add","_group","_CreateBackgroundRegion","width","height","Rect","_backgroundFill","stroke","_backgroundStroke"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// NumericLabelDecorator.js\n// October 10, 2020\n\nimport { ABarChartDecorator } from \"./ABarChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass DataValueDecorator extends ABarChartDecorator \n{\n    /**\n     * @summary     This decorator adds a label to the bars with the bar's value \n     *              as the output.\n     * @description This decorator adds a label to the bars. This label can either be\n     *              a purely numeric variable, a percentage, a category, or a \n     *              combination of the previously mentioned labels.\n     * \n     * @requires ABarChartDecorator.js\n     * \n     * @see ABarChart.js\n     * \n     * @param {BarChart}   chart        See ABarChartDecorator.js    \n     * @param {Boolean}    isPercentage Determines if percentage sign will be displayed\n     * @param {Boolean}    isCategory   Determines if category will be displayed\n     * @param {Boolean}    isMiddle     Determines the location of data value labels.\n     *                                  When true, the data value labels will be located\n     *                                  in the middle of the bars. If false, the \n     *                                  values will be located at the top of the bars.\n     * @param {JSON array} font         Determines font of labels\n     * @param {string}     icon         The icon we passed to IconBarChart. Note\n     *                                  that this parameter is only necessary \n     *                                  when using CategoryLabel with IconBarChart.\n     * @param {double}     iconSize     The size of the icon. Again, this is only\n     *                                  necessary when using CategoryLabel with\n     *                                  IconBarChart.\n     * @param {string} backgroundStroke The stroke color for the background region\n     *                                  created around the data value.\n     * @param {string} backgroundFill   The fill color for the background region\n     *                                  created around the data value.\n     */\n    constructor({\n        chart, \n        displayPercentage = true, \n        displayCategory = false, \n        isMiddle = true, \n        stacked = chart._stacked,\n        font = {\n            fontSize: 8, \n            fontFamily: 'Times New Roman, Times, serif', \n            textColor: '#fff'\n        },\n    }) \n    {\n        super(chart);\n        this._font = Lodash.cloneDeep(font);\n        this._isPercentage = displayPercentage;\n        this._isCategory = displayCategory;\n        this._isMiddle = isMiddle;\n        this._stacked = stacked;\n    }\n\n    /**\n     * @summary     This function adds a label to the bars within a bar chart.\n     * @description See summary. This is done by calling _chart's CreateBarChart\n     *              function and by calling _AddLabels.\n     */\n    CreateChart()\n    {\n        this._chart.CreateChart();\n        this._AddLabels();\n    }\n\n    GetDecoratorSettings()\n    {\n        return {\n            dataValue: {\n                font: this._font,\n                location: {\n                    isMiddle: this._isMiddle,\n                },\n                display: {\n                    isPercentage: this._isPercentage,\n                    isCategory: this._isCategory,\n                }\n            }\n        };\n    }\n\n    /**\n     * @summary     This function adds the labels to the already drawn bar chart.\n     * @description This function iterates through all of the values in _data\n     *              and creates a label for each of the bars based on the booleans\n     *              passed through the constructor as well as the d.value for \n     *              that particular bar.\n     */\n    _AddLabels()\n    {\n        // TODO: add background region code (see icon labels).\n        var helper = new Konva.Group();\n        var groups = this.GetGroups();\n        var offsetHelper = this._CreateOffsetHelper(groups);\n        var labelHeight = this._GetFontSize('M', this._font);\n        var lastValue = 0;\n\n        this._data.forEach(d => {\n            var label = d.value;\n\n            if (this._isPercentage) label += '%';\n            if (this._isCategory) label += ' ' + d.category;\n\n            var labelWidth = this._GetFontSize(label, this._font);\n\n            var yPos = (this._isMiddle) ? (this._chartHeight - \n                ((this._chartHeight - this._yScale(d.value)) / 2)) - labelHeight / 2 \n                - offsetHelper[d.category] : (this._yScale(d.value) - offsetHelper[d.category]\n                - labelHeight - 5);\n\n            offsetHelper[d.category] += (this._chartHeight - this._yScale(d.value));\n\n            if (labelWidth > offsetHelper[d.category]-lastValue && this._rotateBy !==0 && this._stacked){\n                label = '';\n                labelWidth = this._GetFontSize(label, this._font);\n            }\n            else if (labelHeight > offsetHelper[d.category]-lastValue && this._stacked){\n                label = '';\n            }\n\n            var text = new Konva.Text({\n                x: (this._xScale(d.category) + this._xScale.bandwidth() / 2) - (labelWidth / 2),\n                y: yPos,\n                text: label,\n                fontSize: this._font.fontSize,\n                fontFamily: this._font.fontFamily,\n                fill: this._font.textColor,\n            }); \n\n            // Text y position wrong when we rotate so we need to adjust them\n            if (this._rotateBy !== 0) {\n                text.x(text.x() + (1/2.5) * labelWidth);\n                if (this._stacked){\n                    text.y(this._chartHeight - (offsetHelper[d.category]+lastValue)/2+labelWidth/2);\n                }\n                else if (this._isMiddle) {\n                    text.y(this._chartHeight/2 + labelWidth/2);\n                }\n                else {\n                    text.y(this._chartHeight + labelWidth);\n                }\n            }\n\n            text.rotate(-this._rotateBy);\n            helper.add(text);\n            if (offsetHelper[d.category]===this._chartHeight){\n                lastValue=0;\n            }\n            else {\n                lastValue = offsetHelper[d.category];\n            }\n        });\n        this._group.add(helper);\n        helper.rotate(this._rotateBy);\n    }\n\n    /**\n     * @summary     Creates a background region for the a data value label.\n     * \n     * @param {double} x      Starting x position for background region.\n     * @param {double} y      Starting y position for background region.\n     * @param {double} width  Width of background region.\n     * @param {double} height Height of background region.\n     * \n     * @returns A Konva.Rect object representing the newly created background \n     *          region.\n     */\n    _CreateBackgroundRegion(x, y, width, height)\n    {\n        return new Konva.Rect({\n            x: x - 5,\n            y: y - 5,\n            width: width + 10,\n            height: height + 10,\n            fill: this._backgroundFill,\n            stroke: this._backgroundStroke,\n        });\n    }\n}\n\nexport { DataValueDecorator };"]},"metadata":{},"sourceType":"module"}