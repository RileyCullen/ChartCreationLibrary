{"ast":null,"code":"// Cullen, Riley\n// YAxisDecorator.js\n// October 8, 2020\nimport { ABarChartDecorator } from \"./ABarChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass YAxisDecorator extends ABarChartDecorator {\n  /**\n   * @summary     This type is a concrete decorator that adds a y-axis to the \n   *              bar chart. \n   * @description This class adds a y-axis line, tick marks, and tick labels\n   *              to the given bar chart (or decorator).\n   * \n   * @requires ABarChartDecorator.js\n   * \n   * @see ABarChartDecorator.js\n   * \n   * @param {BarChart}   chart           This type is a concrete bar chart (or decorator)\n   *                                     that we plan on decorating.\n   * @param {string}     lineColor       The color of the axis and its tick marks\n   * @param {int}        lineStrokeWidth Width of the x-axis\n   * @param {int}        tickStrokeWidth Width of the x-axis ticks\n   * @param {JSON Array} font            Determines font size and font family\n   */\n  constructor({\n    chart,\n    lineColor = 'black',\n    lineStrokeWidth = 1,\n    tickStrokeWidth = 0.5,\n    font = {\n      fontSize: 10,\n      fontFamily: 'Times New Roman, Times, serif',\n      textColor: 'black'\n    }\n  }) {\n    super(chart);\n    this._lineColor = lineColor;\n    this._lineStrokeWidth = lineStrokeWidth;\n    this._tickStrokeWidth = tickStrokeWidth;\n    this._font = Lodash.cloneDeep(font);\n  }\n  /**\n   * @summary     This function adds an y-axis to give BarChart type.\n   * @description This function calls _chart's CreateBarChart function\n   *              as well as the _CreateYAxis function.\n   */\n\n\n  CreateChart() {\n    this._chart.CreateChart();\n\n    this._CreateYAxis();\n  }\n\n  GetDecoratorSettings() {\n    return {\n      yAxis: {\n        font: this._font,\n        color: {\n          lineColor: this._lineColor\n        },\n        size: {\n          lineStrokeWidth: this._lineStrokeWidth,\n          tickStrokeWidth: this._tickStrokeWidth\n        }\n      }\n    };\n  }\n  /**\n   * @summary     This function adds a y-axis to the given BarChart type.\n   * @description This function creates a y-axis by calling _CreateAxis\n   *              and _AddTicks.\n   */\n\n\n  _CreateYAxis() {\n    this._CreateAxis();\n\n    this._AddTicks();\n  }\n  /**\n   * @summary     This function adds the base line of the y-axis.\n   * @description This function creates Konva.Line object to represent the\n   *              y-axis and adds it to the given Konva.Group.\n   */\n\n\n  _CreateAxis() {\n    var yAxis = new Konva.Line({\n      points: [0, 0, 0, this._chartHeight],\n      stroke: this._lineColor,\n      strokeWidth: this._lineStrokeWidth\n    });\n    yAxis.rotate(this._rotateBy);\n\n    this._group.add(yAxis);\n  }\n  /**\n   * @summary     This function adds the tick marks and labels to the y-axis.\n   * @description This function iterates through the yScale's range yTick \n   *              times and assigns each of those ticks a numeric value. \n   *              These tick marks and corresponding tick mark values are \n   *              added to the Konva.Group. It should be noted that the \n   *              canvas API does NOT offer a built in function to determine\n   *              the height of text. Thus, we approximate the height of text\n   *              using the width captial 'M'.\n   */\n\n\n  _AddTicks() {\n    var yTicks = this._yScale.ticks(10);\n\n    var helper = new Konva.Group();\n    var tickLength = 6;\n\n    var numberHeight = this._GetFontSize('M', this._font);\n\n    yTicks.forEach(d => {\n      var numberWidth = this._GetFontSize(d, this._font);\n\n      helper.add(new Konva.Line({\n        points: [0, this._yScale(d) - 0.5, -tickLength, this._yScale(d) - 0.5],\n        stroke: this._lineColor,\n        strokeWidth: this._tickStrokeWidth\n      }));\n      var text = new Konva.Text({\n        text: d,\n        fontSize: this._font.fontSize,\n        fontFamily: this._font.fontFamily,\n        x: -tickLength - numberWidth - 5,\n        y: this._yScale(d) - numberHeight / 2,\n        fill: this._font.textColor\n      });\n\n      if (this._rotateBy === 90) {\n        text.setAttr('x', text.getAttr('x') + numberWidth / 2 - numberHeight);\n        text.setAttr('y', text.getAttr('y') + numberHeight - numberWidth / 2);\n        text.rotate(-this._rotateBy);\n      }\n\n      helper.add(text);\n    });\n\n    this._group.add(helper);\n\n    helper.rotate(this._rotateBy);\n  }\n\n}\n\nexport { YAxisDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/BarChart/Decorators/YAxisDecorator.js"],"names":["ABarChartDecorator","Konva","Lodash","YAxisDecorator","constructor","chart","lineColor","lineStrokeWidth","tickStrokeWidth","font","fontSize","fontFamily","textColor","_lineColor","_lineStrokeWidth","_tickStrokeWidth","_font","cloneDeep","CreateChart","_chart","_CreateYAxis","GetDecoratorSettings","yAxis","color","size","_CreateAxis","_AddTicks","Line","points","_chartHeight","stroke","strokeWidth","rotate","_rotateBy","_group","add","yTicks","_yScale","ticks","helper","Group","tickLength","numberHeight","_GetFontSize","forEach","d","numberWidth","text","Text","x","y","fill","setAttr","getAttr"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// YAxisDecorator.js\n// October 8, 2020\n\nimport { ABarChartDecorator } from \"./ABarChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass YAxisDecorator extends ABarChartDecorator\n{\n    /**\n     * @summary     This type is a concrete decorator that adds a y-axis to the \n     *              bar chart. \n     * @description This class adds a y-axis line, tick marks, and tick labels\n     *              to the given bar chart (or decorator).\n     * \n     * @requires ABarChartDecorator.js\n     * \n     * @see ABarChartDecorator.js\n     * \n     * @param {BarChart}   chart           This type is a concrete bar chart (or decorator)\n     *                                     that we plan on decorating.\n     * @param {string}     lineColor       The color of the axis and its tick marks\n     * @param {int}        lineStrokeWidth Width of the x-axis\n     * @param {int}        tickStrokeWidth Width of the x-axis ticks\n     * @param {JSON Array} font            Determines font size and font family\n     */\n    constructor({chart, lineColor = 'black', lineStrokeWidth = 1, tickStrokeWidth = 0.5,\n        font = {fontSize : 10, fontFamily : 'Times New Roman, Times, serif', textColor : 'black'}})\n    {\n        super(chart);\n        this._lineColor = lineColor;\n        this._lineStrokeWidth = lineStrokeWidth;\n        this._tickStrokeWidth = tickStrokeWidth;\n        this._font = Lodash.cloneDeep(font);\n    }\n\n    /**\n     * @summary     This function adds an y-axis to give BarChart type.\n     * @description This function calls _chart's CreateBarChart function\n     *              as well as the _CreateYAxis function.\n     */\n    CreateChart()\n    {\n        this._chart.CreateChart();\n        this._CreateYAxis();\n    }\n\n    GetDecoratorSettings()\n    {\n        return {\n            yAxis: {\n                font: this._font,\n                color: {\n                    lineColor: this._lineColor,\n                },\n                size: {\n                    lineStrokeWidth: this._lineStrokeWidth,\n                    tickStrokeWidth: this._tickStrokeWidth,\n                }\n            }\n        }\n    }\n\n    /**\n     * @summary     This function adds a y-axis to the given BarChart type.\n     * @description This function creates a y-axis by calling _CreateAxis\n     *              and _AddTicks.\n     */\n    _CreateYAxis()\n    {\n        this._CreateAxis();\n        this._AddTicks();\n    }\n\n    /**\n     * @summary     This function adds the base line of the y-axis.\n     * @description This function creates Konva.Line object to represent the\n     *              y-axis and adds it to the given Konva.Group.\n     */\n    _CreateAxis()\n    {\n        var yAxis = new Konva.Line({\n            points: [0, 0, 0, this._chartHeight],\n            stroke: this._lineColor,\n            strokeWidth: this._lineStrokeWidth,\n        });\n        yAxis.rotate(this._rotateBy);\n        this._group.add(yAxis); \n    }\n\n    /**\n     * @summary     This function adds the tick marks and labels to the y-axis.\n     * @description This function iterates through the yScale's range yTick \n     *              times and assigns each of those ticks a numeric value. \n     *              These tick marks and corresponding tick mark values are \n     *              added to the Konva.Group. It should be noted that the \n     *              canvas API does NOT offer a built in function to determine\n     *              the height of text. Thus, we approximate the height of text\n     *              using the width captial 'M'.\n     */\n    _AddTicks()\n    {\n        var yTicks = this._yScale.ticks(10);\n        var helper = new Konva.Group();\n        var tickLength = 6;\n        var numberHeight = this._GetFontSize('M', this._font); \n        yTicks.forEach(d => {\n            var numberWidth = this._GetFontSize(d, this._font);\n            helper.add(new Konva.Line({\n                points: [0, this._yScale(d) - 0.5, -tickLength, this._yScale(d) - 0.5],\n                stroke: this._lineColor,\n                strokeWidth: this._tickStrokeWidth,\n            }));\n            var text = new Konva.Text({\n                text: d,\n                fontSize: this._font.fontSize,\n                fontFamily: this._font.fontFamily,\n                x: -tickLength - numberWidth - 5,\n                y: this._yScale(d) - (numberHeight / 2),\n                fill: this._font.textColor,\n            }); \n\n            if (this._rotateBy === 90) {\n                text.setAttr('x', text.getAttr('x') + (numberWidth / 2) - (numberHeight));\n                text.setAttr('y', text.getAttr('y') + (numberHeight) - numberWidth / 2);\n                text.rotate(-this._rotateBy)\n            }\n            helper.add(text);\n        });\n        this._group.add(helper);\n        helper.rotate(this._rotateBy);\n    }\n}\n\nexport { YAxisDecorator };"]},"metadata":{},"sourceType":"module"}