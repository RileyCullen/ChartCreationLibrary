{"ast":null,"code":"// Cullen, Riley\n// December 23, 2020\n// WaffleChart.js\nimport { AWaffleChart, GenerateIconDataArray } from \"../index\";\nimport * as d3 from 'd3';\nimport Konva from 'konva';\n\nclass WaffleChart extends AWaffleChart {\n  /**\n   * @summary     Concrete class that creates a waffle chart in Konva.js.\n   * @description Concrete class that uses FontAwesome and Konva.js to display \n   *              icons on the canvas.\n   * \n   * @requires FontAwesome\n   * @requires D3.js\n   * @requires Konva.js\n   * @requires AWaffleChart.js\n   *\n   * @see AWaffleChart.js for constructor variable documentation. \n   */\n  constructor({\n    numerator,\n    denominator,\n    group,\n    presetA,\n    presetB,\n    fontSize,\n    isDynamicResize = true,\n    maxIconsPerRow = 10\n  }) {\n    super(numerator, denominator, group, presetA, presetB, fontSize, isDynamicResize, maxIconsPerRow);\n    this._startingX = 0;\n    this._startingY = 0;\n  }\n  /**\n   * @summary     Creates waffle chart in the canvas.\n   * @description Creates a virtual DOM container, binds data to the container,\n   *              then draws the waffle chart on the canvas.\n   */\n\n\n  CreateChart() {\n    document.fonts.ready.then(() => {\n      var virtualCanvas = document.createElement('custom');\n      var custom = d3.select(virtualCanvas);\n\n      this._RemoveWaffleChart(custom);\n\n      if (this._isDynamicResize) {\n        this._fontSize = this._DetermineFontSize();\n      }\n\n      var data = this._GenerateWaffleDataArr();\n\n      this._BindData(custom, data);\n\n      this._Draw(custom, false);\n    });\n  }\n  /**\n   * @summary     Returns the unicode icon and color for both presets to the \n   *              caller.\n   * @description Returns a JSON array with two elements. The first element \n   *              corresponds to presetA and the second corresponds to presetB.\n   *              Within each element, the icon's unicode representation and \n   *              color are returned.\n   */\n\n\n  GetIconData() {\n    return [{\n      'icon': this._presetA.icon,\n      'color': this._presetA.color\n    }, {\n      'icon': this._presetB.icon,\n      'color': this._presetB.color\n    }];\n  }\n  /**\n   * @summmary    Updates icon in waffle chart based on iconNum.\n   * @description Updates presetA if iconNum is equal to 0 and presetB if \n   *              iconNum is equal to 1.\n   * \n   * @param {JSON}   param0   A JSON object that encloses two variables.\n   * @param {int}    iconNum  The icon index that will be updated.\n   * @param {string} iconCode The unicode for a particular icon.\n   */\n\n\n  UpdateIcon({\n    iconNum = -1,\n    iconCode = -1\n  }) {\n    if (iconCode === null || iconCode === '') return;\n    iconCode = String.fromCharCode(parseInt(iconCode, 16));\n\n    if (iconNum === 0) {\n      this._presetA = GenerateIconDataArray({\n        icon: iconCode,\n        color: this._presetA.color,\n        offset: this._presetA.offset,\n        font: this._presetA.font\n      });\n    } else if (iconNum === 1) {\n      this._presetB = GenerateIconDataArray({\n        icon: iconCode,\n        color: this._presetB.color,\n        offset: this._presetB.offset,\n        font: this._presetB.font\n      });\n    }\n  }\n  /**\n   * @summary     Binds data to the parameterized custom DOM element.\n   * @description Uses D3.js to bind the parameterized data array to custom \n   *              DOM elements located in memory.\n   * \n   * @param {D3 selection} custom The DOM container located in memory that we \n   *                              want to bind data to.\n   * @param {JSON Array} data     The data array we want to use to bind our data.\n   */\n\n\n  _BindData(custom, data) {\n    var prevOffset = 0,\n        initialOffset = 0;\n    custom.selectAll('custom.rect').remove();\n    custom.selectAll('custom.rect').data(data).enter().append(\"custom\").attr(\"class\", \"rect\").attr(\"x\", (d, i) => {\n      var tmp = this._startingX + i % this._maxIconsPerRow * prevOffset,\n          multiplier = 0;\n      if (i === 0) initialOffset = d.offset;\n\n      if (initialOffset !== d.offset && i > this._numerator) {\n        if (i > this._numerator) {\n          multiplier = this._numerator;\n        } else {\n          multiplier = i - 1;\n        }\n\n        tmp -= multiplier * (d.offset - initialOffset);\n      }\n\n      prevOffset = d.offset;\n      return tmp;\n    }).attr(\"y\", (d, i) => {\n      let offset = d.offset > d.fontSize ? d.offset : 1.25 * d.fontSize;\n      return this._startingY + Math.floor(i / this._maxIconsPerRow) * offset;\n    }).attr('iconType', d => {\n      return d.iconType;\n    }).attr('fontSize', d => {\n      return d.fontSize;\n    }).attr('font', d => {\n      return d.fontFamily;\n    }).attr(\"width\", 0).attr(\"height\", 0).attr('fillStyle', d => {\n      return d.color;\n    }).attr('fillStyleHidden', d => {\n      return d.color;\n    });\n  }\n  /**\n   * @summary     Draws waffle chart.\n   * @description Uses FontAwesome and Konva.js to draw the icons in a waffle \n   *              chart to the canvas.\n   * \n   * @param {D3 selection} custom The D3 selection with our bound data.\n   * @param {boolean} hidden\n   */\n\n\n  _Draw(custom, hidden) {\n    var elements = custom.selectAll('custom.rect');\n    var tmp = new Konva.Group();\n    elements.each(function (d, i) {\n      var node = d3.select(this);\n      tmp.add(new Konva.Text({\n        fontFamily: node.attr('font'),\n        fontStyle: '900',\n        text: node.attr('iconType'),\n        x: node.attr('x'),\n        y: node.attr('y'),\n        fill: hidden ? node.attr('fillStyleHidden') : node.attr('fillStyle'),\n        fontSize: node.attr('fontSize')\n      }));\n    });\n\n    this._group.add(tmp);\n  }\n\n}\n\nexport { WaffleChart };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/WaffleChart/ConcreteCharts/WaffleChart.js"],"names":["AWaffleChart","GenerateIconDataArray","d3","Konva","WaffleChart","constructor","numerator","denominator","group","presetA","presetB","fontSize","isDynamicResize","maxIconsPerRow","_startingX","_startingY","CreateChart","document","fonts","ready","then","virtualCanvas","createElement","custom","select","_RemoveWaffleChart","_isDynamicResize","_fontSize","_DetermineFontSize","data","_GenerateWaffleDataArr","_BindData","_Draw","GetIconData","_presetA","icon","color","_presetB","UpdateIcon","iconNum","iconCode","String","fromCharCode","parseInt","offset","font","prevOffset","initialOffset","selectAll","remove","enter","append","attr","d","i","tmp","_maxIconsPerRow","multiplier","_numerator","Math","floor","iconType","fontFamily","hidden","elements","Group","each","node","add","Text","fontStyle","text","x","y","fill","_group"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// December 23, 2020\n// WaffleChart.js\n\nimport { AWaffleChart, GenerateIconDataArray } from \"../index\";\nimport * as d3 from 'd3';\nimport Konva from 'konva';\n\nclass WaffleChart extends AWaffleChart\n{\n    /**\n     * @summary     Concrete class that creates a waffle chart in Konva.js.\n     * @description Concrete class that uses FontAwesome and Konva.js to display \n     *              icons on the canvas.\n     * \n     * @requires FontAwesome\n     * @requires D3.js\n     * @requires Konva.js\n     * @requires AWaffleChart.js\n     *\n     * @see AWaffleChart.js for constructor variable documentation. \n     */\n    constructor({numerator, denominator, group, presetA, presetB, fontSize, \n        isDynamicResize = true, maxIconsPerRow = 10,})\n    {\n        super(numerator, denominator, group, presetA, presetB, fontSize, \n            isDynamicResize, maxIconsPerRow);\n        this._startingX = 0;\n        this._startingY = 0;\n    }\n\n    /**\n     * @summary     Creates waffle chart in the canvas.\n     * @description Creates a virtual DOM container, binds data to the container,\n     *              then draws the waffle chart on the canvas.\n     */\n    CreateChart()\n    {\n        document.fonts.ready.then(() => {\n            var virtualCanvas = document.createElement('custom');\n            var custom = d3.select(virtualCanvas);\n    \n            this._RemoveWaffleChart(custom);\n    \n            if (this._isDynamicResize) {\n                this._fontSize = this._DetermineFontSize();\n            }\n            var data = this._GenerateWaffleDataArr();\n    \n            this._BindData(custom, data);\n            this._Draw(custom, false)\n        });\n    }\n\n    /**\n     * @summary     Returns the unicode icon and color for both presets to the \n     *              caller.\n     * @description Returns a JSON array with two elements. The first element \n     *              corresponds to presetA and the second corresponds to presetB.\n     *              Within each element, the icon's unicode representation and \n     *              color are returned.\n     */\n    GetIconData()\n    {\n        return [\n            {\n                'icon': this._presetA.icon,\n                'color': this._presetA.color\n            },\n            {\n                'icon': this._presetB.icon,\n                'color': this._presetB.color\n            }\n        ];\n    }\n\n    /**\n     * @summmary    Updates icon in waffle chart based on iconNum.\n     * @description Updates presetA if iconNum is equal to 0 and presetB if \n     *              iconNum is equal to 1.\n     * \n     * @param {JSON}   param0   A JSON object that encloses two variables.\n     * @param {int}    iconNum  The icon index that will be updated.\n     * @param {string} iconCode The unicode for a particular icon.\n     */\n    UpdateIcon({iconNum = -1, iconCode = -1})\n    {\n        if (iconCode === null || iconCode === '') return;\n\n        iconCode = String.fromCharCode(parseInt(iconCode,16));\n\n        if (iconNum === 0) {\n            this._presetA = GenerateIconDataArray({\n                icon: iconCode,\n                color: this._presetA.color,\n                offset: this._presetA.offset,\n                font: this._presetA.font,\n            });\n        } else if (iconNum === 1) {\n            this._presetB = GenerateIconDataArray({\n                icon: iconCode,\n                color: this._presetB.color,\n                offset: this._presetB.offset,\n                font: this._presetB.font,\n            });\n        } \n    }\n\n    /**\n     * @summary     Binds data to the parameterized custom DOM element.\n     * @description Uses D3.js to bind the parameterized data array to custom \n     *              DOM elements located in memory.\n     * \n     * @param {D3 selection} custom The DOM container located in memory that we \n     *                              want to bind data to.\n     * @param {JSON Array} data     The data array we want to use to bind our data.\n     */\n    _BindData(custom, data)\n    {\n        var prevOffset = 0, initialOffset = 0;\n\n        custom.selectAll('custom.rect')\n            .remove();\n        custom.selectAll('custom.rect')\n            .data(data)\n            .enter()\n            .append(\"custom\")\n            .attr(\"class\", \"rect\")\n            .attr(\"x\", (d, i) => {\n                var tmp = this._startingX + ((i % this._maxIconsPerRow) * prevOffset), \n                    multiplier = 0;\n\n                if (i === 0) initialOffset = d.offset;\n\n                if (initialOffset !== d.offset && i > this._numerator) {\n                    if (i > (this._numerator)) {\n                        multiplier = this._numerator;\n                    } else { \n                        multiplier = (i - 1);\n                    }\n                    tmp -= multiplier * (d.offset - initialOffset);\n                }\n\n                prevOffset = d.offset;\n                return tmp;\n            })\n            .attr(\"y\", (d, i) => {\n                let offset = (d.offset > d.fontSize) ? d.offset : 1.25 * d.fontSize;\n                return this._startingY + (Math.floor(i / this._maxIconsPerRow) * offset)\n            })\n            .attr('iconType', d => { return d.iconType; })\n            .attr('fontSize', d => { return d.fontSize; })\n            .attr('font', d => { return d.fontFamily; })\n            .attr(\"width\", 0)\n            .attr(\"height\", 0)\n            .attr('fillStyle', d => { return d.color; })\n            .attr('fillStyleHidden', d => { return d.color; });\n    }\n\n    /**\n     * @summary     Draws waffle chart.\n     * @description Uses FontAwesome and Konva.js to draw the icons in a waffle \n     *              chart to the canvas.\n     * \n     * @param {D3 selection} custom The D3 selection with our bound data.\n     * @param {boolean} hidden\n     */\n    _Draw(custom, hidden) {\n\n        var elements = custom.selectAll('custom.rect');\n        var tmp = new Konva.Group();\n        elements.each(function(d,i) { \n            var node = d3.select(this);\n            tmp.add(new Konva.Text({\n                fontFamily: node.attr('font'),\n                fontStyle: '900',\n                text: node.attr('iconType'),\n                x: node.attr('x'),\n                y: node.attr('y'),\n                fill: hidden ? node.attr('fillStyleHidden') : node.attr('fillStyle'),\n                fontSize: node.attr('fontSize'),\n            }));        \n        });\n        this._group.add(tmp);\n    }\n}\n\nexport { WaffleChart };"]},"metadata":{},"sourceType":"module"}