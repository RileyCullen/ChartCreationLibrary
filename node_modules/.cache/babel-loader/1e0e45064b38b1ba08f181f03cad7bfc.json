{"ast":null,"code":"// Cullen, Riley\n// ALineChartDecorator.js\n// May 13, 2021\nimport { ALineChart } from '../ALineChart';\n\nclass ALineChartDecorator extends ALineChart {\n  /**\n   * @summary     Abstract class defining the Decorator type for the LineChart\n   *              type.\n   * @description An abstract class that provides a common interface for the \n   *              line chart decorators.\n   * \n   * @param {ALineChart} chart The chart we want to decorate.\n   */\n  constructor(chart) {\n    super({\n      data: chart._data,\n      group: chart._group,\n      chartWidth: chart._chartWidth,\n      chartHeight: chart._chartHeight,\n      lineWidth: chart._lineWidth,\n      pointRadius: chart._pointRadius,\n      pointColor: chart._pointColor,\n      lineColor: chart._lineColor,\n      internalOffsetX: chart._internalOffsetX,\n      internalOffsetY: chart._internalOffsetY\n    });\n    this._chart = chart;\n\n    if (this._constructor === ALineChartDecorator) {\n      throw new TypeError('Abstract class \"ALineChartDecorator\" cannot' + ' be instantiated.');\n    }\n  }\n  /**\n   * @summary     Updates the decorator.\n   * @description Updates the decorators chart, which will then update the \n   *              chart's instance variables.\n   * \n   * @param {ALineChart} chart The chart we want to base our update on.\n   */\n\n\n  UpdateDecorator(chart) {\n    this._data = chart._data;\n    this._chart = chart;\n    this._yScale = chart._yScale;\n    this._xScale = chart._xScale;\n    this._chartHeight = chart._chartHeight;\n    this._chartWidth = chart._chartWidth;\n    this._lineWidth = chart._lineWidth;\n    this._pointRadius = chart._pointRadius;\n    this._pointColor = chart._pointColor;\n    this._lineColor = chart._lineColor;\n    this._internalOffsetX = chart._internalOffsetX;\n    this._internalOffsetY = chart._internalOffsetY;\n  }\n  /**\n   * @summary     Returns the width of a given piece of text in pixels.\n   * @description Uses the canvas measureText function to determine the width\n   *              of a particular piece of text given a specific font. \n   * \n   * @param {String} text      The text we want to measure.\n   * @param {JSON Object} font The font of the text we want to measure. \n   */\n\n\n  _GetFontSize(text, font) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = font.fontSize + 'px ' + font.fontFamily;\n    var helper = ctx.measureText(text).width;\n    canvas.remove();\n    return helper;\n  }\n\n}\n\nexport { ALineChartDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/LineChart/Decorators/ALineChartDecorator.js"],"names":["ALineChart","ALineChartDecorator","constructor","chart","data","_data","group","_group","chartWidth","_chartWidth","chartHeight","_chartHeight","lineWidth","_lineWidth","pointRadius","_pointRadius","pointColor","_pointColor","lineColor","_lineColor","internalOffsetX","_internalOffsetX","internalOffsetY","_internalOffsetY","_chart","_constructor","TypeError","UpdateDecorator","_yScale","_xScale","_GetFontSize","text","font","canvas","document","createElement","ctx","getContext","fontSize","fontFamily","helper","measureText","width","remove"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,UAAT,QAA2B,eAA3B;;AAEA,MAAMC,mBAAN,SAAkCD,UAAlC,CACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAM;AACFC,MAAAA,IAAI,EAAED,KAAK,CAACE,KADV;AAEFC,MAAAA,KAAK,EAAEH,KAAK,CAACI,MAFX;AAGFC,MAAAA,UAAU,EAAEL,KAAK,CAACM,WAHhB;AAIFC,MAAAA,WAAW,EAAEP,KAAK,CAACQ,YAJjB;AAKFC,MAAAA,SAAS,EAAET,KAAK,CAACU,UALf;AAMFC,MAAAA,WAAW,EAAEX,KAAK,CAACY,YANjB;AAOFC,MAAAA,UAAU,EAAEb,KAAK,CAACc,WAPhB;AAQFC,MAAAA,SAAS,EAAEf,KAAK,CAACgB,UARf;AASFC,MAAAA,eAAe,EAAEjB,KAAK,CAACkB,gBATrB;AAUFC,MAAAA,eAAe,EAAEnB,KAAK,CAACoB;AAVrB,KAAN;AAYA,SAAKC,MAAL,GAAcrB,KAAd;;AAEA,QAAI,KAAKsB,YAAL,KAAsBxB,mBAA1B,EAA+C;AAC3C,YAAM,IAAIyB,SAAJ,CAAc,gDAChB,mBADE,CAAN;AAEH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,eAAe,CAACxB,KAAD,EACf;AACI,SAAKE,KAAL,GAAaF,KAAK,CAACE,KAAnB;AACA,SAAKmB,MAAL,GAAcrB,KAAd;AACA,SAAKyB,OAAL,GAAezB,KAAK,CAACyB,OAArB;AACA,SAAKC,OAAL,GAAe1B,KAAK,CAAC0B,OAArB;AAEA,SAAKlB,YAAL,GAAoBR,KAAK,CAACQ,YAA1B;AACA,SAAKF,WAAL,GAAmBN,KAAK,CAACM,WAAzB;AACA,SAAKI,UAAL,GAAkBV,KAAK,CAACU,UAAxB;AACA,SAAKE,YAAL,GAAoBZ,KAAK,CAACY,YAA1B;AACA,SAAKE,WAAL,GAAmBd,KAAK,CAACc,WAAzB;AACA,SAAKE,UAAL,GAAkBhB,KAAK,CAACgB,UAAxB;AACA,SAAKE,gBAAL,GAAwBlB,KAAK,CAACkB,gBAA9B;AACA,SAAKE,gBAAL,GAAwBpB,KAAK,CAACoB,gBAA9B;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACKO,EAAAA,YAAY,CAACC,IAAD,EAAOC,IAAP,EACZ;AACI,QAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACA,QAAIC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;AAEAD,IAAAA,GAAG,CAACJ,IAAJ,GAAWA,IAAI,CAACM,QAAL,GAAgB,KAAhB,GAAwBN,IAAI,CAACO,UAAxC;AACA,QAAIC,MAAM,GAAGJ,GAAG,CAACK,WAAJ,CAAgBV,IAAhB,EAAsBW,KAAnC;AACAT,IAAAA,MAAM,CAACU,MAAP;AAEA,WAAOH,MAAP;AACH;;AAzEN;;AA4EA,SAASvC,mBAAT","sourcesContent":["// Cullen, Riley\n// ALineChartDecorator.js\n// May 13, 2021\n\nimport { ALineChart } from '../ALineChart';\n\nclass ALineChartDecorator extends ALineChart \n{\n    /**\n     * @summary     Abstract class defining the Decorator type for the LineChart\n     *              type.\n     * @description An abstract class that provides a common interface for the \n     *              line chart decorators.\n     * \n     * @param {ALineChart} chart The chart we want to decorate.\n     */\n    constructor(chart)\n    {\n        super({\n            data: chart._data,\n            group: chart._group,\n            chartWidth: chart._chartWidth,\n            chartHeight: chart._chartHeight,\n            lineWidth: chart._lineWidth,\n            pointRadius: chart._pointRadius,\n            pointColor: chart._pointColor,\n            lineColor: chart._lineColor,\n            internalOffsetX: chart._internalOffsetX,\n            internalOffsetY: chart._internalOffsetY,\n        });\n        this._chart = chart;\n        \n        if (this._constructor === ALineChartDecorator) {\n            throw new TypeError('Abstract class \"ALineChartDecorator\" cannot' + \n                ' be instantiated.');\n        }\n    }\n\n    /**\n     * @summary     Updates the decorator.\n     * @description Updates the decorators chart, which will then update the \n     *              chart's instance variables.\n     * \n     * @param {ALineChart} chart The chart we want to base our update on.\n     */\n    UpdateDecorator(chart) \n    { \n        this._data = chart._data;\n        this._chart = chart;\n        this._yScale = chart._yScale;\n        this._xScale = chart._xScale;\n\n        this._chartHeight = chart._chartHeight;\n        this._chartWidth = chart._chartWidth;\n        this._lineWidth = chart._lineWidth;\n        this._pointRadius = chart._pointRadius;\n        this._pointColor = chart._pointColor;\n        this._lineColor = chart._lineColor;\n        this._internalOffsetX = chart._internalOffsetX;\n        this._internalOffsetY = chart._internalOffsetY;\n    }\n\n    /**\n     * @summary     Returns the width of a given piece of text in pixels.\n     * @description Uses the canvas measureText function to determine the width\n     *              of a particular piece of text given a specific font. \n     * \n     * @param {String} text      The text we want to measure.\n     * @param {JSON Object} font The font of the text we want to measure. \n     */\n     _GetFontSize(text, font)\n     {\n         var canvas = document.createElement('canvas');\n         var ctx = canvas.getContext('2d');\n \n         ctx.font = font.fontSize + 'px ' + font.fontFamily;\n         var helper = ctx.measureText(text).width;\n         canvas.remove();\n \n         return helper;\n     }\n}\n\nexport { ALineChartDecorator };"]},"metadata":{},"sourceType":"module"}