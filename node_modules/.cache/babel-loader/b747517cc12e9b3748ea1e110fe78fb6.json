{"ast":null,"code":"import { AIconBarDecorator } from \"./AIconBarDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass IconDataValueDecorator extends AIconBarDecorator {\n  constructor({\n    chart,\n    isPercentage = true,\n    isCategory = false,\n    isMiddle = true,\n    font = {\n      fontSize: 8,\n      fontFamily: 'Times New Roman, Times, serif',\n      fontColor: 'black'\n    },\n    backgroundStroke = 'black',\n    backgroundFill = 'white'\n  }) {\n    super(chart);\n    this._font = Lodash.cloneDeep(font);\n    this._isPercentage = isPercentage;\n    this._isCategory = isCategory;\n    this._isMiddle = isMiddle;\n    this._backgroundStroke = backgroundStroke;\n    this._backgroundFill = backgroundFill;\n  }\n  /**\n  * @summary     This function adds a label to the bars within a bar chart.\n  * @description See summary. This is done by calling _chart's CreateBarChart\n  *              function and by calling _AddLabels.\n  */\n\n\n  CreateChart() {\n    this._chart.CreateChart();\n\n    this._AddIconLabels();\n  }\n\n  GetDecoratorSettings() {\n    return {\n      dataValue: {\n        font: this._font,\n        display: {\n          percentage: this._isPercentage,\n          category: this._isCategory,\n          isMiddle: this._isMiddle\n        },\n        backgroundColor: {\n          stroke: this._backgroundStroke,\n          fill: this._backgroundFill\n        }\n      }\n    };\n  }\n  /**\n   * @summary     Creates the data value labels for the IconBar type.\n   * @description A function that iterates through all of the data in _data \n   *              and creates a label for each value. \n   */\n\n\n  _AddIconLabels() {\n    var helper = new Konva.Group();\n\n    var minCategory = this._FindMinCategory();\n\n    this._data.forEach((d, i) => {\n      var label = d.value;\n      if (this._isPercentage) label += '%';\n      if (this._isCategory) label += ' ' + d.category;\n      /**\n       * Setting up initial values. See CategoryLabelDecorator for description\n       * on what xIcon, xMiddle, and x represent.\n       */\n\n      var labelWidth = this._GetTextWidth(label, this._font),\n          labelHeight = this._GetTextHeight(label, this._font),\n          offset = i === 0 ? 0 : this._padding,\n          iconWidth = this._GetIconWidth(this._icon, this._iconSize),\n          iconHeight = this._GetIconHeight(this._icon, this._iconSize),\n          xIcon = this._xScale(d.category) - this._xScale(minCategory) + offset,\n          xMiddle = xIcon + iconWidth / 2,\n          x = xMiddle - labelWidth / 2,\n          y = 2.5 * iconHeight / 2;\n\n      var text = new Konva.Text({\n        x: x,\n        y: y - 1,\n        text: label,\n        fontSize: this._font.fontSize,\n        fontFamily: this._font.fontFamily,\n        fill: this._font.fontColor\n      });\n      helper.add(this._CreateBackgroundRegion(x, y, labelWidth, labelHeight));\n      helper.add(text);\n    });\n\n    this._group.add(helper);\n  }\n  /**\n   * @summary     Creates a background region for the a data value label.\n   * \n   * @param {double} x      Starting x position for background region.\n   * @param {double} y      Starting y position for background region.\n   * @param {double} width  Width of background region.\n   * @param {double} height Height of background region.\n   * \n   * @returns A Konva.Rect object representing the newly created background \n   *          region.\n   */\n\n\n  _CreateBackgroundRegion(x, y, width, height) {\n    return new Konva.Rect({\n      x: x - 5,\n      y: y - 5,\n      width: width + 10,\n      height: height + 10,\n      fill: this._backgroundFill,\n      stroke: this._backgroundStroke\n    });\n  }\n\n}\n\nexport { IconDataValueDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/IconBarChart/Decorators/IconDataValueDecorator.js"],"names":["AIconBarDecorator","Konva","Lodash","IconDataValueDecorator","constructor","chart","isPercentage","isCategory","isMiddle","font","fontSize","fontFamily","fontColor","backgroundStroke","backgroundFill","_font","cloneDeep","_isPercentage","_isCategory","_isMiddle","_backgroundStroke","_backgroundFill","CreateChart","_chart","_AddIconLabels","GetDecoratorSettings","dataValue","display","percentage","category","backgroundColor","stroke","fill","helper","Group","minCategory","_FindMinCategory","_data","forEach","d","i","label","value","labelWidth","_GetTextWidth","labelHeight","_GetTextHeight","offset","_padding","iconWidth","_GetIconWidth","_icon","_iconSize","iconHeight","_GetIconHeight","xIcon","_xScale","xMiddle","x","y","text","Text","add","_CreateBackgroundRegion","_group","width","height","Rect"],"mappings":"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","sourcesContent":["import { AIconBarDecorator } from \"./AIconBarDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass IconDataValueDecorator extends AIconBarDecorator\n{\n    constructor({\n        chart, \n        isPercentage = true, \n        isCategory = false, \n        isMiddle = true, \n        font = {\n            fontSize: 8, \n            fontFamily: 'Times New Roman, Times, serif', \n            fontColor: 'black'\n        },\n        backgroundStroke = 'black',\n        backgroundFill = 'white',\n    })\n    {\n        super(chart);\n        this._font = Lodash.cloneDeep(font);\n        this._isPercentage = isPercentage;\n        this._isCategory = isCategory;\n        this._isMiddle = isMiddle;\n        this._backgroundStroke = backgroundStroke;\n        this._backgroundFill = backgroundFill;\n    }\n\n     /**\n     * @summary     This function adds a label to the bars within a bar chart.\n     * @description See summary. This is done by calling _chart's CreateBarChart\n     *              function and by calling _AddLabels.\n     */\n      CreateChart()\n      {\n            this._chart.CreateChart();\n            this._AddIconLabels();\n      }\n  \n    GetDecoratorSettings()\n    {\n        return {\n            dataValue: {\n                font: this._font,\n                display: {\n                    percentage: this._isPercentage,\n                    category: this._isCategory,\n                    isMiddle: this._isMiddle,\n                },\n                backgroundColor: {\n                    stroke: this._backgroundStroke,\n                    fill: this._backgroundFill\n                }\n            }\n        }\n    }\n\n      /**\n       * @summary     Creates the data value labels for the IconBar type.\n       * @description A function that iterates through all of the data in _data \n       *              and creates a label for each value. \n       */\n      _AddIconLabels()\n      {\n          var helper = new Konva.Group();\n          var minCategory = this._FindMinCategory();\n          this._data.forEach((d,i) => {\n              var label = d.value;\n  \n              if (this._isPercentage) label += '%';\n              if (this._isCategory) label += ' ' + d.category;\n  \n              /**\n               * Setting up initial values. See CategoryLabelDecorator for description\n               * on what xIcon, xMiddle, and x represent.\n               */\n              var labelWidth = this._GetTextWidth(label, this._font),\n                  labelHeight = this._GetTextHeight(label, this._font),\n                  offset = (i === 0) ? 0 : this._padding,\n                  iconWidth = this._GetIconWidth(this._icon, this._iconSize),\n                  iconHeight = this._GetIconHeight(this._icon, this._iconSize),\n                  xIcon = (this._xScale(d.category) - this._xScale(minCategory) + offset),\n                  xMiddle = xIcon + (iconWidth / 2),\n                  x = xMiddle - (labelWidth / 2),\n                  y = 2.5 * iconHeight / 2;\n  \n              var text = new Konva.Text({\n                  x: x,\n                  y: y - 1,\n                  text: label,\n                  fontSize: this._font.fontSize,\n                  fontFamily: this._font.fontFamily,\n                  fill: this._font.fontColor,\n              }); \n              helper.add(this._CreateBackgroundRegion(x, y, labelWidth, labelHeight));\n              helper.add(text);\n          });\n          this._group.add(helper);\n      }\n  \n      /**\n       * @summary     Creates a background region for the a data value label.\n       * \n       * @param {double} x      Starting x position for background region.\n       * @param {double} y      Starting y position for background region.\n       * @param {double} width  Width of background region.\n       * @param {double} height Height of background region.\n       * \n       * @returns A Konva.Rect object representing the newly created background \n       *          region.\n       */\n      _CreateBackgroundRegion(x, y, width, height)\n      {\n          return new Konva.Rect({\n              x: x - 5,\n              y: y - 5,\n              width: width + 10,\n              height: height + 10,\n              fill: this._backgroundFill,\n              stroke: this._backgroundStroke,\n          });\n      }\n}\n\nexport { IconDataValueDecorator }; "]},"metadata":{},"sourceType":"module"}