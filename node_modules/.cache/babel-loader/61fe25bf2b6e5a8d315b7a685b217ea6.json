{"ast":null,"code":"// Cullen, Riley\n// ABarChart.js\n// October 6, 2020\nimport * as d3 from 'd3';\n\nclass ABarChart {\n  /**\n   * @summary     Provides structure for the BarChart type.\n   * @description This class is an abstract class the defines the structure\n   *              of the BarChart type as well as the methods each BarChart type\n   *              must extend.\n   * \n   * @requires Konva.JS\n   * @requires D3.js\n   * \n   * @param {JSON array}  data     The data that will be used to populate the a\n   *                               given bar chart. The data json array MUST be \n   *                               in the following format:\n   * \n   *                               data[i] = {\n   *                                  'category': 'categoryName',\n   *                                  'value': value,\n   *                                  'color: color, \n   *                               }.\n   * @param {Konva.Group} group    The Konva.Group object that holds the bar \n   *                               chart in the cavnas.\n   * @param {double}      width    The width of the bar chart.\n   * @param {double}      height   The height of the bar chart.\n   * @param {double}      padding  The space between the bars within a bar chart.\n   * @param {int}         rotateBy The amount we will rotate the bar chart by\n   *                               (note that this value can only be 0 or 90\n   *                               and goes in the clockwise direction).\n  */\n  constructor(data, group, width, height, padding, rotateBy) {\n    // Since ES6 does not natively support abstract classes, we must manually\n    // throw a type error when the programmer tries to instantiate this class.\n    // \n    // Essentially, what the following if-block means is that if the programmer\n    // tries to instantiate it directly (i.e. let obj = new ABarChart()) then \n    // throw a type error. A type error will NOT be thrown if the constructor \n    // is called when an object that inherits from ABarChart is instantiated \n    // (i.e. let obj = new BasicBarChart()).\n    if (this.constructor === ABarChart) {\n      throw new TypeError('Abstract class \"ABarChart\" cannot be instantiated');\n    } // ES6 also does not support abstract methods. So, we must explicitly throw\n    // a type error when this function is not implemented in an extending class.\n\n\n    if (this.CreateChart === undefined) {\n      throw new TypeError('Classes extending ABarChart must implement \"CreateBarChart\"');\n    } // Setting up instance variables\n\n\n    this._data = data;\n    this._group = group;\n    this._chartWidth = width;\n    this._chartHeight = height;\n    this._padding = padding;\n    this._rotateBy = rotateBy === 90 || rotateBy === 0 ? rotateBy : 0;\n    this._xScale = d3.scaleBand();\n    this._yScale = d3.scaleLinear();\n    this._stacked = false; // Setting up the x and y scales using D3.\n\n    this._SetUpXRange();\n\n    this._SetUpXDomain();\n\n    this._SetUpYRange();\n\n    this._SetUpYDomain();\n  }\n  /**\n   * @summary     Returns the data bound to a particular BarChart type.\n   * @description Returns the JSON array named _data to the caller. Note that \n   *              this returns a reference to the actual data element and not \n   *              a copy.\n   */\n\n\n  GetData() {\n    return this._data;\n  }\n  /**\n   * @summary     Updates data array.\n   * @description Updates data array as well as the yScale since a given BarChart's\n   *              yScale is determined by the data. Note that the data array \n   *              passed into this function should follow the form:\n   * \n   *              data[i] = {\n   *                  'category': 'categoryName',\n   *                  'value': value,\n   *                  'color: color, \n   *              }. \n   * \n   *              Also note that this function does not make any effort to \n   *              verify that the data array passed in is valid and assumes by\n   *              contract that it is so.            \n   * \n   * @param {JSON Array} data The new data array we want to bind to our \n   *                          BarChart object.\n   */\n\n\n  UpdateData(data) {\n    this._Clean();\n\n    this._data = data; // NOTE: When chart data is updated, it could contain new categories or \n    // output values that are not within the previously defined x and y domains\n    // respectively. To prevent this, we reinitialize the x and y domains to \n    // be consistent with the new data.\n\n    this._SetUpYDomain();\n\n    this._SetUpXDomain();\n  }\n\n  UpdateChartSettings(settings) {\n    this._chartWidth = settings.size.chartWidth;\n    this._chartHeight = settings.size.chartHeight;\n    this._padding = settings.size.padding;\n    this._rotateBy = settings.orientation.landscape === true ? 90 : 0; // For similar reasons as explained in the previous method, when the chart\n    // settings are updated, we must also update the range of the x and y \n    // scales (this is because both ranges depend on the chart height or \n    // width respectively).\n\n    this._Clean();\n\n    this._SetUpYRange();\n\n    this._SetUpXRange();\n  }\n  /**\n   * @summary     Removes the bar chart from the canvas. \n   * @description A wrapper function that calls the Konva.js method destroy(),\n   *              which removes the group from the Konva.Stage.\n   */\n\n\n  Remove() {\n    this._group.destroy();\n  }\n\n  GetChartSettings() {\n    return {\n      orientation: {\n        landscape: this._rotateBy === 90\n      },\n      size: {\n        chartWidth: this._chartWidth,\n        chartHeight: this._chartHeight,\n        padding: this._padding\n      },\n      backgroundColor: {\n        isChecked: false,\n        fill: '#fff'\n      }\n    };\n  }\n  /**\n   * @summary     Removes all child nodes in this group.\n   * @description A wrapper function that calls the Konva.js method \n   *              destroyChildren() which removes all of the child elements \n   *              located with _group.\n   */\n\n\n  _Clean() {\n    this._group.destroyChildren();\n  }\n  /**\n   * @summary     This function sets up the xScale's domain.\n   * @description This function sets up the xScale's domain by mapping \n   *              each of the categories within the data array to a place\n   *              in the domain.\n   */\n\n\n  _SetUpXDomain() {\n    this._xScale.domain(this._data.map(d => {\n      return d.category;\n    }));\n  }\n  /**\n   * @summary     This function sets up the yScale's domain.\n   * @description This function dests up the yScale's domain by assigning \n   *              a lower bound of 0 and an upper bound that corresponds \n   *              to the maximum value within the data array.\n   */\n\n\n  _SetUpYDomain() {\n    // Essentially, keys creates a set (unique entries) of strings where the \n    // entries are the categories. The variable tmp then holds a new JSON \n    // object where the keys are the categories passed by the data.\n    var keys = this.GetGroups(),\n        tmp = this._CreateOffsetHelper(keys); // Using tmp, we now iterate through _data and add all of the entries with\n    // a common category together. This allows us to find the maximum bar value\n    // for both stacked and non-stacked charts.\n\n\n    this._data.forEach(d => {\n      tmp[d.category] += parseInt(d.value);\n    });\n\n    var max = this._FindMax(tmp, keys);\n\n    this._yScale.domain([0, max]);\n  }\n\n  _SetUpXRange() {\n    this._xScale.range([0, this._chartWidth]).padding(this._padding);\n  }\n\n  _SetUpYRange() {\n    this._yScale.range([this._chartHeight, 0]);\n  }\n  /**\n   * @summary     Finds the max value in the data array.\n   * @description Function that iterates through a set of values created from\n   *              _data. This function attempts to find the max value in _data.\n   * \n   * @param {} arr \n   * @param {*} keys \n   */\n\n\n  _FindMax(arr, keys) {\n    const iter = keys.values();\n    var max = 0;\n\n    for (var i = iter.next().value; i != null; i = iter.next().value) {\n      if (arr[i] > max) max = arr[i];\n    }\n\n    return max;\n  }\n\n  _FindMinCategory() {\n    var index = 0;\n\n    for (var i = 1; i < this._data.length; i++) {\n      if (this._data[index].value > this._data[i].value) index = i;\n    }\n\n    return this._data[index].category;\n  }\n  /**\n   * @summary     Returns a set of categories.\n   * @description Creates a new set and maps each of the categories to a value\n   *              within the set.\n   */\n\n\n  GetGroups() {\n    return new Set(this._data.map(d => d.category));\n  }\n  /**\n   * @summary     Creates an array where the keys are all of the categories found \n   *              in the data array.\n   * @description See summary. This allows us to offset the stacked bars in a \n   *              stacked bar chart.\n   * \n   * @param {Set} keys A set of unique categories that allows us to create the \n   *                   offset helper array.\n   */\n\n\n  _CreateOffsetHelper(keys) {\n    var tmp = [];\n    const iter = keys.values();\n\n    for (var i = 0; i < keys.size; i++) {\n      tmp[iter.next().value] = 0;\n    }\n\n    return tmp;\n  }\n\n}\n\nexport { ABarChart };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/BarChart/ConcreteCharts/ABarChart.js"],"names":["d3","ABarChart","constructor","data","group","width","height","padding","rotateBy","TypeError","CreateChart","undefined","_data","_group","_chartWidth","_chartHeight","_padding","_rotateBy","_xScale","scaleBand","_yScale","scaleLinear","_stacked","_SetUpXRange","_SetUpXDomain","_SetUpYRange","_SetUpYDomain","GetData","UpdateData","_Clean","UpdateChartSettings","settings","size","chartWidth","chartHeight","orientation","landscape","Remove","destroy","GetChartSettings","backgroundColor","isChecked","fill","destroyChildren","domain","map","d","category","keys","GetGroups","tmp","_CreateOffsetHelper","forEach","parseInt","value","max","_FindMax","range","arr","iter","values","i","next","_FindMinCategory","index","length","Set"],"mappings":"AAAA;AACA;AACA;AAEA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,SAAN,CACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,OAA7B,EAAsCC,QAAtC,EACX;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,KAAKN,WAAL,KAAqBD,SAAzB,EAAoC;AAChC,YAAM,IAAIQ,SAAJ,CAAc,mDAAd,CAAN;AACH,KAXL,CAaI;AACA;;;AACA,QAAI,KAAKC,WAAL,KAAqBC,SAAzB,EAAoC;AAChC,YAAM,IAAIF,SAAJ,CAAc,6DAAd,CAAN;AACH,KAjBL,CAmBI;;;AACA,SAAKG,KAAL,GAAaT,IAAb;AACA,SAAKU,MAAL,GAAcT,KAAd;AACA,SAAKU,WAAL,GAAmBT,KAAnB;AACA,SAAKU,YAAL,GAAoBT,MAApB;AACA,SAAKU,QAAL,GAAgBT,OAAhB;AACA,SAAKU,SAAL,GAAkBT,QAAQ,KAAK,EAAb,IAAmBA,QAAQ,KAAK,CAAjC,GAAsCA,QAAtC,GAAiD,CAAlE;AACA,SAAKU,OAAL,GAAelB,EAAE,CAACmB,SAAH,EAAf;AACA,SAAKC,OAAL,GAAepB,EAAE,CAACqB,WAAH,EAAf;AACA,SAAKC,QAAL,GAAgB,KAAhB,CA5BJ,CA8BI;;AACA,SAAKC,YAAL;;AACA,SAAKC,aAAL;;AACA,SAAKC,YAAL;;AACA,SAAKC,aAAL;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,GACP;AACI,WAAO,KAAKf,KAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIgB,EAAAA,UAAU,CAACzB,IAAD,EACV;AACI,SAAK0B,MAAL;;AACA,SAAKjB,KAAL,GAAaT,IAAb,CAFJ,CAII;AACA;AACA;AACA;;AACA,SAAKuB,aAAL;;AACA,SAAKF,aAAL;AACH;;AAEDM,EAAAA,mBAAmB,CAACC,QAAD,EACnB;AACI,SAAKjB,WAAL,GAAmBiB,QAAQ,CAACC,IAAT,CAAcC,UAAjC;AACA,SAAKlB,YAAL,GAAoBgB,QAAQ,CAACC,IAAT,CAAcE,WAAlC;AACA,SAAKlB,QAAL,GAAgBe,QAAQ,CAACC,IAAT,CAAczB,OAA9B;AACA,SAAKU,SAAL,GAAkBc,QAAQ,CAACI,WAAT,CAAqBC,SAArB,KAAmC,IAApC,GAA4C,EAA5C,GAAiD,CAAlE,CAJJ,CAMI;AACA;AACA;AACA;;AACA,SAAKP,MAAL;;AACA,SAAKJ,YAAL;;AACA,SAAKF,YAAL;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIc,EAAAA,MAAM,GACN;AACI,SAAKxB,MAAL,CAAYyB,OAAZ;AACH;;AAEDC,EAAAA,gBAAgB,GAChB;AACI,WAAO;AACHJ,MAAAA,WAAW,EAAE;AACTC,QAAAA,SAAS,EAAG,KAAKnB,SAAL,KAAmB;AADtB,OADV;AAIHe,MAAAA,IAAI,EAAE;AACFC,QAAAA,UAAU,EAAE,KAAKnB,WADf;AAEFoB,QAAAA,WAAW,EAAE,KAAKnB,YAFhB;AAGFR,QAAAA,OAAO,EAAE,KAAKS;AAHZ,OAJH;AASHwB,MAAAA,eAAe,EAAE;AACbC,QAAAA,SAAS,EAAE,KADE;AAEbC,QAAAA,IAAI,EAAE;AAFO;AATd,KAAP;AAcH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIb,EAAAA,MAAM,GACN;AACI,SAAKhB,MAAL,CAAY8B,eAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,aAAa,GACb;AACI,SAAKN,OAAL,CAAa0B,MAAb,CAAoB,KAAKhC,KAAL,CAAWiC,GAAX,CAAeC,CAAC,IAAI;AAAE,aAAOA,CAAC,CAACC,QAAT;AAAoB,KAA1C,CAApB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIrB,EAAAA,aAAa,GACb;AACI;AACA;AACA;AACA,QAAIsB,IAAI,GAAG,KAAKC,SAAL,EAAX;AAAA,QAA6BC,GAAG,GAAG,KAAKC,mBAAL,CAAyBH,IAAzB,CAAnC,CAJJ,CAMI;AACA;AACA;;;AACA,SAAKpC,KAAL,CAAWwC,OAAX,CAAmBN,CAAC,IAAI;AACpBI,MAAAA,GAAG,CAACJ,CAAC,CAACC,QAAH,CAAH,IAAmBM,QAAQ,CAACP,CAAC,CAACQ,KAAH,CAA3B;AACH,KAFD;;AAIA,QAAIC,GAAG,GAAG,KAAKC,QAAL,CAAcN,GAAd,EAAmBF,IAAnB,CAAV;;AAEA,SAAK5B,OAAL,CAAawB,MAAb,CAAoB,CAAC,CAAD,EAAIW,GAAJ,CAApB;AACH;;AAEDhC,EAAAA,YAAY,GACZ;AACI,SAAKL,OAAL,CAAauC,KAAb,CAAmB,CAAC,CAAD,EAAI,KAAK3C,WAAT,CAAnB,EACKP,OADL,CACa,KAAKS,QADlB;AAEH;;AAEDS,EAAAA,YAAY,GACZ;AACI,SAAKL,OAAL,CAAaqC,KAAb,CAAmB,CAAC,KAAK1C,YAAN,EAAoB,CAApB,CAAnB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIyC,EAAAA,QAAQ,CAACE,GAAD,EAAMV,IAAN,EACR;AACI,UAAMW,IAAI,GAAGX,IAAI,CAACY,MAAL,EAAb;AACA,QAAIL,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIM,CAAC,GAAGF,IAAI,CAACG,IAAL,GAAYR,KAAzB,EAAgCO,CAAC,IAAI,IAArC,EAA2CA,CAAC,GAAGF,IAAI,CAACG,IAAL,GAAYR,KAA3D,EAAkE;AAC9D,UAAII,GAAG,CAACG,CAAD,CAAH,GAASN,GAAb,EAAkBA,GAAG,GAAGG,GAAG,CAACG,CAAD,CAAT;AACrB;;AACD,WAAON,GAAP;AACH;;AAEDQ,EAAAA,gBAAgB,GAChB;AACI,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjD,KAAL,CAAWqD,MAA/B,EAAuCJ,CAAC,EAAxC,EAA4C;AACxC,UAAI,KAAKjD,KAAL,CAAWoD,KAAX,EAAkBV,KAAlB,GAA0B,KAAK1C,KAAL,CAAWiD,CAAX,EAAcP,KAA5C,EAAmDU,KAAK,GAAGH,CAAR;AACtD;;AACD,WAAO,KAAKjD,KAAL,CAAWoD,KAAX,EAAkBjB,QAAzB;AACH;AAGD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,SAAS,GACT;AACI,WAAO,IAAIiB,GAAJ,CAAQ,KAAKtD,KAAL,CAAWiC,GAAX,CAAeC,CAAC,IAAIA,CAAC,CAACC,QAAtB,CAAR,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACII,EAAAA,mBAAmB,CAACH,IAAD,EACnB;AACI,QAAIE,GAAG,GAAG,EAAV;AACA,UAAMS,IAAI,GAAGX,IAAI,CAACY,MAAL,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAAChB,IAAzB,EAA+B6B,CAAC,EAAhC,EAAoC;AAChCX,MAAAA,GAAG,CAACS,IAAI,CAACG,IAAL,GAAYR,KAAb,CAAH,GAAyB,CAAzB;AACH;;AACD,WAAOJ,GAAP;AACH;;AA1QL;;AA6QA,SAASjD,SAAT","sourcesContent":["// Cullen, Riley\n// ABarChart.js\n// October 6, 2020\n\nimport * as d3 from 'd3';\n\nclass ABarChart \n{\n    /**\n     * @summary     Provides structure for the BarChart type.\n     * @description This class is an abstract class the defines the structure\n     *              of the BarChart type as well as the methods each BarChart type\n     *              must extend.\n     * \n     * @requires Konva.JS\n     * @requires D3.js\n     * \n     * @param {JSON array}  data     The data that will be used to populate the a\n     *                               given bar chart. The data json array MUST be \n     *                               in the following format:\n     * \n     *                               data[i] = {\n     *                                  'category': 'categoryName',\n     *                                  'value': value,\n     *                                  'color: color, \n     *                               }.\n     * @param {Konva.Group} group    The Konva.Group object that holds the bar \n     *                               chart in the cavnas.\n     * @param {double}      width    The width of the bar chart.\n     * @param {double}      height   The height of the bar chart.\n     * @param {double}      padding  The space between the bars within a bar chart.\n     * @param {int}         rotateBy The amount we will rotate the bar chart by\n     *                               (note that this value can only be 0 or 90\n     *                               and goes in the clockwise direction).\n    */\n    constructor(data, group, width, height, padding, rotateBy)\n    {\n        // Since ES6 does not natively support abstract classes, we must manually\n        // throw a type error when the programmer tries to instantiate this class.\n        // \n        // Essentially, what the following if-block means is that if the programmer\n        // tries to instantiate it directly (i.e. let obj = new ABarChart()) then \n        // throw a type error. A type error will NOT be thrown if the constructor \n        // is called when an object that inherits from ABarChart is instantiated \n        // (i.e. let obj = new BasicBarChart()).\n        if (this.constructor === ABarChart) {\n            throw new TypeError('Abstract class \"ABarChart\" cannot be instantiated');\n        }\n\n        // ES6 also does not support abstract methods. So, we must explicitly throw\n        // a type error when this function is not implemented in an extending class.\n        if (this.CreateChart === undefined) {\n            throw new TypeError('Classes extending ABarChart must implement \"CreateBarChart\"');\n        }\n\n        // Setting up instance variables\n        this._data = data;\n        this._group = group;\n        this._chartWidth = width;\n        this._chartHeight = height;\n        this._padding = padding;\n        this._rotateBy = (rotateBy === 90 || rotateBy === 0) ? rotateBy : 0;\n        this._xScale = d3.scaleBand();\n        this._yScale = d3.scaleLinear();\n        this._stacked = false;\n\n        // Setting up the x and y scales using D3.\n        this._SetUpXRange();\n        this._SetUpXDomain();\n        this._SetUpYRange();\n        this._SetUpYDomain();\n    }\n\n    /**\n     * @summary     Returns the data bound to a particular BarChart type.\n     * @description Returns the JSON array named _data to the caller. Note that \n     *              this returns a reference to the actual data element and not \n     *              a copy.\n     */\n    GetData()\n    {\n        return this._data;\n    }\n\n    /**\n     * @summary     Updates data array.\n     * @description Updates data array as well as the yScale since a given BarChart's\n     *              yScale is determined by the data. Note that the data array \n     *              passed into this function should follow the form:\n     * \n     *              data[i] = {\n     *                  'category': 'categoryName',\n     *                  'value': value,\n     *                  'color: color, \n     *              }. \n     * \n     *              Also note that this function does not make any effort to \n     *              verify that the data array passed in is valid and assumes by\n     *              contract that it is so.            \n     * \n     * @param {JSON Array} data The new data array we want to bind to our \n     *                          BarChart object.\n     */\n    UpdateData(data)\n    {\n        this._Clean();\n        this._data = data;\n\n        // NOTE: When chart data is updated, it could contain new categories or \n        // output values that are not within the previously defined x and y domains\n        // respectively. To prevent this, we reinitialize the x and y domains to \n        // be consistent with the new data.\n        this._SetUpYDomain();\n        this._SetUpXDomain();\n    }\n\n    UpdateChartSettings(settings)\n    {\n        this._chartWidth = settings.size.chartWidth;\n        this._chartHeight = settings.size.chartHeight;\n        this._padding = settings.size.padding; \n        this._rotateBy = (settings.orientation.landscape === true) ? 90 : 0;\n\n        // For similar reasons as explained in the previous method, when the chart\n        // settings are updated, we must also update the range of the x and y \n        // scales (this is because both ranges depend on the chart height or \n        // width respectively).\n        this._Clean();\n        this._SetUpYRange();\n        this._SetUpXRange();\n    }\n\n    /**\n     * @summary     Removes the bar chart from the canvas. \n     * @description A wrapper function that calls the Konva.js method destroy(),\n     *              which removes the group from the Konva.Stage.\n     */\n    Remove()\n    {\n        this._group.destroy();\n    }\n\n    GetChartSettings()\n    {\n        return {\n            orientation: {\n                landscape: (this._rotateBy === 90)\n            },\n            size: {\n                chartWidth: this._chartWidth,\n                chartHeight: this._chartHeight,\n                padding: this._padding,\n            },\n            backgroundColor: {\n                isChecked: false,\n                fill: '#fff'\n            }\n        }\n    }\n\n    /**\n     * @summary     Removes all child nodes in this group.\n     * @description A wrapper function that calls the Konva.js method \n     *              destroyChildren() which removes all of the child elements \n     *              located with _group.\n     */\n    _Clean()\n    {\n        this._group.destroyChildren();\n    }\n\n    /**\n     * @summary     This function sets up the xScale's domain.\n     * @description This function sets up the xScale's domain by mapping \n     *              each of the categories within the data array to a place\n     *              in the domain.\n     */\n    _SetUpXDomain()\n    {\n        this._xScale.domain(this._data.map(d => { return d.category; }));\n    }\n\n    /**\n     * @summary     This function sets up the yScale's domain.\n     * @description This function dests up the yScale's domain by assigning \n     *              a lower bound of 0 and an upper bound that corresponds \n     *              to the maximum value within the data array.\n     */\n    _SetUpYDomain()\n    {\n        // Essentially, keys creates a set (unique entries) of strings where the \n        // entries are the categories. The variable tmp then holds a new JSON \n        // object where the keys are the categories passed by the data.\n        var keys = this.GetGroups(), tmp = this._CreateOffsetHelper(keys);\n\n        // Using tmp, we now iterate through _data and add all of the entries with\n        // a common category together. This allows us to find the maximum bar value\n        // for both stacked and non-stacked charts.\n        this._data.forEach(d => {\n            tmp[d.category] += parseInt(d.value);\n        });\n\n        var max = this._FindMax(tmp, keys);\n\n        this._yScale.domain([0, max]);\n    }\n\n    _SetUpXRange()\n    {\n        this._xScale.range([0, this._chartWidth])\n            .padding(this._padding);\n    }\n\n    _SetUpYRange()\n    {\n        this._yScale.range([this._chartHeight, 0]);\n    }\n\n    /**\n     * @summary     Finds the max value in the data array.\n     * @description Function that iterates through a set of values created from\n     *              _data. This function attempts to find the max value in _data.\n     * \n     * @param {} arr \n     * @param {*} keys \n     */\n    _FindMax(arr, keys)\n    {\n        const iter = keys.values();\n        var max = 0;\n        for (var i = iter.next().value; i != null; i = iter.next().value) {\n            if (arr[i] > max) max = arr[i];\n        }\n        return max;\n    }\n\n    _FindMinCategory()\n    {\n        var index = 0;\n        for (var i = 1; i < this._data.length; i++) {\n            if (this._data[index].value > this._data[i].value) index = i;\n        }\n        return this._data[index].category;\n    }\n    \n\n    /**\n     * @summary     Returns a set of categories.\n     * @description Creates a new set and maps each of the categories to a value\n     *              within the set.\n     */\n    GetGroups()\n    {\n        return new Set(this._data.map(d => d.category));\n    }\n\n    /**\n     * @summary     Creates an array where the keys are all of the categories found \n     *              in the data array.\n     * @description See summary. This allows us to offset the stacked bars in a \n     *              stacked bar chart.\n     * \n     * @param {Set} keys A set of unique categories that allows us to create the \n     *                   offset helper array.\n     */\n    _CreateOffsetHelper(keys)\n    {\n        var tmp = [];\n        const iter = keys.values();\n        for (var i = 0; i < keys.size; i++) {\n            tmp[iter.next().value] = 0;\n        }\n        return tmp;\n    }\n}\n\nexport { ABarChart };"]},"metadata":{},"sourceType":"module"}