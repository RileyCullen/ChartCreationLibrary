{"ast":null,"code":"// Cullen, Riley\n// ABarChartDecorator.js\n// October 7, 2020\nimport { ABarChart } from '../ConcreteCharts/ABarChart';\n\nclass ABarChartDecorator extends ABarChart {\n  /**\n   * @summary     This abstract class provides the structure for the \n   *              BarChartDecorator type.\n   * @description This type provides a common structure for all BarChartDecorators\n   *              to inherit from. This class also defines an instance variable\n   *              unique to the decorators called chart.\n   * \n   * @requires ABarChart.js\n   * \n   * @see ABarChart.js\n   * \n   * @param {BarChart} chart This type is a concrete bar chart (or decorator)\n   *                           that we plan on decorating.\n   */\n  constructor(chart) {\n    super(chart._data, chart._group, chart._chartWidth, chart._chartHeight, chart._padding, chart._rotateBy, chart._chartType, chart._stacked);\n    this._chart = chart;\n    this._yScale = chart._yScale; // See ABarChart constructor.\n\n    if (this.constructor === ABarChartDecorator) {\n      throw new TypeError('Abstract class \"ABarChartDecorator\" cannot be instantiated');\n    }\n  }\n  /**\n   * @summary     Updates the decorator with a new data array.\n   * @description Updates the data, chart, and yScale associated with this\n   *              particular decorator.\n   * \n   * @param {BarChart} chart The bar chart we want to base our update on.\n   */\n\n\n  UpdateDecorator(chart) {\n    this._data = chart._data;\n    this._chart = chart;\n    this._yScale = chart._yScale;\n    this._xScale = chart._xScale;\n    this._chartWidth = chart._chartWidth;\n    this._chartHeight = chart._chartHeight;\n    this._padding = chart._padding;\n    this._rotateBy = chart._rotateBy;\n  }\n  /**\n   * @summary     Returns the width of a given piece of text in pixels.\n   * @description Uses the canvas measureText function to determine the width\n   *              of a particular piece of text given a specific font. \n   * \n   * @param {String} text      The text we want to measure.\n   * @param {JSON Object} font The font of the text we want to measure. \n   * \n   * NOTE: This is an old method. _GetTextWidth/_GetTextHeight should be used instead.\n   */\n\n\n  _GetFontSize(text, font) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = font.fontSize + 'px ' + font.fontFamily;\n    var helper = ctx.measureText(text).width;\n    canvas.remove();\n    return helper;\n  }\n  /**\n   * @summary     Finds the canvas width of a given text string.\n   * @description Uses a vanilla canvas created in the DOM to find the width of\n   *              a given piece of text using the context's measureText function.\n   * \n   * @param {string} text The text we want to measure.\n   * @param {JSON} font   The font of the text.\n   * \n   * @returns A float representing the width of the given text element.\n   */\n\n\n  _GetTextWidth(text, font) {\n    // Create the virtual (in memory as opposed to in the DOM) canvas element\n    // and context (think of the canvas as the paper and the ctx as the pencil).\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d'); // Set up the font and measure the text\n\n    ctx.font = font.fontSize + 'px ' + font.fontFamily;\n    var textMetrics = ctx.measureText(text);\n    var width = Math.abs(textMetrics.actualBoundingBoxLeft - textMetrics.actualBoundingBoxRight); // remove the canvas.\n\n    canvas.remove();\n    return width;\n  }\n\n  _GetIconWidth(icon, iconSize) {\n    var font = {\n      fontSize: '900 ' + iconSize,\n      fontFamily: '\"Font Awesome 5 Free\"'\n    };\n    return this._GetTextWidth(icon, font);\n  }\n  /**\n   * @summary     Finds the canvas height of a given text string.\n   * @description Uses a vanilla canvas created in the DOM to find the height of\n   *              a given piece of text using the context's measureText function.\n   * \n   * @param {string} text The text we want to measure.\n   * @param {JSON} font   The font of the text.\n   * \n   * @returns A float representing the height of the given text element.\n   */\n\n\n  _GetTextHeight(text, font) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = font.fontSize + 'px ' + font.fontFamily;\n    var textMetrics = ctx.measureText(text);\n    var height = Math.abs(textMetrics.actualBoundingBoxAscent) - Math.abs(textMetrics.actualBoundingBoxDescent);\n    canvas.remove();\n    return height;\n  }\n\n  _GetIconHeight(icon, iconSize) {\n    var font = {\n      fontSize: '900 ' + iconSize,\n      fontFamily: '\"Font Awesome 5 Free\"'\n    };\n    return this._GetTextHeight(icon, font);\n  }\n\n}\n\nexport { ABarChartDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/BarChart/Decorators/ABarChartDecorator.js"],"names":["ABarChart","ABarChartDecorator","constructor","chart","_data","_group","_chartWidth","_chartHeight","_padding","_rotateBy","_chartType","_stacked","_chart","_yScale","TypeError","UpdateDecorator","_xScale","_GetFontSize","text","font","canvas","document","createElement","ctx","getContext","fontSize","fontFamily","helper","measureText","width","remove","_GetTextWidth","textMetrics","Math","abs","actualBoundingBoxLeft","actualBoundingBoxRight","_GetIconWidth","icon","iconSize","_GetTextHeight","height","actualBoundingBoxAscent","actualBoundingBoxDescent","_GetIconHeight"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,SAAT,QAA0B,6BAA1B;;AAEA,MAAMC,kBAAN,SAAiCD,SAAjC,CACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAK,CAACC,KAAZ,EAAmBD,KAAK,CAACE,MAAzB,EAAiCF,KAAK,CAACG,WAAvC,EAAoDH,KAAK,CAACI,YAA1D,EAAwEJ,KAAK,CAACK,QAA9E,EAAwFL,KAAK,CAACM,SAA9F,EAAyGN,KAAK,CAACO,UAA/G,EAA2HP,KAAK,CAACQ,QAAjI;AACA,SAAKC,MAAL,GAAcT,KAAd;AACA,SAAKU,OAAL,GAAeV,KAAK,CAACU,OAArB,CAHJ,CAKI;;AACA,QAAI,KAAKX,WAAL,KAAqBD,kBAAzB,EAA6C;AACzC,YAAM,IAAIa,SAAJ,CAAc,4DAAd,CAAN;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,eAAe,CAACZ,KAAD,EACf;AACI,SAAKC,KAAL,GAAaD,KAAK,CAACC,KAAnB;AACA,SAAKQ,MAAL,GAAcT,KAAd;AACA,SAAKU,OAAL,GAAeV,KAAK,CAACU,OAArB;AACA,SAAKG,OAAL,GAAeb,KAAK,CAACa,OAArB;AAEA,SAAKV,WAAL,GAAmBH,KAAK,CAACG,WAAzB;AACA,SAAKC,YAAL,GAAoBJ,KAAK,CAACI,YAA1B;AACA,SAAKC,QAAL,GAAgBL,KAAK,CAACK,QAAtB;AACA,SAAKC,SAAL,GAAiBN,KAAK,CAACM,SAAvB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,YAAY,CAACC,IAAD,EAAOC,IAAP,EACZ;AACI,QAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACA,QAAIC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;AAEAD,IAAAA,GAAG,CAACJ,IAAJ,GAAWA,IAAI,CAACM,QAAL,GAAgB,KAAhB,GAAwBN,IAAI,CAACO,UAAxC;AACA,QAAIC,MAAM,GAAGJ,GAAG,CAACK,WAAJ,CAAgBV,IAAhB,EAAsBW,KAAnC;AACAT,IAAAA,MAAM,CAACU,MAAP;AAEA,WAAOH,MAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACII,EAAAA,aAAa,CAACb,IAAD,EAAOC,IAAP,EACb;AACI;AACA;AACA,QAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACA,QAAIC,GAAG,GAAMH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAb,CAJJ,CAMI;;AACAD,IAAAA,GAAG,CAACJ,IAAJ,GAAWA,IAAI,CAACM,QAAL,GAAgB,KAAhB,GAAwBN,IAAI,CAACO,UAAxC;AACA,QAAIM,WAAW,GAAGT,GAAG,CAACK,WAAJ,CAAgBV,IAAhB,CAAlB;AACA,QAAIW,KAAK,GAAGI,IAAI,CAACC,GAAL,CAASF,WAAW,CAACG,qBAAZ,GACfH,WAAW,CAACI,sBADN,CAAZ,CATJ,CAYI;;AACAhB,IAAAA,MAAM,CAACU,MAAP;AAEA,WAAOD,KAAP;AACH;;AAEDQ,EAAAA,aAAa,CAACC,IAAD,EAAOC,QAAP,EACb;AACI,QAAIpB,IAAI,GAAG;AACPM,MAAAA,QAAQ,EAAE,SAASc,QADZ;AAEPb,MAAAA,UAAU,EAAE;AAFL,KAAX;AAIA,WAAO,KAAKK,aAAL,CAAmBO,IAAnB,EAAyBnB,IAAzB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIqB,EAAAA,cAAc,CAACtB,IAAD,EAAOC,IAAP,EACd;AACI,QAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACA,QAAIC,GAAG,GAAMH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAb;AAEAD,IAAAA,GAAG,CAACJ,IAAJ,GAAWA,IAAI,CAACM,QAAL,GAAgB,KAAhB,GAAwBN,IAAI,CAACO,UAAxC;AACA,QAAIM,WAAW,GAAGT,GAAG,CAACK,WAAJ,CAAgBV,IAAhB,CAAlB;AACA,QAAIuB,MAAM,GAAGR,IAAI,CAACC,GAAL,CAASF,WAAW,CAACU,uBAArB,IACTT,IAAI,CAACC,GAAL,CAASF,WAAW,CAACW,wBAArB,CADJ;AAGAvB,IAAAA,MAAM,CAACU,MAAP;AAEA,WAAOW,MAAP;AACH;;AAEDG,EAAAA,cAAc,CAACN,IAAD,EAAOC,QAAP,EACd;AACI,QAAIpB,IAAI,GAAG;AACPM,MAAAA,QAAQ,EAAE,SAASc,QADZ;AAEPb,MAAAA,UAAU,EAAE;AAFL,KAAX;AAIA,WAAO,KAAKc,cAAL,CAAoBF,IAApB,EAA0BnB,IAA1B,CAAP;AACH;;AA3IL;;AA8IA,SAASlB,kBAAT","sourcesContent":["// Cullen, Riley\n// ABarChartDecorator.js\n// October 7, 2020\n\nimport { ABarChart } from '../ConcreteCharts/ABarChart';\n\nclass ABarChartDecorator extends ABarChart\n{\n    /**\n     * @summary     This abstract class provides the structure for the \n     *              BarChartDecorator type.\n     * @description This type provides a common structure for all BarChartDecorators\n     *              to inherit from. This class also defines an instance variable\n     *              unique to the decorators called chart.\n     * \n     * @requires ABarChart.js\n     * \n     * @see ABarChart.js\n     * \n     * @param {BarChart} chart This type is a concrete bar chart (or decorator)\n     *                           that we plan on decorating.\n     */\n    constructor(chart) \n    {\n        super(chart._data, chart._group, chart._chartWidth, chart._chartHeight, chart._padding, chart._rotateBy, chart._chartType, chart._stacked);\n        this._chart = chart;\n        this._yScale = chart._yScale;\n\n        // See ABarChart constructor.\n        if (this.constructor === ABarChartDecorator) {\n            throw new TypeError('Abstract class \"ABarChartDecorator\" cannot be instantiated');\n        }\n    }\n\n    /**\n     * @summary     Updates the decorator with a new data array.\n     * @description Updates the data, chart, and yScale associated with this\n     *              particular decorator.\n     * \n     * @param {BarChart} chart The bar chart we want to base our update on.\n     */\n    UpdateDecorator(chart)\n    {\n        this._data = chart._data;\n        this._chart = chart;\n        this._yScale = chart._yScale;\n        this._xScale = chart._xScale;\n\n        this._chartWidth = chart._chartWidth;\n        this._chartHeight = chart._chartHeight;\n        this._padding = chart._padding;\n        this._rotateBy = chart._rotateBy;\n    }\n\n    /**\n     * @summary     Returns the width of a given piece of text in pixels.\n     * @description Uses the canvas measureText function to determine the width\n     *              of a particular piece of text given a specific font. \n     * \n     * @param {String} text      The text we want to measure.\n     * @param {JSON Object} font The font of the text we want to measure. \n     * \n     * NOTE: This is an old method. _GetTextWidth/_GetTextHeight should be used instead.\n     */\n    _GetFontSize(text, font)\n    {\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n\n        ctx.font = font.fontSize + 'px ' + font.fontFamily;\n        var helper = ctx.measureText(text).width;\n        canvas.remove();\n\n        return helper;\n    }\n\n    /**\n     * @summary     Finds the canvas width of a given text string.\n     * @description Uses a vanilla canvas created in the DOM to find the width of\n     *              a given piece of text using the context's measureText function.\n     * \n     * @param {string} text The text we want to measure.\n     * @param {JSON} font   The font of the text.\n     * \n     * @returns A float representing the width of the given text element.\n     */\n    _GetTextWidth(text, font)\n    {\n        // Create the virtual (in memory as opposed to in the DOM) canvas element\n        // and context (think of the canvas as the paper and the ctx as the pencil).\n        var canvas = document.createElement('canvas');\n        var ctx    = canvas.getContext('2d');\n\n        // Set up the font and measure the text\n        ctx.font = font.fontSize + 'px ' + font.fontFamily;\n        var textMetrics = ctx.measureText(text);\n        var width = Math.abs(textMetrics.actualBoundingBoxLeft \n            - textMetrics.actualBoundingBoxRight);\n\n        // remove the canvas.\n        canvas.remove();\n\n        return width; \n    }\n\n    _GetIconWidth(icon, iconSize)\n    {\n        var font = {\n            fontSize: '900 ' + iconSize,\n            fontFamily: '\"Font Awesome 5 Free\"',\n        }\n        return this._GetTextWidth(icon, font);\n    }\n\n    /**\n     * @summary     Finds the canvas height of a given text string.\n     * @description Uses a vanilla canvas created in the DOM to find the height of\n     *              a given piece of text using the context's measureText function.\n     * \n     * @param {string} text The text we want to measure.\n     * @param {JSON} font   The font of the text.\n     * \n     * @returns A float representing the height of the given text element.\n     */\n    _GetTextHeight(text, font)\n    {\n        var canvas = document.createElement('canvas');\n        var ctx    = canvas.getContext('2d');\n\n        ctx.font = font.fontSize + 'px ' + font.fontFamily;\n        var textMetrics = ctx.measureText(text);\n        var height = Math.abs(textMetrics.actualBoundingBoxAscent) - \n            Math.abs(textMetrics.actualBoundingBoxDescent);\n        \n        canvas.remove();\n\n        return height;\n    }\n\n    _GetIconHeight(icon, iconSize)\n    {\n        var font = {\n            fontSize: '900 ' + iconSize,\n            fontFamily: '\"Font Awesome 5 Free\"',\n        }\n        return this._GetTextHeight(icon, font);\n    }\n}\n\nexport { ABarChartDecorator };"]},"metadata":{},"sourceType":"module"}