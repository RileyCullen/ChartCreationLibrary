{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/WaffleEditor.js\";\nimport React from 'react';\nimport { Menu, Editor, LabeledColorPicker, LabeledTextField, FontSelector, LabeledCheckbox } from './Components/index';\nimport '../../../css/React/Editors/ChartEditor.css';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass WaffleEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this._data = {\n      numerator: props.chartData === 0 ? 0 : props.chartData.numerator,\n      denominator: props.chartData === 0 ? 0 : props.chartData.denominator\n    };\n    this._defaultFont = {\n      fontFamily: 'Times New Roman, Times, serif',\n      fontSize: 10,\n      textColor: '#000'\n    };\n    this._settingsManager = new SettingsManager({\n      cSettings: this.props.cSettings,\n      dSettings: this.props.dSettings,\n      setChartSettings: settings => {\n        this.props.setChartSettings(settings);\n      },\n      setDecoratorSettings: settings => {\n        this.props.setDecoratorSettings(settings);\n      }\n    });\n    this._defaultSettings = {\n      statistic: {\n        font: this._defaultFont,\n        display: {\n          middleText: '',\n          lockToChart: true\n        }\n      }\n    };\n  }\n\n  render() {\n    let rows = 1,\n        cols = 10;\n    let chartDataContent = [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Numerator:\",\n        index: 0,\n        initialValue: this._data.numerator,\n        rows: rows,\n        cols: cols,\n        onChange: (d, i) => {\n          this._SetChartData(i, d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Denominator:\",\n        index: 1,\n        initialValue: this._data.denominator,\n        rows: rows,\n        cols: cols,\n        onChange: (d, i) => {\n          this._SetChartData(i, d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this)];\n    let content = {\n      chartSettings: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Chart Data\",\n        isOpen: true,\n        content: chartDataContent,\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'chart-data', false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Icon Settings\",\n        isOpen: false,\n        content: this._GetIconContent(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'icon-settings', false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Automatic Resizing\",\n        isOpen: false,\n        content: this._GetResizeContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: this.props.cSettings.dynamicResize.isChecked,\n          checkboxHandler: d => {\n            this._SetChartSettings('dynamicResize', 'isChecked', d);\n          }\n        }\n      }, 'automatic-resizing', false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)],\n      designOptions: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Data Label\",\n        isOpen: false,\n        content: this._GetDataLabelsContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.statistic === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'statistic', {\n              statistic: this._defaultSettings.statistic\n            });\n          }\n        }\n      }, 'data-labels', false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        content: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n  /**\n   * @summary     Updates _data.\n   * @description Updates _data and passes a copy of _data to InfographicEditor.\n   * \n   * @param {int} id  The id of the textfield. \n   * @param {*} value The value of the textfield.\n   */\n\n\n  _SetChartData(id, value) {\n    if (id === 0) {\n      this._data.numerator = value;\n    } else {\n      this._data.denominator = value;\n    } // copy data\n\n\n    var tmp = {\n      numerator: this._data.numerator,\n      denominator: this._data.denominator\n    };\n    this.props.setChartData(tmp);\n  }\n\n  _SetChartSettings(category, key, value) {\n    this._settingsManager.SetChartSettings(category, key, value);\n  }\n\n  _UpdateDecoratorSettings(decorator, category, key, value) {\n    this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n  }\n\n  _CheckboxHandler(checkboxValue, key, decoratorSettings) {\n    this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n  }\n\n  _GetIconContent() {\n    let iconSettings = this.props.cSettings.icon;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n        label: \"Primary Color: \",\n        color: iconSettings.aColor,\n        onChange: value => {\n          this._SetChartSettings('icon', 'aColor', value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n        label: \"Secondary Color: \",\n        color: iconSettings.bColor,\n        onChange: value => {\n          this._SetChartSettings('icon', 'bColor', value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Icon Size: \",\n        index: \"max\",\n        initialValue: iconSettings.size,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('icon', 'size', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Padding: \",\n        index: \"max\",\n        initialValue: iconSettings.padding,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('icon', 'padding', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Max icons per row: \",\n        index: \"max\",\n        initialValue: iconSettings.maxIconsPerRow,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('icon', 'maxIconsPerRow', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetResizeContent() {\n    let resize = this.props.cSettings.dynamicResize;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Width\",\n        index: \"c-width\",\n        initialValue: resize.width,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('dynamicResize', 'width', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Height\",\n        index: \"c-height\",\n        initialValue: resize.height,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('dynamicResize', 'height', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetDataLabelsContent() {\n    let statistic = this.props.dSettings.statistic === undefined ? this._defaultSettings.statistic : this.props.dSettings.statistic;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Display Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Text:\",\n          index: 'text',\n          initialValue: statistic.display.middleText,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('statistic', 'display', 'middleText', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledCheckbox, {\n          label: \"Lock to Chart\",\n          initialValue: statistic.display.lockToChart,\n          onClick: d => {\n            this._UpdateDecoratorSettings('statistic', 'display', 'lockToChart', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: statistic.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('statistic', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('statistic', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('statistic', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)];\n  }\n\n}\n\nexport { WaffleEditor };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/WaffleEditor.js"],"names":["React","Menu","Editor","LabeledColorPicker","LabeledTextField","FontSelector","LabeledCheckbox","SettingsManager","WaffleEditor","Component","constructor","props","_data","numerator","chartData","denominator","_defaultFont","fontFamily","fontSize","textColor","_settingsManager","cSettings","dSettings","setChartSettings","settings","setDecoratorSettings","_defaultSettings","statistic","font","display","middleText","lockToChart","render","rows","cols","chartDataContent","d","i","_SetChartData","content","chartSettings","displayCheckbox","_GetIconContent","_GetResizeContent","isChecked","dynamicResize","checkboxHandler","_SetChartSettings","designOptions","_GetDataLabelsContent","undefined","_CheckboxHandler","id","value","tmp","setChartData","category","key","SetChartSettings","_UpdateDecoratorSettings","decorator","UpdateDecoratorSettings","checkboxValue","decoratorSettings","DecoratorToggle","iconSettings","icon","aColor","bColor","size","padding","maxIconsPerRow","resize","width","height","parseFloat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Menu, Editor, LabeledColorPicker, LabeledTextField, FontSelector, LabeledCheckbox } from './Components/index';\n\nimport '../../../css/React/Editors/ChartEditor.css';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\n\nclass WaffleEditor extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this._data = {\n            numerator: (props.chartData === 0) ? 0 : props.chartData.numerator,\n            denominator: (props.chartData === 0) ? 0 : props.chartData.denominator,\n        };\n\n        this._defaultFont = {\n            fontFamily: 'Times New Roman, Times, serif',\n            fontSize: 10,\n            textColor: '#000'\n        };\n\n        this._settingsManager = new SettingsManager({\n            cSettings: this.props.cSettings,\n            dSettings: this.props.dSettings,\n            setChartSettings: (settings) => { this.props.setChartSettings(settings); },\n            setDecoratorSettings: (settings) => { this.props.setDecoratorSettings(settings); }\n        });\n\n        this._defaultSettings = {\n            statistic: {\n                font: this._defaultFont,\n                display: {\n                    middleText: '',\n                    lockToChart: true\n                }\n            }\n        }\n    }\n\n    render()\n    {\n        let rows = 1, cols = 10;\n\n        let chartDataContent = [\n                <div className='center'>\n                    <LabeledTextField \n                        label='Numerator:'\n                        index={0}\n                        initialValue={this._data.numerator}\n                        rows={rows}\n                        cols={cols}\n                        onChange={(d, i) => { this._SetChartData(i, d); }}\n                    />\n                    <LabeledTextField \n                        label='Denominator:'\n                        index={1}\n                        initialValue={this._data.denominator}\n                        rows={rows}\n                        cols={cols}\n                        onChange={(d, i) => { this._SetChartData(i, d); }}\n                    />\n                </div>\n        ]\n\n        let content = {\n            chartSettings: [\n                <Menu \n                    key='chart-data'\n                    name='Chart Data'\n                    isOpen={true}\n                    content={chartDataContent}\n                    checkbox={{\n                        displayCheckbox: false\n                    }}\n                />,\n                <Menu \n                    key='icon-settings'\n                    name='Icon Settings'\n                    isOpen={false}\n                    content={this._GetIconContent()}\n                    checkbox={{\n                        displayCheckbox: false\n                    }} />,\n                <Menu \n                    key='automatic-resizing'\n                    name='Automatic Resizing'\n                    isOpen={false}\n                    content={this._GetResizeContent()} \n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: this.props.cSettings.dynamicResize.isChecked,\n                        checkboxHandler: (d) => { this._SetChartSettings('dynamicResize', 'isChecked', d); }\n                    }}/>\n            ],\n            designOptions: [\n                <Menu \n                    key='data-labels'\n                    name='Data Label'\n                    isOpen={false}\n                    content={this._GetDataLabelsContent()} \n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.statistic === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'statistic', { statistic: this._defaultSettings.statistic });\n                        }\n                    }}/>\n            ]\n        }\n\n        return (\n            <div>\n                <Editor content={content}/>\n            </div>\n        );\n    }\n\n    /**\n     * @summary     Updates _data.\n     * @description Updates _data and passes a copy of _data to InfographicEditor.\n     * \n     * @param {int} id  The id of the textfield. \n     * @param {*} value The value of the textfield.\n     */\n    _SetChartData(id, value)\n    {\n        if (id === 0) {\n            this._data.numerator = value;\n        } else {\n            this._data.denominator = value;\n        }\n\n        // copy data\n        var tmp = {\n            numerator: this._data.numerator,\n            denominator: this._data.denominator,\n        };\n        this.props.setChartData(tmp);\n    }\n\n    _SetChartSettings(category, key, value)\n    {\n        this._settingsManager.SetChartSettings(category, key, value);\n    }\n\n    _UpdateDecoratorSettings(decorator, category, key, value)\n    {\n        this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n    }\n\n    _CheckboxHandler(checkboxValue, key, decoratorSettings)\n    {\n        this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n    }\n\n    _GetIconContent()\n    {\n        let iconSettings = this.props.cSettings.icon;\n        return [\n            <div className='center'>\n                <LabeledColorPicker \n                    label='Primary Color: '\n                    color={iconSettings.aColor}\n                    onChange={(value) => { this._SetChartSettings('icon', 'aColor', value); }}\n                />\n                <LabeledColorPicker \n                    label='Secondary Color: '\n                    color={iconSettings.bColor}\n                    onChange={(value) => { this._SetChartSettings('icon', 'bColor', value); }}\n                />\n                <LabeledTextField \n                    label='Icon Size: '\n                    index='max'\n                    initialValue={iconSettings.size}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('icon', 'size', d)}}\n                />\n                <LabeledTextField \n                    label='Padding: '\n                    index='max'\n                    initialValue={iconSettings.padding}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('icon', 'padding', d)}}\n                />\n                <LabeledTextField \n                    label='Max icons per row: '\n                    index='max'\n                    initialValue={iconSettings.maxIconsPerRow}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('icon', 'maxIconsPerRow', d)}}\n                />\n            </div>\n        ]\n    }\n\n    _GetResizeContent()\n    {\n        let resize = this.props.cSettings.dynamicResize;\n        return [\n            <div className='center'>\n                <LabeledTextField \n                    label='Width'\n                    index='c-width'\n                    initialValue={resize.width}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('dynamicResize', 'width', d); }} \n                />\n                <LabeledTextField \n                    label='Height'\n                    index='c-height'\n                    initialValue={resize.height}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('dynamicResize', 'height', d); }} \n                />\n            </div>\n        ];\n    }\n\n    _GetDataLabelsContent()\n    {\n        let statistic = (this.props.dSettings.statistic === undefined) ? \n            this._defaultSettings.statistic : this.props.dSettings.statistic;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Display Settings:</h5>\n                    <LabeledTextField \n                        label='Text:'\n                        index={'text'}\n                        initialValue={statistic.display.middleText}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('statistic', 'display', 'middleText', d);\n                        }} \n                    />\n                    <LabeledCheckbox \n                        label='Lock to Chart'\n                        initialValue={statistic.display.lockToChart}\n                        onClick={(d) => { \n                            this._UpdateDecoratorSettings('statistic', 'display', 'lockToChart', d);\n                        }}\n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        initialFont={statistic.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('statistic', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('statistic', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('statistic', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n}\n\nexport { WaffleEditor };"]},"metadata":{},"sourceType":"module"}