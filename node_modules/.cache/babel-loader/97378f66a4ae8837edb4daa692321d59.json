{"ast":null,"code":"// Cullen, Riley\n// FirstStatisticDecorator.js\n// December 30, 2020\nimport { APieChartDecorator } from \"./APieChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass FirstStatisticDecorator extends APieChartDecorator {\n  /**\n   * @summary     Displays the first statistic in _data to the user.\n   * @description Prints the statistic in _data at index 0 to the canvas.\n   * \n   * @requires Konva.js\n   * @requires APieChartDecorator.js\n   * \n   * @see APieChartDecorator.js\n   * \n   * @param {APieChart} chart   The chart we want to decorate.\n   * @param {string} font       The font of the statistic.\n   * @param {double} x          The x position of the statistic.\n   * @param {double} y          The y position of the statistic.\n   * @param {Konva.Group} group The group we want to add the statistic to.\n   */\n  constructor({\n    chart,\n    font = {\n      'fontSize': 8,\n      'fontFamily': 'Times New Roman, Times, serif',\n      'fontStyle': 400,\n      'textColor': 'black'\n    },\n    x = 0,\n    y = 0,\n    group = 0\n  }) {\n    super(chart);\n    this._top = new Konva.Group();\n    this._font = Lodash.cloneDeep(font);\n    this._x = x;\n    this._y = y;\n    this._helper = group;\n  }\n  /**\n   * @summary     Creates a pie chart and displays the first statistic in _data.\n   * @description Calls _chart's CreateChart method and then adds the statistic\n   *              to the already drawn pie chart.\n   */\n\n\n  CreateChart() {\n    this._CleanTop();\n\n    this._chart.CreateChart();\n\n    this._AddMajorStatistic();\n  }\n\n  GetDecoratorSettings() {\n    return {\n      statistic: {\n        font: this._font,\n        position: {\n          x: this._x,\n          y: this._y\n        }\n      }\n    };\n  }\n  /**\n   * @summary     Cleans the group named _top.\n   * @description Removes all of the elements contained with the Konva.Group\n   *              named _top.\n   */\n\n\n  _CleanTop() {\n    this._top.destroyChildren();\n  }\n  /**\n   * @summary     Adds the first statistic in _data to the canvas.\n   * @description Create a dynamically placed Konva.Text element whose text value\n   *              is the first numerical value in _data. This text element is then\n   *              appended to _top.\n   */\n\n\n  _AddMajorStatistic() {\n    var text = this._data[0].value + '%';\n\n    this._top.add(new Konva.Text({\n      x: this._x - this._GetFontWidth(text) / 2,\n      y: this._y - this._GetFontWidth('M') / 2,\n      text: text,\n      fontSize: this._font.fontSize,\n      fontFamily: this._font.fontFamily,\n      fill: this._font.textColor\n    }));\n\n    this._top.moveToTop();\n\n    if (this._helper === 0) this._group.add(this._top);else this._helper.add(this._top);\n  }\n  /**\n   * @summary     Gets the size of a given piece of text.\n   * @description Creates a virtual canvas element that is used to calculate \n   *              the width of the parameterized piece of text. NOTE that to \n   *              determine the height of a particular piece of text, passing 'M'\n   *              gives a close approximation.\n   * \n   * @param {string} text The text we want to determine the width of.\n   */\n\n\n  _GetFontWidth(text) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = this._font.fontStyle + ' ' + this._font.fontSize + 'px ' + this._font.fontFamily;\n    var helper = ctx.measureText(text).width;\n    canvas.remove();\n    return helper;\n  }\n\n}\n\nexport { FirstStatisticDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/PieChart/Decorators/FirstStatisticDecorator.js"],"names":["APieChartDecorator","Konva","Lodash","FirstStatisticDecorator","constructor","chart","font","x","y","group","_top","Group","_font","cloneDeep","_x","_y","_helper","CreateChart","_CleanTop","_chart","_AddMajorStatistic","GetDecoratorSettings","statistic","position","destroyChildren","text","_data","value","add","Text","_GetFontWidth","fontSize","fontFamily","fill","textColor","moveToTop","_group","canvas","document","createElement","ctx","getContext","fontStyle","helper","measureText","width","remove"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,kBAAT,QAAmC,sBAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,uBAAN,SAAsCH,kBAAtC,CACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACII,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,IAAI,GAAI;AAAC,kBAAa,CAAd;AAAiB,oBAAe,+BAAhC;AAAiE,mBAAc,GAA/E;AACxB,mBAAc;AADU,KAAhB;AACgBC,IAAAA,CAAC,GAAG,CADpB;AACuBC,IAAAA,CAAC,GAAG,CAD3B;AAC8BC,IAAAA,KAAK,GAAG;AADtC,GAAD,EAEX;AACI,UAAMJ,KAAN;AACA,SAAKK,IAAL,GAAY,IAAIT,KAAK,CAACU,KAAV,EAAZ;AACA,SAAKC,KAAL,GAAaV,MAAM,CAACW,SAAP,CAAiBP,IAAjB,CAAb;AACA,SAAKQ,EAAL,GAAUP,CAAV;AACA,SAAKQ,EAAL,GAAUP,CAAV;AACA,SAAKQ,OAAL,GAAeP,KAAf;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIQ,EAAAA,WAAW,GACX;AACI,SAAKC,SAAL;;AACA,SAAKC,MAAL,CAAYF,WAAZ;;AACA,SAAKG,kBAAL;AACH;;AAGDC,EAAAA,oBAAoB,GACpB;AACI,WAAO;AACHC,MAAAA,SAAS,EAAE;AACPhB,QAAAA,IAAI,EAAE,KAAKM,KADJ;AAEPW,QAAAA,QAAQ,EAAE;AACNhB,UAAAA,CAAC,EAAE,KAAKO,EADF;AAENN,UAAAA,CAAC,EAAE,KAAKO;AAFF;AAFH;AADR,KAAP;AASH;AAED;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,SAAS,GACT;AACI,SAAKR,IAAL,CAAUc,eAAV;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIJ,EAAAA,kBAAkB,GAClB;AACI,QAAIK,IAAI,GAAG,KAAKC,KAAL,CAAW,CAAX,EAAcC,KAAd,GAAsB,GAAjC;;AACA,SAAKjB,IAAL,CAAUkB,GAAV,CAAc,IAAI3B,KAAK,CAAC4B,IAAV,CAAe;AACzBtB,MAAAA,CAAC,EAAE,KAAKO,EAAL,GAAU,KAAKgB,aAAL,CAAmBL,IAAnB,IAA2B,CADf;AAEzBjB,MAAAA,CAAC,EAAE,KAAKO,EAAL,GAAU,KAAKe,aAAL,CAAmB,GAAnB,IAA0B,CAFd;AAGzBL,MAAAA,IAAI,EAAEA,IAHmB;AAIzBM,MAAAA,QAAQ,EAAE,KAAKnB,KAAL,CAAWmB,QAJI;AAKzBC,MAAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWoB,UALE;AAMzBC,MAAAA,IAAI,EAAE,KAAKrB,KAAL,CAAWsB;AANQ,KAAf,CAAd;;AAQA,SAAKxB,IAAL,CAAUyB,SAAV;;AACA,QAAI,KAAKnB,OAAL,KAAiB,CAArB,EAAwB,KAAKoB,MAAL,CAAYR,GAAZ,CAAgB,KAAKlB,IAArB,EAAxB,KACK,KAAKM,OAAL,CAAaY,GAAb,CAAiB,KAAKlB,IAAtB;AACR;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIoB,EAAAA,aAAa,CAACL,IAAD,EACb;AACI,QAAIY,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACA,QAAIC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;AAEAD,IAAAA,GAAG,CAAClC,IAAJ,GAAW,KAAKM,KAAL,CAAW8B,SAAX,GAAuB,GAAvB,GAA6B,KAAK9B,KAAL,CAAWmB,QAAxC,GAAmD,KAAnD,GAA2D,KAAKnB,KAAL,CAAWoB,UAAjF;AACA,QAAIW,MAAM,GAAGH,GAAG,CAACI,WAAJ,CAAgBnB,IAAhB,EAAsBoB,KAAnC;AACAR,IAAAA,MAAM,CAACS,MAAP;AAEA,WAAOH,MAAP;AACH;;AAxGL;;AA2GA,SAASxC,uBAAT","sourcesContent":["// Cullen, Riley\n// FirstStatisticDecorator.js\n// December 30, 2020\n\nimport { APieChartDecorator } from \"./APieChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass FirstStatisticDecorator extends APieChartDecorator \n{\n    /**\n     * @summary     Displays the first statistic in _data to the user.\n     * @description Prints the statistic in _data at index 0 to the canvas.\n     * \n     * @requires Konva.js\n     * @requires APieChartDecorator.js\n     * \n     * @see APieChartDecorator.js\n     * \n     * @param {APieChart} chart   The chart we want to decorate.\n     * @param {string} font       The font of the statistic.\n     * @param {double} x          The x position of the statistic.\n     * @param {double} y          The y position of the statistic.\n     * @param {Konva.Group} group The group we want to add the statistic to.\n     */\n    constructor({chart, font =  {'fontSize' : 8, 'fontFamily' : 'Times New Roman, Times, serif', 'fontStyle' : 400,\n        'textColor' : 'black'}, x = 0, y = 0, group = 0})\n    {\n        super(chart);\n        this._top = new Konva.Group();\n        this._font = Lodash.cloneDeep(font);\n        this._x = x;\n        this._y = y;\n        this._helper = group;\n    }\n\n    /**\n     * @summary     Creates a pie chart and displays the first statistic in _data.\n     * @description Calls _chart's CreateChart method and then adds the statistic\n     *              to the already drawn pie chart.\n     */\n    CreateChart()\n    {\n        this._CleanTop();\n        this._chart.CreateChart();\n        this._AddMajorStatistic();\n    }\n\n\n    GetDecoratorSettings()\n    {\n        return {\n            statistic: { \n                font: this._font,\n                position: {\n                    x: this._x,\n                    y: this._y\n                }\n            }\n        };\n    }\n\n    /**\n     * @summary     Cleans the group named _top.\n     * @description Removes all of the elements contained with the Konva.Group\n     *              named _top.\n     */\n    _CleanTop()\n    {\n        this._top.destroyChildren();\n    }\n\n    /**\n     * @summary     Adds the first statistic in _data to the canvas.\n     * @description Create a dynamically placed Konva.Text element whose text value\n     *              is the first numerical value in _data. This text element is then\n     *              appended to _top.\n     */\n    _AddMajorStatistic()\n    {\n        var text = this._data[0].value + '%';\n        this._top.add(new Konva.Text({\n            x: this._x -(this._GetFontWidth(text) / 2),\n            y: this._y -(this._GetFontWidth('M') / 2),\n            text: text,\n            fontSize: this._font.fontSize,\n            fontFamily: this._font.fontFamily,\n            fill: this._font.textColor,\n        }));\n        this._top.moveToTop();\n        if (this._helper === 0) this._group.add(this._top);\n        else this._helper.add(this._top);\n    }\n\n    /**\n     * @summary     Gets the size of a given piece of text.\n     * @description Creates a virtual canvas element that is used to calculate \n     *              the width of the parameterized piece of text. NOTE that to \n     *              determine the height of a particular piece of text, passing 'M'\n     *              gives a close approximation.\n     * \n     * @param {string} text The text we want to determine the width of.\n     */\n    _GetFontWidth(text)\n    {\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n\n        ctx.font = this._font.fontStyle + ' ' + this._font.fontSize + 'px ' + this._font.fontFamily;\n        var helper = ctx.measureText(text).width;\n        canvas.remove();\n\n        return helper;\n    }\n}\n\nexport { FirstStatisticDecorator };"]},"metadata":{},"sourceType":"module"}