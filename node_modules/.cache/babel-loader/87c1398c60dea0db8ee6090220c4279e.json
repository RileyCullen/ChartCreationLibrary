{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/CanvasContainer.js\";\n// Cullen, Riley\n// CanvasContainer.js\n// June 28, 2021\nimport React from 'react';\nimport { HIVTemplateOne, ObesityTemplateOne, ViolenceTemplateOne, DiabetesTemplateOne } from '../../js/InfographicTemplates/index';\nimport '../../css/React/CanvasContainer.css';\n/**\n * Container class that holds the canvas (and related rendering functions) used \n * to draw the infographics to the screen.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CanvasContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this._infogObj = 0;\n    this._previousInfographic = '';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"canvas-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  }\n  /**\n   * @summary     Draws infographic to canvas using KonvaJS.\n   * @description This function is responsible for drawing the selected \n   *              infographic to the cavnas and is called immediately after\n   *              render().\n   */\n\n\n  componentDidMount() {\n    this._previousInfographic = this.props.infographic;\n\n    this._DrawInfographic();\n  }\n\n  componentDidUpdate() {\n    /**\n     * TODO current expr does redraw infographic when user clicks on same button\n     * again.\n     */\n    var expr = this.props.infographic !== this._previousInfographic;\n\n    if (expr) {\n      this.props.editorHandler('none');\n\n      this._DrawInfographic();\n    } else {\n      if (this.props.isRemoving) {\n        this._infogObj.Remove();\n      } else if (this.props.insertType !== 'none') {\n        this._infogObj.InsertElement({\n          type: this.props.insertType,\n          element: this.props.insertElement\n        });\n      } else if (this.props.layerAction !== 'none') {\n        this._infogObj.UpdateLayering(this.props.layerAction);\n      } else if (this.props.clearSelection) {\n        this._infogObj.ClearSelection();\n      } else if (this.props.isDownloading) {\n        this._infogObj.Download();\n      } else {\n        this._infogObj.UpdateTextHandler(this.props.textElem);\n\n        this._infogObj.UpdateChartDecorators(this.props.dSettings);\n\n        this._infogObj.UpdateChartData(this.props.chartData);\n\n        this._infogObj.UpdateChartSettings(this.props.cSettings);\n\n        this._infogObj.UpdateGraphicSettings(this.props.graphicSettings);\n      }\n    }\n\n    this._previousInfographic = this.props.infographic;\n  }\n  /**\n   * @summary Draws the infographic on the canvas using Konva. \n   */\n\n\n  _DrawInfographic() {\n    document.fonts.ready.then(() => {\n      if (this._infogObj) this._infogObj.Clean();\n      var handlerObj = {\n        editorHandler: editor => {\n          this.props.editorHandler(editor);\n        },\n        textHandler: textElem => {\n          this.props.textHandler(textElem);\n        },\n        chartHandler: (data, cSettings, dSettings) => {\n          this.props.chartHandler(data, cSettings, dSettings);\n        },\n        graphicHandler: settings => {\n          this.props.graphicHandler(settings);\n        }\n      };\n\n      switch (this.props.infographic) {\n        case 'HIVTemplateOne':\n          this._infogObj = new HIVTemplateOne(handlerObj);\n          break;\n\n        case 'ObesityTemplateOne':\n          this._infogObj = new ObesityTemplateOne(handlerObj);\n          break;\n\n        case 'ViolenceTemplateOne':\n          this._infogObj = new ViolenceTemplateOne(handlerObj);\n          break;\n\n        case 'DiabetesTemplateOne':\n          this._infogObj = new DiabetesTemplateOne(handlerObj);\n          break;\n\n        default:\n          this._infogObj = new HIVTemplateOne(handlerObj);\n          break;\n      }\n\n      this._infogObj.CreateInfographic();\n\n      this._infogObj.Draw();\n\n      this.props.dimensionHandler(this._infogObj.GetDimensions());\n    });\n  }\n\n}\n\nexport { CanvasContainer };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/CanvasContainer.js"],"names":["React","HIVTemplateOne","ObesityTemplateOne","ViolenceTemplateOne","DiabetesTemplateOne","CanvasContainer","Component","constructor","props","_infogObj","_previousInfographic","render","componentDidMount","infographic","_DrawInfographic","componentDidUpdate","expr","editorHandler","isRemoving","Remove","insertType","InsertElement","type","element","insertElement","layerAction","UpdateLayering","clearSelection","ClearSelection","isDownloading","Download","UpdateTextHandler","textElem","UpdateChartDecorators","dSettings","UpdateChartData","chartData","UpdateChartSettings","cSettings","UpdateGraphicSettings","graphicSettings","document","fonts","ready","then","Clean","handlerObj","editor","textHandler","chartHandler","data","graphicHandler","settings","CreateInfographic","Draw","dimensionHandler","GetDimensions"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// CanvasContainer.js\n// June 28, 2021\n\nimport React from 'react';\nimport { HIVTemplateOne, ObesityTemplateOne, ViolenceTemplateOne, \n    DiabetesTemplateOne } from '../../js/InfographicTemplates/index';\nimport '../../css/React/CanvasContainer.css';\n\n/**\n * Container class that holds the canvas (and related rendering functions) used \n * to draw the infographics to the screen.\n */\nclass CanvasContainer extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this._infogObj = 0;\n        this._previousInfographic = '';\n    }\n\n    render()\n    {\n        return (\n            <div id='canvas-container'>\n            </div>\n        );\n    }\n\n    /**\n     * @summary     Draws infographic to canvas using KonvaJS.\n     * @description This function is responsible for drawing the selected \n     *              infographic to the cavnas and is called immediately after\n     *              render().\n     */\n    componentDidMount()\n    {\n        this._previousInfographic = this.props.infographic;\n        this._DrawInfographic();\n    }\n\n    componentDidUpdate()\n    {\n        /**\n         * TODO current expr does redraw infographic when user clicks on same button\n         * again.\n         */\n        var expr = (this.props.infographic !== this._previousInfographic);\n        if (expr) {\n            this.props.editorHandler('none');\n            this._DrawInfographic();\n        } else {\n            if (this.props.isRemoving) {\n                this._infogObj.Remove();\n            } else if (this.props.insertType !== 'none') {\n                this._infogObj.InsertElement({\n                    type: this.props.insertType,\n                    element: this.props.insertElement,\n                });\n            } else if (this.props.layerAction !== 'none') {\n                this._infogObj.UpdateLayering(this.props.layerAction);\n            } else if (this.props.clearSelection) {\n                this._infogObj.ClearSelection()\n            } else if (this.props.isDownloading) { \n                this._infogObj.Download();\n            } else {\n                this._infogObj.UpdateTextHandler(this.props.textElem);\n\n                this._infogObj.UpdateChartDecorators(this.props.dSettings);\n                this._infogObj.UpdateChartData(this.props.chartData);\n                this._infogObj.UpdateChartSettings(this.props.cSettings);\n\n                this._infogObj.UpdateGraphicSettings(this.props.graphicSettings);\n            }\n        }\n        this._previousInfographic = this.props.infographic;\n    }\n\n    /**\n     * @summary Draws the infographic on the canvas using Konva. \n     */\n    _DrawInfographic()\n    {\n        document.fonts.ready.then(() => {\n\n            if (this._infogObj) this._infogObj.Clean();\n            \n            var handlerObj = {\n                editorHandler: (editor) => { this.props.editorHandler(editor); },\n                textHandler: (textElem) => { this.props.textHandler(textElem); },\n                chartHandler: (data, cSettings, dSettings) => { this.props.chartHandler(data, cSettings, dSettings); },\n                graphicHandler: (settings) => { this.props.graphicHandler(settings); }\n            };\n\n            switch(this.props.infographic) {\n                case 'HIVTemplateOne': \n                    this._infogObj = new HIVTemplateOne(handlerObj);\n                    break;\n                case 'ObesityTemplateOne': \n                    this._infogObj = new ObesityTemplateOne(handlerObj);\n                    break;\n                case 'ViolenceTemplateOne': \n                    this._infogObj = new ViolenceTemplateOne(handlerObj);\n                    break;\n                case 'DiabetesTemplateOne':\n                    this._infogObj = new DiabetesTemplateOne(handlerObj);\n                    break;\n                default:\n                    this._infogObj = new HIVTemplateOne(handlerObj);\n                    break;\n            }\n            this._infogObj.CreateInfographic();\n            this._infogObj.Draw();\n            this.props.dimensionHandler(this._infogObj.GetDimensions());\n        });\n    }\n}\n\nexport { CanvasContainer };"]},"metadata":{},"sourceType":"module"}