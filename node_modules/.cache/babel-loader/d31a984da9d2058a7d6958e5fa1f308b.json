{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/Components/LineChartInputFields.js\";\nimport React from 'react';\nimport { TextField } from './index';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport '../../../../css/React/Editors/BarChartInputFields.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LineChartInputFields extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.props.chartData.map((d, i) => {\n        let category = /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            position: 'relative',\n            left: '26%'\n          },\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 29\n        }, this);\n\n        let value = /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            position: 'relative',\n            left: '22%'\n          },\n          children: \"Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 38\n        }, this);\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'grid',\n            gridTemplateColumns: 'auto auto auto',\n            gridColumnGap: '20px',\n            alignContent: 'center'\n          },\n          children: [i === 0 && category, i === 0 && value, i === 0 && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 48\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            id: i + '-category',\n            index: i,\n            initialValue: d.category,\n            rows: 1,\n            cols: 20,\n            onChange: (d, i) => {\n              this._SetChartData(d, i, 'date');\n            }\n          }, i + '-category', false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 34\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            id: i + '-data',\n            index: i,\n            initialValue: d.value,\n            rows: 1,\n            cols: 10,\n            onChange: (d, i) => {\n              this._SetChartData(d, i, 'value');\n            }\n          }, i + '-data', false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            className: \"remove-row-icon\",\n            icon: faTimesCircle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 29\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-input-container\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"add-row-icon\",\n          icon: faPlus,\n          style: {\n            position: 'relative',\n            left: '61.5px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this);\n  }\n\n  _SetChartData(d, i, type) {\n    if (d === '') return;\n    let data = this.props.chartData.map(d => {\n      return {\n        date: d.date,\n        value: d.value\n      };\n    });\n    if (type === 'value') data[i].value = parseFloat(d);else if (type === 'date') data[i].date = d;\n    this.props.setChartData(data);\n  }\n\n}\n\nexport { LineChartInputFields };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/Components/LineChartInputFields.js"],"names":["React","TextField","FontAwesomeIcon","faPlus","faTimesCircle","LineChartInputFields","Component","render","props","chartData","map","d","i","category","position","left","value","display","gridTemplateColumns","gridColumnGap","alignContent","_SetChartData","type","data","date","parseFloat","setChartData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,SAA1B;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,mCAAtC;AAEA,OAAO,uDAAP;;;AAEA,MAAMC,oBAAN,SAAmCL,KAAK,CAACM,SAAzC,CACA;AACIC,EAAAA,MAAM,GACN;AACI,wBACI;AAAA,iBAEQ,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC/B,YAAIC,QAAQ,gBACR;AAAG,UAAA,KAAK,EAAE;AAACC,YAAAA,QAAQ,EAAE,UAAX;AAAuBC,YAAAA,IAAI,EAAE;AAA7B,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;;AAGA,YAAIC,KAAK,gBAAI;AAAG,UAAA,KAAK,EAAE;AAACF,YAAAA,QAAQ,EAAE,UAAX;AAAuBC,YAAAA,IAAI,EAAE;AAA7B,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAb;;AACA,4BACI;AACI,UAAA,KAAK,EAAE;AACHE,YAAAA,OAAO,EAAE,MADN;AAEHC,YAAAA,mBAAmB,EAAE,gBAFlB;AAGHC,YAAAA,aAAa,EAAE,MAHZ;AAIHC,YAAAA,YAAY,EAAE;AAJX,WADX;AAAA,qBAQOR,CAAC,KAAK,CAAP,IAAaC,QARnB,EASOD,CAAC,KAAK,CAAP,IAAaI,KATnB,EAUOJ,CAAC,KAAK,CAAP,iBAAa;AAAA;AAAA;AAAA;AAAA,kBAVnB,eAWK,QAAC,SAAD;AAEG,YAAA,EAAE,EAAEA,CAAC,GAAG,WAFX;AAGG,YAAA,KAAK,EAAEA,CAHV;AAIG,YAAA,YAAY,EAAED,CAAC,CAACE,QAJnB;AAKG,YAAA,IAAI,EAAE,CALT;AAMG,YAAA,IAAI,EAAE,EANT;AAOG,YAAA,QAAQ,EAAE,CAACF,CAAD,EAAIC,CAAJ,KAAU;AAAE,mBAAKS,aAAL,CAAmBV,CAAnB,EAAsBC,CAAtB,EAAyB,MAAzB;AAAiC;AAP1D,aACQA,CAAC,GAAG,WADZ;AAAA;AAAA;AAAA;AAAA,kBAXL,eAoBI,QAAC,SAAD;AAEI,YAAA,EAAE,EAAEA,CAAC,GAAG,OAFZ;AAGI,YAAA,KAAK,EAAEA,CAHX;AAII,YAAA,YAAY,EAAED,CAAC,CAACK,KAJpB;AAKI,YAAA,IAAI,EAAE,CALV;AAMI,YAAA,IAAI,EAAE,EANV;AAOI,YAAA,QAAQ,EAAE,CAACL,CAAD,EAAIC,CAAJ,KAAU;AAAE,mBAAKS,aAAL,CAAmBV,CAAnB,EAAsBC,CAAtB,EAAyB,OAAzB;AAAkC;AAP5D,aACSA,CAAC,GAAG,OADb;AAAA;AAAA;AAAA;AAAA,kBApBJ,eA6BI,QAAC,eAAD;AAAiB,YAAA,SAAS,EAAC,iBAA3B;AAA6C,YAAA,IAAI,EAAER;AAAnD;AAAA;AAAA;AAAA;AAAA,kBA7BJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAiCH,OAtCD,CAFR,eA0CI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACI,QAAC,eAAD;AACI,UAAA,SAAS,EAAC,cADd;AAEI,UAAA,IAAI,EAAED,MAFV;AAGI,UAAA,KAAK,EAAE;AACHW,YAAAA,QAAQ,EAAE,UADP;AAEHC,YAAAA,IAAI,EAAE;AAFH;AAHX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cA1CJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAuDH;;AAEDM,EAAAA,aAAa,CAACV,CAAD,EAAIC,CAAJ,EAAOU,IAAP,EACb;AACI,QAAIX,CAAC,KAAK,EAAV,EAAc;AACd,QAAIY,IAAI,GAAG,KAAKf,KAAL,CAAWC,SAAX,CAAqBC,GAArB,CAAyBC,CAAC,IAAI;AACrC,aAAO;AACHa,QAAAA,IAAI,EAAEb,CAAC,CAACa,IADL;AAEHR,QAAAA,KAAK,EAAEL,CAAC,CAACK;AAFN,OAAP;AAIH,KALU,CAAX;AAOA,QAAIM,IAAI,KAAK,OAAb,EAAsBC,IAAI,CAACX,CAAD,CAAJ,CAAQI,KAAR,GAAgBS,UAAU,CAACd,CAAD,CAA1B,CAAtB,KACK,IAAIW,IAAI,KAAK,MAAb,EAAqBC,IAAI,CAACX,CAAD,CAAJ,CAAQY,IAAR,GAAeb,CAAf;AAE1B,SAAKH,KAAL,CAAWkB,YAAX,CAAwBH,IAAxB;AACH;;AA1EL;;AA6EA,SAASlB,oBAAT","sourcesContent":["import React from 'react'\nimport { TextField } from './index';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport '../../../../css/React/Editors/BarChartInputFields.css'\n\nclass LineChartInputFields extends React.Component\n{\n    render()\n    {\n        return (\n            <div>\n                {\n                    this.props.chartData.map((d, i) => {\n                        let category = (\n                            <p style={{position: 'relative', left: '26%'}}>Category</p>\n                        );\n                        let value = (<p style={{position: 'relative', left: '22%'}}>Value</p>);\n                        return (\n                            <div \n                                style={{\n                                    display: 'grid',\n                                    gridTemplateColumns: 'auto auto auto',\n                                    gridColumnGap: '20px',\n                                    alignContent: 'center'\n                                }}\n                            >\n                                { (i === 0) && category}\n                                { (i === 0) && value}\n                                { (i === 0) && <div></div>}\n                                 <TextField \n                                    key={i + '-category'}\n                                    id={i + '-category'}\n                                    index={i}\n                                    initialValue={d.category}\n                                    rows={1}\n                                    cols={20}\n                                    onChange={(d, i) => { this._SetChartData(d, i, 'date')}}\n                                />\n                                <TextField \n                                    key={i + '-data'}\n                                    id={i + '-data'}\n                                    index={i}\n                                    initialValue={d.value}\n                                    rows={1}\n                                    cols={10}\n                                    onChange={(d, i) => { this._SetChartData(d, i, 'value')}}\n                                />\n                                <FontAwesomeIcon className='remove-row-icon' icon={faTimesCircle}/>\n                            </div>\n                        );\n                    })\n                }\n                <div className='data-input-container'>\n                    <FontAwesomeIcon \n                        className='add-row-icon' \n                        icon={faPlus} \n                        style={{\n                            position: 'relative',\n                            left: '61.5px'\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }  \n    \n    _SetChartData(d, i, type) \n    {\n        if (d === '') return;\n        let data = this.props.chartData.map(d => {\n            return {\n                date: d.date,\n                value: d.value\n            };\n        });\n\n        if (type === 'value') data[i].value = parseFloat(d);\n        else if (type === 'date') data[i].date = d;\n\n        this.props.setChartData(data);\n    }\n}\n\nexport { LineChartInputFields };"]},"metadata":{},"sourceType":"module"}