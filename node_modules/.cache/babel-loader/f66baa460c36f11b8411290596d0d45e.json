{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/QuillEditor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport html2canvas from 'html2canvas';\nimport { useQuill } from 'react-quilljs';\nimport Delta from 'quill-delta';\nimport 'quill/dist/quill.snow.css';\nimport '../../../css/Quill/FontList.css';\nimport '../../../css/Quill/FontSize.css';\nimport '../../../css/Quill/LineHeight.css';\nimport '../../../css/Quill/Toolbar.css';\nimport '../../../css/React/Editors/QuillEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction QuillEditor(props) {\n  _s();\n\n  var sizeList = ['10px', '11px', '12px', '13px', '14px', '15px', '16px', '17px', '18px', '20px', 'custom-size'];\n  var fontList = ['900-museo', '100-canada', '200-canada', '400-canada', '500-canada', '600-canada', '700-canada', '900-canada', '200-Montserrat', 'Open-Sans', '100-Roboto', '300-Roboto', '400-Roboto', '500-Roboto', '700-Roboto', '900-Roboto'];\n  var lineHeightList = ['1.0', '1.2', '1.5', '1.75', '2.0'];\n  const theme = 'snow';\n  const modules = {\n    toolbar: [[{\n      'font': fontList\n    }], [{\n      'size': sizeList\n    }], [{\n      'lineheight': lineHeightList\n    }], [{\n      'align': []\n    }], [{\n      'color': [\"#000000\", \"#e60000\", \"#ff9900\", \"#ffff00\", \"#008a00\", \"#0066cc\", \"#9933ff\", \"#ffffff\", \"#facccc\", \"#ffebcc\", \"#ffffcc\", \"#cce8cc\", \"#cce0f5\", \"#ebd6ff\", \"#bbbbbb\", \"#f06666\", \"#ffc266\", \"#ffff66\", \"#66b966\", \"#66a3e0\", \"#c285ff\", \"#888888\", \"#a10000\", \"#b26b00\", \"#b2b200\", \"#006100\", \"#0047b2\", \"#6b24b2\", \"#444444\", \"#5c0000\", \"#663d00\", \"#666600\", \"#003700\", \"#002966\", \"#3d1466\", 'custom-color']\n    }]]\n  };\n  const placeholder = 'Compose an epic...';\n  const formats = ['font', 'size', 'lineheight', 'align', 'color'];\n  const {\n    quill,\n    quillRef,\n    Quill\n  } = useQuill({\n    theme,\n    modules,\n    formats,\n    placeholder\n  });\n  const [sizeArr, setSizeArr] = useState(sizeList);\n  var font = {\n    font: 0\n  },\n      fontArr = []; // Initialize text editor\n\n  if (Quill && quill) {\n    // Set up font, font sizes, and line heights so Quill recognizes them\n    // and can use them\n    console.log(props.textElem); // RegisterFontSizes(Quill, sizeList);\n\n    RegisterFontFamilies(Quill, fontList);\n    InitLineHeights(Quill, lineHeightList); // Insert the selected text into QuillEditor\n\n    InitEditor({\n      textElem: props.textElem,\n      quillObj: quill,\n      quillClass: Quill,\n      sizeList: sizeList,\n      font: font,\n      fontList: fontArr\n    });\n    AddQuillListeners({\n      quill: quill,\n      sizeList: sizeList,\n      font: font,\n      quillClass: Quill,\n      fontArr: fontArr,\n      textElem: props.textElem,\n      setTextElem: textElem => {\n        props.setTextElem(textElem);\n      }\n    });\n    /**\n     * @summary     Updates the UI component for the text's size to accurately\n     *              reflect the font of the current selection.\n     * @description An event handler than runs when the quill editor's \n     *              selection has changed. When this runs, we manually \n     *              update the quill editor's UI to accurately reflect\n     *              \"custom\" font sizes.\n     */\n\n    quill.on('selection-change', () => {\n      let selection = quill.getSelection();\n\n      if (selection === null) {\n        RemoveColorFromSize();\n        return;\n      }\n\n      let format = quill.getFormat(selection),\n          size = format.size;\n\n      if (!sizeArr.find(elem => elem === size)) {\n        UpdateSizeUI(size);\n      }\n    });\n    quill.setSelection(0, 0);\n    let size = quill.getFormat(quill.getSelection()).size;\n\n    if (!sizeArr.find(elem => elem === size)) {\n      UpdateSizeUI(size);\n    }\n  }\n  /**\n   * The function component version of react's lifecycle functions. \n   */\n\n\n  useEffect(() => {\n    if (quill && Quill) {\n      let elem = document.querySelector('.ql-container'),\n          spanCSS = props.textElem.spanCSS;\n\n      for (let i = 0; i < spanCSS.length; i++) {\n        if (spanCSS[i].textColor === '#ffffff' || spanCSS[i].textColor === 'white') {\n          elem.style.backgroundColor = '#000';\n          return;\n        }\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-editor-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-editor\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: quillRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n\n_s(QuillEditor, \"qLEB2ecTUZB50V9QDgY2Qh8mo38=\", false, function () {\n  return [useQuill];\n});\n\n_c = QuillEditor;\n\nfunction UpdateSizeUI(value) {\n  let elem = document.querySelector('.ql-snow .ql-picker.ql-size .ql-picker-label');\n  elem.setAttribute('data-value', value);\n  elem.classList.add('ql-active');\n}\n\n_c2 = UpdateSizeUI;\n\nfunction RemoveColorFromSize() {\n  let elem = document.querySelector('.ql-snow .ql-picker.ql-size .ql-picker-label');\n  elem.classList.remove('ql-active');\n}\n\n_c3 = RemoveColorFromSize;\n\nfunction InitLineHeights(Quill, lineHeightList) {\n  var Parchment = Quill.import('parchment');\n  var lineHeightConfig = {\n    scope: Parchment.Scope.INLINE,\n    whilelist: lineHeightList\n  };\n  var lineHeightClass = new Parchment.Attributor.Class('lineheight', 'ql-line-height', lineHeightConfig);\n  var lineHeightStyle = new Parchment.Attributor.Style('lineheight', 'line-height', lineHeightConfig);\n  Parchment.register(lineHeightClass);\n  Parchment.register(lineHeightStyle);\n  Quill.register(lineHeightList, true);\n}\n/**\n * @summary     Registers various font families with Quill.\n * @description Creates a Font object, whitelists the fonts, and registers\n *              them with Quill.\n * \n * @param {Array} fontList An array of strings that represent the data value \n *                         associated with the fonts.\n */\n\n\n_c4 = InitLineHeights;\n\nfunction RegisterFontFamilies(Quill, fontList) {\n  var Font = Quill.import('formats/font');\n  Font.whitelist = fontList;\n  Quill.register(Font, true);\n}\n/**\n * @summary     Registers the various font sizes with Quill.\n * @description Creates a Size object, whitelists the sizes, and registers \n *              them with Quill.\n * \n * @param {Array} sizeList An array of size strings.\n */\n\n\n_c5 = RegisterFontFamilies;\n\nfunction RegisterFontSizes(Quill, sizeList) {\n  var Size = Quill.import('attributors/style/size');\n  Size.whitelist = sizeList;\n  Quill.register(Size, true);\n}\n/**\n * @summary     Updates editor so that text color, size, and font are the \n *              same as that on the infographic.\n * @description Given the selected elements attributes (size, color, and font),\n *              this function will update the Quill editor so that when the\n *              user starts typing, the text in the text editor will have \n *              the given attributes from above.\n * \n * @param {QuillEditor} quill The quill editor.\n * @param {Array} sizeList The array of default font sizes.\n */\n\n\n_c6 = RegisterFontSizes;\n\nfunction InitEditor({\n  textElem,\n  quillObj,\n  quillClass,\n  sizeList,\n  font,\n  fontList\n}) {\n  if (textElem === 0) return;\n  var cssList = textElem.spanCSS;\n  /**\n   * Registers font sizes if they are not already registered.\n   */\n\n  cssList.forEach(d => {\n    if (!sizeList.find(elem => elem === d.fontSize)) {\n      sizeList.push(d.fontSize);\n    }\n  });\n  RegisterFontSizes(quillClass, sizeList); // Converts the spanCSS element in textElem to a Delta (the Quill way of\n  // describing elements)\n\n  var contents = SpanCSSToDelta(textElem, quillClass); // Sets content to the contents delta.\n\n  quillObj.setContents(contents);\n  DetermineInitialFont(quillObj, contents, font, fontList);\n  /**\n   * \"Fixes\" the quill editor contents. For some reason (and I am not \n   * entirely sure why), the quill editor will simplify the delta and remove \n   * important attribute data (like the font). \n   * \n   * We fix this issue by simply reformatting the undefined fonts to the\n   * value of font.\n   */\n\n  UpdateQuillFont(quillObj, true, font.font, fontList);\n  var alignment = cssList.length !== 0 ? cssList[0].align : 'left';\n  AlignText(quillObj, alignment);\n}\n/**\n * @summary     Converts spanCSS data in a text handler element to a Quill\n *              Delta.\n * @description Iterates through all of the elements in spanCSS (which itself \n *              is a JSON Array) and converts it to a Delta that will be used\n *              to populate the contents of the Quill text editor.\n * @returns     The Delta version of spanCSS.\n */\n\n\n_c7 = InitEditor;\n\nfunction SpanCSSToDelta(textElem, Quill) {\n  var elemCount = 0;\n  var cssList = textElem.spanCSS; // var Delta = Quill.import('delta');\n\n  var contents = new Delta();\n  textElem.textElem.childNodes.forEach((d, i) => {\n    d.childNodes.forEach(elem => {\n      contents.insert(elem.innerHTML, {\n        font: cssList[elemCount].fontFamily,\n        color: cssList[elemCount].textColor,\n        size: cssList[elemCount].fontSize,\n        lineheight: cssList[elemCount].lineHeight\n      });\n      elemCount++;\n    });\n    contents.insert('\\n');\n  });\n  return contents;\n}\n/**\n * @summary     Determines the initial value of this._font.\n * @description Determines the initial value of this._font greedily by finding\n *              the first possible instance.\n * \n * @param {Delta} contents The contents delta created using spanCSS from the\n *                         textHandler.\n */\n\n\n_c8 = SpanCSSToDelta;\n\nfunction DetermineInitialFont(quillObj, contents, font, fontArr) {\n  quillObj.getContents().ops.forEach((d, i) => {\n    if (d.insert !== '\\n') {\n      if (d.attributes !== undefined && (d.attributes.font === undefined || d.attributes.font === null)) {\n        font.font = contents.ops[i].attributes.font;\n        fontArr[fontArr.length] = contents.ops[i].attributes.font;\n      }\n    }\n  });\n}\n/**\n * @summary     Aligns all of the lines in the quill editor.\n * \n * @param {string} align The type of alignment for each line.\n */\n\n\n_c9 = DetermineInitialFont;\n\nfunction AlignText(quillObj, align) {\n  var contents = quillObj.getContents();\n  var contentLength = 0;\n  contents.ops.forEach(d => {\n    contentLength += d.insert.length;\n  });\n  quillObj.formatLine(0, contentLength, 'align', align);\n}\n/**\n * @summary     Updates null or undefined elements with current value of their \n *              repsective instance variables.\n * \n * @description Updates null or undefined attributes in the Delta object associated\n *              with the quill editor's contents. In some cases, these variables\n *              can go undefined when they should have explicit values. This \n *              function re-adds those values so they are explicitly given.\n * \n * @param {bool} useFontArray A boolean that determines if this function\n *                            should use the fontArr instance variable or \n *                            the font instance variable.\n */\n\n\n_c10 = AlignText;\n\nfunction UpdateQuillFont(quillObj, useFontArray = false, font, fontArr) {\n  var errorCount = 0;\n  quillObj.getContents().ops.forEach((d, i) => {\n    if (d.attributes !== undefined && (d.attributes.font === undefined || d.attributes.font === null)) {\n      var bounds = FindSelectionBounds(quillObj, i);\n      ReformatQuillFont(quillObj, bounds.lowerBound, bounds.upperBound, useFontArray, font, fontArr, errorCount);\n      errorCount++;\n    }\n  });\n}\n/**\n * @summary     This function finds the selection bounds of the null or \n *              undefined delta element so that it can be formated properly.W\n * @description This function assumes that opsIndex is in the quill content's \n *              delta.\n * \n * @param {int} opsIndex Index of the ops we want to convert to quill selection\n *                       bounds.\n */\n\n\n_c11 = UpdateQuillFont;\n\nfunction FindSelectionBounds(quill, opsIndex) {\n  var count = 0,\n      lowerBound = 0,\n      upperBound = 0;\n  quill.getContents().ops.forEach((d, i) => {\n    var prevCount = count;\n    count += d.insert.length;\n\n    if (i === opsIndex) {\n      lowerBound = prevCount;\n      upperBound = count;\n    }\n  });\n  return {\n    lowerBound,\n    upperBound\n  };\n}\n/**\n * @summary     Reformats the font in the quill editor at index lower with \n *              length of (upper - lower).\n * \n * @param {int}     lower        The starting index of the text we need to reformat.\n * @param {int}     upper        The ending index of the text we need to reformat.\n * @param {boolean} useFontArray Determines whether quill reformats based on \n *                               _font or _fontArr \n */\n\n\n_c12 = FindSelectionBounds;\n\nfunction ReformatQuillFont(quill, lower, upper, useFontArray, _font, fontArr, index) {\n  var font = 0;\n  if (useFontArray) font = fontArr[index];else font = _font;\n  quill.formatText(lower, upper - lower, {\n    font: font\n  });\n}\n/**\n * @summary     Adds event listeners to the quill object.\n * @description Adds the event listeners responsible for text change, font color,\n *              and font size.\n * \n * @param {Quill} quill The quill object we want to add event listeners to.\n */\n\n\n_c13 = ReformatQuillFont;\n\nfunction AddQuillListeners({\n  quill,\n  sizelist,\n  font,\n  quillClass,\n  fontArr,\n  textElem,\n  setTextElem\n}) {\n  AddTextListener(quill, font, fontArr, textElem, textElem => {\n    setTextElem(textElem);\n  });\n  AddFontListener(quill, font);\n  AddFontColorListener(quill, font);\n  AddFontSizeListener(quill, font, sizelist, quillClass);\n}\n/**\n * @summary     Custom event listener that is triggered when the font option\n *              on Quill toolbar is selected.\n * @description Custom event listener that essentially performs the same \n *              action as the default event listener for fonts with the \n *              exception that it updated this._font for usage later in the\n *              program.\n */\n\n\n_c14 = AddQuillListeners;\n\nfunction AddFontListener(quill, font) {\n  quill.getModule('toolbar').addHandler('font', value => {\n    font.font = quill.getFormat(quill.getSelection()).font;\n    quill.format('font', value);\n  });\n}\n/**\n * @summary     Allows for the input of custom font colors.\n * @description Adds an event listener that allows for the addition of custom \n *              font colors.\n */\n\n\n_c15 = AddFontListener;\n\nfunction AddFontColorListener(quill, font) {\n  quill.getModule('toolbar').addHandler('color', value => {\n    if (value === 'custom-color') {\n      value = prompt('Enter Hex/RGB/RGBA');\n    }\n\n    font.font = quill.getFormat(quill.getSelection()).font;\n    quill.format('color', value);\n  });\n}\n/**\n * @summary     Allows for the input of custom font sizes.\n * @description Adds an event listener that allows for the addition of a custom\n *              font size.\n */\n\n\n_c16 = AddFontColorListener;\n\nfunction AddFontSizeListener(quill, font, sizeList, quillClass) {\n  quill.getModule('toolbar').addHandler('size', value => {\n    let list = ['10px', '11px', '12px', '13px', '14px', '15px', '16px', '17px', '18px', '20px', 'custom-size'];\n\n    if (value === 'custom-size') {\n      value = prompt('Enter font size');\n      value += 'px';\n      list.push(value);\n      quill.getContents().ops.forEach(d => {\n        if (d.attributes !== undefined) {\n          if (!list.find(elem => elem === d.attributes.size)) {\n            list.push(d.attributes.size);\n          }\n        }\n      });\n      RegisterFontSizes(quillClass, list);\n    }\n\n    font.font = quill.getFormat(quill.getSelection()).font;\n    quill.format('size', value);\n    UpdateSizeUI(value);\n  });\n}\n/**\n * @summary     Adds an event listener that is called when text is changed\n *              to the parameterized quill object.\n * @description Call's the quill object's on method with option 'text-change'\n *              and adds an event listener to it.\n */\n\n\n_c17 = AddFontSizeListener;\n\nfunction AddTextListener(quill, font, fontArr, textElem, setTextElem) {\n  var timeout = {\n    timeout: null\n  };\n  quill.on('text-change', () => {\n    UpdateQuillFont(quill, false, font.font, fontArr);\n    UpdateTextListener(quill, timeout, textElem, textElem => setTextElem(textElem));\n  });\n}\n/**\n * @summary     Updates the selected text element.\n * @description An event listener that is called whenever the text within\n *              \"editor-container\" changes.\n */\n\n\n_c18 = AddTextListener;\n\nfunction UpdateTextListener(quill, timeout, textElem, setTextElem) {\n  if (timeout.timeout) return;\n  timeout.timeout = setTimeout(() => {\n    timeout.timeout = null;\n    HTMLToCanvas(quill, textElem, setTextElem);\n  }, 100);\n}\n/**\n * @summary     Converts DOM elements in the Quill editor to Konva.Image elements\n * @description Uses the html2canvas module to convert DOM elements located \n *              within the body into Konva.Image elements.\n */\n\n\n_c19 = UpdateTextListener;\n\nfunction HTMLToCanvas(quill, textElem, setTextElem) {\n  /** \n   * Error check to ensure that Konva.js doesn't try to write an empty \n   * image to the canvas. If this occurs, the program will break so we \n   * need this error check here.\n   */\n  if (IsEditorEmpty(quill)) {\n    quill.format('font', '900-museo');\n    return;\n  }\n  /**\n   * Error check to ensure that program does not try to convert Quill contents\n   * when the editor is closed. This usually occurs after the component unmounts.\n   * I'm not 100% sure why, but my thought process is that right before the Quill\n   * editor gets removed, the contents are cleared which triggers this method.\n   */\n\n\n  if (document.querySelector('.ql-editor') === null) return; // Gets the text in the quill editor \n\n  var qlEditor = document.querySelector('.ql-editor').cloneNode(true);\n  qlEditor.style.padding = 0 + 'px'; // Creates a helper <div> to render text. This is necessary because with\n  // out it, text would not render properly. \n\n  var helper = document.createElement('div');\n  helper.style.visibility = 'false';\n  helper.style.position = 'absolute';\n  helper.id = 'ql-helper';\n  helper.appendChild(qlEditor);\n  document.getElementById('renderHelper').appendChild(helper); // Update textElem in textHandler element\n\n  textElem.textElem = qlEditor;\n  DeltaToSpanCSS(quill, textElem); // Calling html2canvas and converting the quill editor contents into\n  // a Konva.Image.\n\n  html2canvas(helper, {\n    backgroundColor: null,\n    scrollY: -window.scrollY\n  }).then(image => {\n    // Update the <canvas> with the new text image... NOTE that his occurs\n    // as soon as the change is detected while the actual textElement (in\n    // infographic) is not updated until the text editor is removed.\n    textElem.image.image(image); // Create a new text element and pass it to InfographicEditor\n\n    var newElem = {\n      textElem: textElem.textElem,\n      group: textElem.group,\n      image: textElem.image,\n      spanCSS: textElem.spanCSS\n    };\n    setTextElem(newElem, image);\n  });\n  helper.remove();\n}\n/**\n * @summary     Converts the Quill Delta into a spanCSS element.\n * @description Iterates through the contents of the Quill editor, which is\n *              in the form of a delta, and converts each element into an \n *              object of spanCSS.\n */\n\n\n_c20 = HTMLToCanvas;\n\nfunction DeltaToSpanCSS(quill, textElem) {\n  var attributeCount = 0;\n  var cssList = [];\n  quill.getContents().ops.forEach((d, i) => {\n    if (d.attributes && d.insert !== '\\n') {\n      var elem = {\n        fontFamily: d.attributes ? d.attributes.font : '900-museo',\n        fontSize: d.attributes ? d.attributes.size : '10px',\n        textColor: d.attributes ? d.attributes.color : 'black',\n        lineHeight: d.attributes ? d.attributes.lineheight : '1.0',\n        align: d.attributes ? quill.getFormat().align : 'left'\n      };\n      cssList[attributeCount] = elem;\n      attributeCount++;\n    }\n  });\n  textElem.spanCSS = cssList;\n}\n/**\n * @summary Determines if quill editor is empty.\n * @returns True if empty and false if not empty.\n */\n\n\n_c21 = DeltaToSpanCSS;\n\nfunction IsEditorEmpty(quill) {\n  return quill.getContents().ops[0].insert === '\\n';\n}\n\n_c22 = IsEditorEmpty;\nexport { QuillEditor };\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22;\n\n$RefreshReg$(_c, \"QuillEditor\");\n$RefreshReg$(_c2, \"UpdateSizeUI\");\n$RefreshReg$(_c3, \"RemoveColorFromSize\");\n$RefreshReg$(_c4, \"InitLineHeights\");\n$RefreshReg$(_c5, \"RegisterFontFamilies\");\n$RefreshReg$(_c6, \"RegisterFontSizes\");\n$RefreshReg$(_c7, \"InitEditor\");\n$RefreshReg$(_c8, \"SpanCSSToDelta\");\n$RefreshReg$(_c9, \"DetermineInitialFont\");\n$RefreshReg$(_c10, \"AlignText\");\n$RefreshReg$(_c11, \"UpdateQuillFont\");\n$RefreshReg$(_c12, \"FindSelectionBounds\");\n$RefreshReg$(_c13, \"ReformatQuillFont\");\n$RefreshReg$(_c14, \"AddQuillListeners\");\n$RefreshReg$(_c15, \"AddFontListener\");\n$RefreshReg$(_c16, \"AddFontColorListener\");\n$RefreshReg$(_c17, \"AddFontSizeListener\");\n$RefreshReg$(_c18, \"AddTextListener\");\n$RefreshReg$(_c19, \"UpdateTextListener\");\n$RefreshReg$(_c20, \"HTMLToCanvas\");\n$RefreshReg$(_c21, \"DeltaToSpanCSS\");\n$RefreshReg$(_c22, \"IsEditorEmpty\");","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/QuillEditor.js"],"names":["React","useEffect","useState","html2canvas","useQuill","Delta","QuillEditor","props","sizeList","fontList","lineHeightList","theme","modules","toolbar","placeholder","formats","quill","quillRef","Quill","sizeArr","setSizeArr","font","fontArr","console","log","textElem","RegisterFontFamilies","InitLineHeights","InitEditor","quillObj","quillClass","AddQuillListeners","setTextElem","on","selection","getSelection","RemoveColorFromSize","format","getFormat","size","find","elem","UpdateSizeUI","setSelection","document","querySelector","spanCSS","i","length","textColor","style","backgroundColor","value","setAttribute","classList","add","remove","Parchment","import","lineHeightConfig","scope","Scope","INLINE","whilelist","lineHeightClass","Attributor","Class","lineHeightStyle","Style","register","Font","whitelist","RegisterFontSizes","Size","cssList","forEach","d","fontSize","push","contents","SpanCSSToDelta","setContents","DetermineInitialFont","UpdateQuillFont","alignment","align","AlignText","elemCount","childNodes","insert","innerHTML","fontFamily","color","lineheight","lineHeight","getContents","ops","attributes","undefined","contentLength","formatLine","useFontArray","errorCount","bounds","FindSelectionBounds","ReformatQuillFont","lowerBound","upperBound","opsIndex","count","prevCount","lower","upper","_font","index","formatText","sizelist","AddTextListener","AddFontListener","AddFontColorListener","AddFontSizeListener","getModule","addHandler","prompt","list","timeout","UpdateTextListener","setTimeout","HTMLToCanvas","IsEditorEmpty","qlEditor","cloneNode","padding","helper","createElement","visibility","position","id","appendChild","getElementById","DeltaToSpanCSS","scrollY","window","then","image","newElem","group","attributeCount"],"mappings":"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","sourcesContent":["import React, { useEffect, useState }from 'react';\nimport html2canvas from 'html2canvas';\nimport { useQuill } from 'react-quilljs';\nimport Delta from 'quill-delta';\nimport 'quill/dist/quill.snow.css';\nimport '../../../css/Quill/FontList.css';\nimport '../../../css/Quill/FontSize.css';\nimport '../../../css/Quill/LineHeight.css';\nimport '../../../css/Quill/Toolbar.css';\n\nimport '../../../css/React/Editors/QuillEditor.css';\n\nfunction QuillEditor(props)\n{\n    var sizeList = ['10px', '11px', '12px', '13px', '14px', '15px', '16px', \n            '17px', '18px', '20px', 'custom-size'];\n    var fontList = ['900-museo', '100-canada', '200-canada', \n        '400-canada', '500-canada', '600-canada', '700-canada', '900-canada',\n        '200-Montserrat', 'Open-Sans', '100-Roboto', '300-Roboto', '400-Roboto',\n        '500-Roboto', '700-Roboto', '900-Roboto'];\n    var lineHeightList = ['1.0', '1.2', '1.5', '1.75', '2.0'];\n\n    const theme = 'snow';\n\n    const modules= {\n        toolbar: [\n            [{'font': fontList}],\n            [{'size': sizeList}],\n            [{'lineheight': lineHeightList}],\n            [{'align': []}],\n            [{'color': [\"#000000\", \"#e60000\", \"#ff9900\", \"#ffff00\", \n            \"#008a00\", \"#0066cc\", \"#9933ff\", \"#ffffff\", \"#facccc\", \n            \"#ffebcc\", \"#ffffcc\", \"#cce8cc\", \"#cce0f5\", \"#ebd6ff\", \n            \"#bbbbbb\", \"#f06666\", \"#ffc266\", \"#ffff66\", \"#66b966\", \n            \"#66a3e0\", \"#c285ff\", \"#888888\", \"#a10000\", \"#b26b00\", \n            \"#b2b200\", \"#006100\", \"#0047b2\", \"#6b24b2\", \"#444444\", \n            \"#5c0000\", \"#663d00\", \"#666600\", \"#003700\", \"#002966\", \n            \"#3d1466\", 'custom-color']}]\n        ],\n    };\n\n    const placeholder = 'Compose an epic...';\n\n    const formats = ['font', 'size', 'lineheight', 'align', 'color'];\n\n    const { quill, quillRef, Quill } = useQuill({ theme, modules, formats, placeholder });\n    const [ sizeArr, setSizeArr ] = useState(sizeList);\n\n    var font = {font: 0}, fontArr = [];\n\n    // Initialize text editor\n    if (Quill && quill) {\n        // Set up font, font sizes, and line heights so Quill recognizes them\n        // and can use them\n        console.log(props.textElem);\n        // RegisterFontSizes(Quill, sizeList);\n        RegisterFontFamilies(Quill, fontList)\n        InitLineHeights(Quill, lineHeightList);\n\n        // Insert the selected text into QuillEditor\n        InitEditor({\n            textElem: props.textElem,\n            quillObj: quill,\n            quillClass: Quill,\n            sizeList: sizeList,\n            font: font,\n            fontList: fontArr,\n        });\n\n        AddQuillListeners({\n            quill: quill,\n            sizeList: sizeList,\n            font: font,\n            quillClass: Quill,\n            fontArr: fontArr,\n            textElem: props.textElem,\n            setTextElem: (textElem) => { props.setTextElem(textElem); }\n        });\n\n        /**\n         * @summary     Updates the UI component for the text's size to accurately\n         *              reflect the font of the current selection.\n         * @description An event handler than runs when the quill editor's \n         *              selection has changed. When this runs, we manually \n         *              update the quill editor's UI to accurately reflect\n         *              \"custom\" font sizes.\n         */\n        quill.on('selection-change', () => {\n            let selection = quill.getSelection();\n            \n            if (selection === null) {\n                RemoveColorFromSize();\n                return;\n            }\n\n            let format = quill.getFormat(selection),\n                size = format.size;\n            \n            if (!sizeArr.find(elem => elem === size)) {\n                UpdateSizeUI(size);\n            }\n        });\n\n        quill.setSelection(0, 0);\n        let size = quill.getFormat(quill.getSelection()).size;\n        if (!sizeArr.find(elem => elem === size)) {\n            UpdateSizeUI(size);\n        }\n    }\n\n    /**\n     * The function component version of react's lifecycle functions. \n     */\n    \n    useEffect(() => {\n        if (quill && Quill) {\n            let elem = document.querySelector('.ql-container'),\n                spanCSS = props.textElem.spanCSS;\n            \n            for (let i = 0; i < spanCSS.length; i++) {\n                if (spanCSS[i].textColor === '#ffffff' || spanCSS[i].textColor === 'white') {\n                    elem.style.backgroundColor = '#000';\n                    return;\n                }\n            }\n        }\n    });\n    return (\n        <div className='text-editor-container'>\n            <div className='text-editor'>\n                <div ref={quillRef}></div>\n            </div>\n        </div>\n    )\n}\n\nfunction UpdateSizeUI(value)\n{\n    let elem = document.querySelector('.ql-snow .ql-picker.ql-size .ql-picker-label');\n    elem.setAttribute('data-value', value);\n    elem.classList.add('ql-active');\n}\n\nfunction RemoveColorFromSize()\n{\n    let elem = document.querySelector('.ql-snow .ql-picker.ql-size .ql-picker-label');\n    elem.classList.remove('ql-active')\n}\n\nfunction InitLineHeights(Quill, lineHeightList)\n{\n    var Parchment = Quill.import('parchment');\n    var lineHeightConfig = {\n        scope: Parchment.Scope.INLINE,\n        whilelist: lineHeightList\n    };\n    var lineHeightClass = new Parchment.Attributor.Class('lineheight', 'ql-line-height', lineHeightConfig);\n    var lineHeightStyle = new Parchment.Attributor.Style('lineheight', 'line-height', lineHeightConfig);\n\n    Parchment.register(lineHeightClass);\n    Parchment.register(lineHeightStyle);\n    Quill.register(lineHeightList, true);\n}\n\n/**\n * @summary     Registers various font families with Quill.\n * @description Creates a Font object, whitelists the fonts, and registers\n *              them with Quill.\n * \n * @param {Array} fontList An array of strings that represent the data value \n *                         associated with the fonts.\n */\nfunction RegisterFontFamilies(Quill, fontList)\n{\n    var Font = Quill.import('formats/font');\n    Font.whitelist = fontList;\n    Quill.register(Font, true);\n}\n\n/**\n * @summary     Registers the various font sizes with Quill.\n * @description Creates a Size object, whitelists the sizes, and registers \n *              them with Quill.\n * \n * @param {Array} sizeList An array of size strings.\n */\nfunction RegisterFontSizes(Quill, sizeList)\n{\n    var Size = Quill.import('attributors/style/size');\n    Size.whitelist = sizeList;\n    Quill.register(Size, true);\n}\n\n/**\n * @summary     Updates editor so that text color, size, and font are the \n *              same as that on the infographic.\n * @description Given the selected elements attributes (size, color, and font),\n *              this function will update the Quill editor so that when the\n *              user starts typing, the text in the text editor will have \n *              the given attributes from above.\n * \n * @param {QuillEditor} quill The quill editor.\n * @param {Array} sizeList The array of default font sizes.\n */\nfunction InitEditor({textElem, quillObj, quillClass, sizeList, font, fontList})\n{    \n    if (textElem === 0) return;\n    var cssList = textElem.spanCSS;\n\n    /**\n     * Registers font sizes if they are not already registered.\n     */\n    cssList.forEach(d => {\n        if (!sizeList.find(elem => elem === d.fontSize)) {\n            sizeList.push(d.fontSize);\n        }\n    });\n    RegisterFontSizes(quillClass, sizeList);\n\n    // Converts the spanCSS element in textElem to a Delta (the Quill way of\n    // describing elements)\n    var contents = SpanCSSToDelta(textElem, quillClass);\n    \n    // Sets content to the contents delta.\n    quillObj.setContents(contents);\n    DetermineInitialFont(quillObj, contents, font, fontList);\n\n    /**\n     * \"Fixes\" the quill editor contents. For some reason (and I am not \n     * entirely sure why), the quill editor will simplify the delta and remove \n     * important attribute data (like the font). \n     * \n     * We fix this issue by simply reformatting the undefined fonts to the\n     * value of font.\n     */\n    UpdateQuillFont(quillObj, true, font.font, fontList);\n\n    var alignment = (cssList.length !== 0) ? cssList[0].align : 'left';\n    AlignText(quillObj, alignment);\n}\n\n/**\n * @summary     Converts spanCSS data in a text handler element to a Quill\n *              Delta.\n * @description Iterates through all of the elements in spanCSS (which itself \n *              is a JSON Array) and converts it to a Delta that will be used\n *              to populate the contents of the Quill text editor.\n * @returns     The Delta version of spanCSS.\n */\nfunction SpanCSSToDelta(textElem, Quill)\n{\n    var elemCount = 0\n    var cssList = textElem.spanCSS;\n    // var Delta = Quill.import('delta');\n    var contents = new Delta();\n\n    textElem.textElem.childNodes.forEach((d, i) => {\n        d.childNodes.forEach((elem) => {\n            contents.insert(elem.innerHTML, {\n                font: cssList[elemCount].fontFamily,\n                color: cssList[elemCount].textColor, \n                size: cssList[elemCount].fontSize,\n                lineheight: cssList[elemCount].lineHeight,\n            });\n            elemCount++;\n        });\n        contents.insert('\\n');\n    });\n    return contents;\n}\n\n/**\n * @summary     Determines the initial value of this._font.\n * @description Determines the initial value of this._font greedily by finding\n *              the first possible instance.\n * \n * @param {Delta} contents The contents delta created using spanCSS from the\n *                         textHandler.\n */\nfunction DetermineInitialFont(quillObj, contents, font, fontArr)\n{\n    quillObj.getContents().ops.forEach((d, i) => {\n        if (d.insert !== '\\n'){\n            if (d.attributes !== undefined && (d.attributes.font === undefined \n                || d.attributes.font === null)) {\n                font.font = contents.ops[i].attributes.font;\n                fontArr[fontArr.length] = contents.ops[i].attributes.font;\n            }\n        }\n    });\n}\n\n/**\n * @summary     Aligns all of the lines in the quill editor.\n * \n * @param {string} align The type of alignment for each line.\n */\nfunction AlignText(quillObj, align)\n{\n    var contents = quillObj.getContents();\n    var contentLength = 0;\n\n    contents.ops.forEach((d) => {\n        contentLength += d.insert.length;\n    });\n    quillObj.formatLine(0, contentLength, 'align', align)\n}\n\n/**\n * @summary     Updates null or undefined elements with current value of their \n *              repsective instance variables.\n * \n * @description Updates null or undefined attributes in the Delta object associated\n *              with the quill editor's contents. In some cases, these variables\n *              can go undefined when they should have explicit values. This \n *              function re-adds those values so they are explicitly given.\n * \n * @param {bool} useFontArray A boolean that determines if this function\n *                            should use the fontArr instance variable or \n *                            the font instance variable.\n */\nfunction UpdateQuillFont(quillObj, useFontArray = false, font, fontArr)\n{\n    var errorCount = 0;\n    quillObj.getContents().ops.forEach((d, i) => {\n        if (d.attributes !== undefined && (d.attributes.font === undefined \n            || d.attributes.font === null)) {\n            var bounds = FindSelectionBounds(quillObj, i);\n            ReformatQuillFont(quillObj, bounds.lowerBound, bounds.upperBound, \n                useFontArray, font, fontArr, errorCount);\n            errorCount++;\n        }\n    });\n}\n\n/**\n * @summary     This function finds the selection bounds of the null or \n *              undefined delta element so that it can be formated properly.W\n * @description This function assumes that opsIndex is in the quill content's \n *              delta.\n * \n * @param {int} opsIndex Index of the ops we want to convert to quill selection\n *                       bounds.\n */\nfunction FindSelectionBounds(quill, opsIndex)\n{   \n    var count = 0, lowerBound = 0, upperBound = 0;\n    quill.getContents().ops.forEach((d, i) => {\n        var prevCount = count;\n        count += d.insert.length;\n        if (i === opsIndex) {\n            lowerBound = prevCount;\n            upperBound = count;\n        }\n    });\n    return { lowerBound, upperBound };\n}\n\n/**\n * @summary     Reformats the font in the quill editor at index lower with \n *              length of (upper - lower).\n * \n * @param {int}     lower        The starting index of the text we need to reformat.\n * @param {int}     upper        The ending index of the text we need to reformat.\n * @param {boolean} useFontArray Determines whether quill reformats based on \n *                               _font or _fontArr \n */\nfunction ReformatQuillFont(quill, lower, upper, useFontArray, _font, fontArr, index) \n{\n    var font = 0;\n    if (useFontArray) font = fontArr[index];\n    else font = _font;\n    quill.formatText(lower, upper - lower, {\n        font: font,\n    });\n}\n\n/**\n * @summary     Adds event listeners to the quill object.\n * @description Adds the event listeners responsible for text change, font color,\n *              and font size.\n * \n * @param {Quill} quill The quill object we want to add event listeners to.\n */\nfunction AddQuillListeners({quill, sizelist, font, quillClass, fontArr, textElem, setTextElem})\n{\n    AddTextListener(quill, font, fontArr, textElem, (textElem) => {setTextElem(textElem);});\n    AddFontListener(quill, font);\n    AddFontColorListener(quill, font);\n    AddFontSizeListener(quill, font, sizelist, quillClass);\n}\n\n/**\n * @summary     Custom event listener that is triggered when the font option\n *              on Quill toolbar is selected.\n * @description Custom event listener that essentially performs the same \n *              action as the default event listener for fonts with the \n *              exception that it updated this._font for usage later in the\n *              program.\n */\nfunction AddFontListener(quill, font)\n{\n    quill.getModule('toolbar').addHandler('font', (value) => {\n        font.font = quill.getFormat(quill.getSelection()).font;\n        quill.format('font', value);\n    });\n}\n\n/**\n * @summary     Allows for the input of custom font colors.\n * @description Adds an event listener that allows for the addition of custom \n *              font colors.\n */\nfunction AddFontColorListener(quill, font)\n{\n    quill.getModule('toolbar').addHandler('color', (value) => {\n        if (value === 'custom-color') {\n            value = prompt('Enter Hex/RGB/RGBA');\n        }\n        font.font = quill.getFormat(quill.getSelection()).font;\n        quill.format('color', value);\n    });\n}\n\n/**\n * @summary     Allows for the input of custom font sizes.\n * @description Adds an event listener that allows for the addition of a custom\n *              font size.\n */\nfunction AddFontSizeListener(quill, font, sizeList, quillClass)\n{\n    quill.getModule('toolbar').addHandler('size', (value) => {\n        let list = ['10px', '11px', '12px', '13px', '14px', '15px', '16px', \n            '17px', '18px', '20px', 'custom-size'];\n\n        if (value === 'custom-size') {\n            value = prompt('Enter font size');\n            value += 'px';\n            list.push(value);\n\n            quill.getContents().ops.forEach(d => {\n                if (d.attributes !== undefined) {\n                    if (!list.find(elem => elem === d.attributes.size)) {\n                        list.push(d.attributes.size);\n                    }\n                }\n            });\n\n            RegisterFontSizes(quillClass, list);\n        }\n        font.font = quill.getFormat(quill.getSelection()).font;\n        quill.format('size', value);\n        UpdateSizeUI(value);\n    });\n}\n\n/**\n * @summary     Adds an event listener that is called when text is changed\n *              to the parameterized quill object.\n * @description Call's the quill object's on method with option 'text-change'\n *              and adds an event listener to it.\n */\nfunction AddTextListener(quill, font, fontArr, textElem, setTextElem)\n{\n    var timeout = {timeout: null};\n    quill.on('text-change', () => { \n        UpdateQuillFont(quill, false, font.font, fontArr);\n        UpdateTextListener(quill, timeout, textElem, (textElem) => (setTextElem(textElem))); \n    });\n}\n\n\n/**\n * @summary     Updates the selected text element.\n * @description An event listener that is called whenever the text within\n *              \"editor-container\" changes.\n */\nfunction UpdateTextListener(quill, timeout, textElem, setTextElem)\n{\n    if (timeout.timeout) return;\n    timeout.timeout = setTimeout(() => {\n        timeout.timeout = null;\n        HTMLToCanvas(quill, textElem, setTextElem);\n    }, 100);\n}\n\n/**\n * @summary     Converts DOM elements in the Quill editor to Konva.Image elements\n * @description Uses the html2canvas module to convert DOM elements located \n *              within the body into Konva.Image elements.\n */\nfunction HTMLToCanvas(quill, textElem, setTextElem)\n{\n    /** \n     * Error check to ensure that Konva.js doesn't try to write an empty \n     * image to the canvas. If this occurs, the program will break so we \n     * need this error check here.\n     */\n    if (IsEditorEmpty(quill)) {\n        quill.format('font', '900-museo');\n        return;\n    }\n\n    /**\n     * Error check to ensure that program does not try to convert Quill contents\n     * when the editor is closed. This usually occurs after the component unmounts.\n     * I'm not 100% sure why, but my thought process is that right before the Quill\n     * editor gets removed, the contents are cleared which triggers this method.\n     */\n    if (document.querySelector('.ql-editor') === null) return;\n\n    // Gets the text in the quill editor \n    var qlEditor = document.querySelector('.ql-editor').cloneNode(true);\n    qlEditor.style.padding = 0 + 'px';\n\n    // Creates a helper <div> to render text. This is necessary because with\n    // out it, text would not render properly. \n    var helper = document.createElement('div');\n    helper.style.visibility = 'false';\n    helper.style.position = 'absolute';\n    helper.id = 'ql-helper';\n    helper.appendChild(qlEditor);\n    document.getElementById('renderHelper').appendChild(helper);\n\n    // Update textElem in textHandler element\n    textElem.textElem = qlEditor;\n    DeltaToSpanCSS(quill, textElem);\n\n    // Calling html2canvas and converting the quill editor contents into\n    // a Konva.Image.\n    html2canvas(helper, {\n        backgroundColor: null,\n        scrollY: -(window.scrollY),\n    }).then((image) => {\n        // Update the <canvas> with the new text image... NOTE that his occurs\n        // as soon as the change is detected while the actual textElement (in\n        // infographic) is not updated until the text editor is removed.\n        textElem.image.image(image);\n\n        // Create a new text element and pass it to InfographicEditor\n        var newElem = {\n            textElem: textElem.textElem,\n            group: textElem.group,\n            image: textElem.image,\n            spanCSS: textElem.spanCSS\n        };\n        setTextElem(newElem, image);\n    });\n    helper.remove();\n}\n\n/**\n * @summary     Converts the Quill Delta into a spanCSS element.\n * @description Iterates through the contents of the Quill editor, which is\n *              in the form of a delta, and converts each element into an \n *              object of spanCSS.\n */\nfunction DeltaToSpanCSS(quill, textElem)\n{\n    var attributeCount = 0;\n    var cssList = [];\n    quill.getContents().ops.forEach((d, i) => {\n        if (d.attributes && d.insert !== '\\n') {\n            var elem = {\n                fontFamily: (d.attributes) ? d.attributes.font : '900-museo',\n                fontSize: (d.attributes) ? d.attributes.size : '10px',\n                textColor: (d.attributes) ? d.attributes.color : 'black',\n                lineHeight: (d.attributes) ? d.attributes.lineheight : '1.0',\n                align: (d.attributes) ? quill.getFormat().align : 'left'\n            };\n            cssList[attributeCount] = elem;\n            attributeCount++;\n        }\n    });\n    textElem.spanCSS = cssList; \n}\n\n/**\n * @summary Determines if quill editor is empty.\n * @returns True if empty and false if not empty.\n */\nfunction IsEditorEmpty(quill)\n{\n    return (quill.getContents().ops[0].insert === '\\n')\n}\n\nexport { QuillEditor };"]},"metadata":{},"sourceType":"module"}