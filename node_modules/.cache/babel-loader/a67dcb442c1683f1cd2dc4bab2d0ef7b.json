{"ast":null,"code":"// Cullen, Riley\n// GraphicsHandler.js\n// July 19, 2021\nimport { ArrowHeader, RectangleHeader, RibbonHeader } from \"../Headers\";\nimport { MessageBubble } from \"../ToolTips\";\n\nclass GraphicsHandler {\n  constructor() {\n    this._handler = [];\n    this._curr = -1;\n  }\n  /**\n   * @summary     Adds a graphic element to the handler.\n   * @description Creates a JSON object connecting the type, graphic, and group\n   *              in one location and adds that JSON object to the handler.\n   * \n   * @param {string}      type    The type of graphic element. This can either\n   *                              be 'image', 'icon', or 'header.'\n   * @param {misc}        graphic The graphic element that is added to the \n   *                              infographic. Note that this can either be a\n   *                              Konva.Image (for images and SVGs), a Konva.\n   *                              Text (for icons), or a Header object.\n   * @param {Konva.Group} group   The group that the element will be added to.\n   */\n\n\n  AddGraphic({\n    type,\n    graphic,\n    group\n  }) {\n    this.UpdateGraphic({\n      id: ++this._curr,\n      type: type,\n      graphic: graphic,\n      group: group\n    });\n  }\n  /**\n   * @summary     Removes the element at id from the handler.\n   * @summary     Calls the graphic object's remove (or destroy) function, which\n   *              removes the instance from the infographic. Then, the instance\n   *              is removed from the handler.\n   * @param {int} id The index of the handler we want to access.\n   */\n\n\n  RemoveHandlerElem(id) {\n    if (id > this._curr || id < 0) return;\n\n    switch (this._handler[id].type) {\n      case 'header':\n        this._handler[id].graphic.Remove();\n\n        break;\n\n      case 'image':\n        this._handler[id].graphic.destroy();\n\n        break;\n\n      case 'icon':\n        this._handler[id].group.destroy();\n\n        break;\n\n      default:\n        break;\n    }\n\n    this._handler.splice(id, 1);\n\n    this._curr--;\n\n    this._UpdateHandlerId();\n  }\n  /**\n   * @summary Return the current index of the handler to the user.\n   * @returns An integer representing the current index of the handler.\n   */\n\n\n  GetId() {\n    return this._curr;\n  }\n  /**\n   * @summary Returns the type of the element at id to the user.\n   * \n   * @param {int} id The index of the handler we want to access.\n   * \n   * @returns A string representing the type of graphic element at index id.\n   */\n\n\n  GetType(id) {\n    return this._handler[id].type;\n  }\n\n  GetSettings(id) {\n    let obj = this._handler[id];\n\n    switch (obj.type) {\n      case 'icon':\n        return obj.graphic.getAttrs();\n\n      case 'image':\n        return obj.graphic.getAttrs();\n\n      case 'header':\n        return obj.graphic.GetSettings();\n\n      default:\n        break;\n    }\n  }\n  /**\n   * @summary     Updates the handler at index id.\n   * @description Replaces the handler at index id with the parameterized values.\n   */\n\n\n  UpdateGraphic({\n    id,\n    type,\n    graphic,\n    group\n  }) {\n    this._handler[id] = {\n      type: type,\n      graphic: graphic,\n      group: group\n    };\n    group.setAttr('id', id);\n    group.setAttr('name', 'Graphic ' + type);\n\n    switch (type) {\n      case 'header':\n        graphic.CreateHeader();\n        break;\n\n      case 'tooltip':\n        graphic.CreateToolTip();\n        break;\n\n      case 'icon':\n        group.add(graphic);\n        break;\n\n      default:\n        break;\n    }\n\n    ;\n  }\n\n  UpdateGraphicSettings({\n    id,\n    settings\n  }) {\n    let elem = this._handler[id];\n\n    switch (elem.type) {\n      case 'header':\n        elem.graphic.UpdateHeader(settings);\n        elem.graphic.CreateHeader();\n        break;\n\n      case 'image':\n        elem.graphic.clearCache();\n        elem.graphic.cache();\n        elem.graphic.setAttrs(settings);\n        break;\n\n      case 'icon':\n        elem.graphic.setAttrs(settings);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  UpdateLayering(id, action) {\n    let group = this._handler[id].group;\n\n    switch (action) {\n      case 'move-to-back':\n        group.moveToBottom();\n        break;\n\n      case 'move-to-front':\n        group.moveToTop();\n        break;\n\n      case 'bring-forward':\n        group.moveUp();\n        break;\n\n      case 'send-backward':\n        group.moveDown();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  UpdateDisplayContent(id, element, infogSettings) {\n    let entry = this._handler[id];\n\n    switch (entry.type) {\n      case 'icon':\n        entry.graphic.text(String.fromCharCode(parseInt(element, 16)));\n        break;\n\n      case 'header':\n        let attrs = this._GetCommonAttrs(entry.graphic);\n\n        switch (element) {\n          case 'ribbon-header':\n            entry.graphic = new RibbonHeader({\n              colorOne: attrs.colorOne,\n              colorTwo: attrs.colorTwo,\n              group: attrs.group,\n              hWidth: attrs.width,\n              hHeight: attrs.height,\n              iWidth: infogSettings.width,\n              iHeight: infogSettings.height\n            });\n            break;\n\n          case 'rectangle-header':\n            entry.graphic = new RectangleHeader({\n              x: attrs.x,\n              y: attrs.y,\n              width: attrs.width,\n              height: attrs.height,\n              cornerRadius: attrs.cornerRadius,\n              group: attrs.group\n            });\n            break;\n\n          case 'message-bubble':\n            entry.graphic = new MessageBubble(attrs.group, attrs.width, attrs.height, attrs.colorOne, attrs.x, attrs.y);\n            break;\n\n          default:\n            break;\n        }\n\n        ;\n        entry.graphic.CreateHeader();\n        break;\n\n      default:\n        break;\n    }\n  }\n  /**\n   * @summary     Updates the ids of each object in the handler.\n   * @description See summary. This function is typically called when an object\n   *              is removed from the handler. In this case, when the array elements\n   *              are restructured, the groups (which are used to access them on\n   *              the infog) must be explicitly updated.\n   */\n\n\n  _UpdateHandlerId() {\n    this._handler.forEach((d, i) => {\n      d.group.setAttr('id', i);\n    });\n  }\n\n  _GetCommonAttrs(graphicElement) {\n    let attrs = graphicElement.GetAttrs();\n\n    if (graphicElement instanceof RibbonHeader) {\n      return {\n        x: 0,\n        y: 0,\n        width: attrs.hWidth,\n        height: attrs.hHeight,\n        colorOne: attrs.colorOne,\n        colorTwo: attrs.colorTwo,\n        group: attrs.group,\n        cornerRadius: 0\n      };\n    } else if (graphicElement instanceof RectangleHeader) {\n      return {\n        x: attrs.x,\n        y: attrs.y,\n        width: attrs.width,\n        height: attrs.height,\n        cornerRadius: attrs.cornerRadius,\n        group: attrs.group,\n        colorOne: attrs.fill,\n        colorTwo: '#999999'\n      };\n    } else if (graphicElement instanceof ArrowHeader) {\n      return {\n        x: attrs.x,\n        y: attrs.y,\n        width: attrs.width,\n        height: attrs.height,\n        colorOne: attrs.backgroundColor,\n        colorTwo: attrs.borderColor,\n        group: attrs.group,\n        cornerRadius: 0\n      };\n    } else if (graphicElement instanceof MessageBubble) {\n      return {\n        x: attrs.x,\n        y: attrs.y,\n        width: attrs.width,\n        height: attrs.height,\n        colorOne: attrs.color,\n        colorTwo: '#999999',\n        group: attrs.group,\n        cornerRadius: 0\n      };\n    }\n  }\n\n}\n\nexport { GraphicsHandler };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Handlers/GraphicsHandler.js"],"names":["ArrowHeader","RectangleHeader","RibbonHeader","MessageBubble","GraphicsHandler","constructor","_handler","_curr","AddGraphic","type","graphic","group","UpdateGraphic","id","RemoveHandlerElem","Remove","destroy","splice","_UpdateHandlerId","GetId","GetType","GetSettings","obj","getAttrs","setAttr","CreateHeader","CreateToolTip","add","UpdateGraphicSettings","settings","elem","UpdateHeader","clearCache","cache","setAttrs","UpdateLayering","action","moveToBottom","moveToTop","moveUp","moveDown","UpdateDisplayContent","element","infogSettings","entry","text","String","fromCharCode","parseInt","attrs","_GetCommonAttrs","colorOne","colorTwo","hWidth","width","hHeight","height","iWidth","iHeight","x","y","cornerRadius","forEach","d","i","graphicElement","GetAttrs","fill","backgroundColor","borderColor","color"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// GraphicsHandler.js\n// July 19, 2021\n\nimport { ArrowHeader, RectangleHeader, RibbonHeader } from \"../Headers\";\nimport { MessageBubble } from \"../ToolTips\";\n\nclass GraphicsHandler\n{\n    constructor()\n    {\n        this._handler = [];\n        this._curr = -1;\n    }\n\n    /**\n     * @summary     Adds a graphic element to the handler.\n     * @description Creates a JSON object connecting the type, graphic, and group\n     *              in one location and adds that JSON object to the handler.\n     * \n     * @param {string}      type    The type of graphic element. This can either\n     *                              be 'image', 'icon', or 'header.'\n     * @param {misc}        graphic The graphic element that is added to the \n     *                              infographic. Note that this can either be a\n     *                              Konva.Image (for images and SVGs), a Konva.\n     *                              Text (for icons), or a Header object.\n     * @param {Konva.Group} group   The group that the element will be added to.\n     */\n    AddGraphic({type, graphic, group})\n    {\n        this.UpdateGraphic({\n            id: ++this._curr,\n            type: type,\n            graphic: graphic,\n            group: group\n        });\n    }\n\n    /**\n     * @summary     Removes the element at id from the handler.\n     * @summary     Calls the graphic object's remove (or destroy) function, which\n     *              removes the instance from the infographic. Then, the instance\n     *              is removed from the handler.\n     * @param {int} id The index of the handler we want to access.\n     */\n    RemoveHandlerElem(id)\n    {\n        if (id > this._curr || id < 0) return;\n        switch(this._handler[id].type) {\n            case 'header':\n                this._handler[id].graphic.Remove();\n                break;\n            case 'image':\n                this._handler[id].graphic.destroy();\n                break;\n            case 'icon':\n                this._handler[id].group.destroy();\n                break;\n            default: \n                break;\n        }\n\n        this._handler.splice(id, 1);\n        this._curr--;\n        this._UpdateHandlerId();\n    }\n    \n    /**\n     * @summary Return the current index of the handler to the user.\n     * @returns An integer representing the current index of the handler.\n     */\n    GetId() { return this._curr; }\n\n    /**\n     * @summary Returns the type of the element at id to the user.\n     * \n     * @param {int} id The index of the handler we want to access.\n     * \n     * @returns A string representing the type of graphic element at index id.\n     */\n    GetType(id) { return this._handler[id].type; }\n\n    GetSettings(id)\n    {\n        let obj = this._handler[id];\n        switch(obj.type) {\n            case 'icon':\n                return obj.graphic.getAttrs();\n            case 'image':\n                return obj.graphic.getAttrs();\n            case 'header':\n                return obj.graphic.GetSettings();\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @summary     Updates the handler at index id.\n     * @description Replaces the handler at index id with the parameterized values.\n     */\n    UpdateGraphic({id, type, graphic, group})\n    {\n        this._handler[id] = {\n            type: type,\n            graphic: graphic,\n            group: group,\n        }\n        group.setAttr('id', id);\n        group.setAttr('name', 'Graphic ' + type)\n\n        switch(type) {\n            case 'header':\n                graphic.CreateHeader();\n                break;\n            case 'tooltip':\n                graphic.CreateToolTip();\n                break;\n            case 'icon': \n                group.add(graphic);\n                break;\n            default:\n                break;\n        }; \n    }\n\n    UpdateGraphicSettings({id, settings})\n    {\n        let elem = this._handler[id];\n        switch(elem.type) {\n            case 'header':\n                elem.graphic.UpdateHeader(settings);\n                elem.graphic.CreateHeader();\n                break;\n            case 'image':\n                elem.graphic.clearCache();\n                elem.graphic.cache();\n                elem.graphic.setAttrs(settings);\n                break;\n            case 'icon':\n                elem.graphic.setAttrs(settings);\n                break;\n            default:\n                break;\n        }\n    }\n\n    UpdateLayering(id, action) \n    {\n        let group = this._handler[id].group;\n        switch(action) {\n            case 'move-to-back':\n                group.moveToBottom();\n                break;\n            case 'move-to-front':\n                group.moveToTop();\n                break;\n            case 'bring-forward':\n                group.moveUp();\n                break;\n            case 'send-backward':\n                group.moveDown();\n                break;\n            default:\n                break;\n        }\n    }\n\n    UpdateDisplayContent(id, element, infogSettings)\n    {\n        let entry = this._handler[id];\n        switch(entry.type) {\n            case 'icon':\n                entry.graphic.text(String.fromCharCode(parseInt(element, 16)));\n                break;\n            case 'header':\n                let attrs = this._GetCommonAttrs(entry.graphic);\n                switch(element) {\n                    case 'ribbon-header':\n                        entry.graphic = new RibbonHeader({\n                            colorOne: attrs.colorOne,\n                            colorTwo: attrs.colorTwo,\n                            group: attrs.group,\n                            hWidth: attrs.width,\n                            hHeight: attrs.height,\n                            iWidth: infogSettings.width,\n                            iHeight: infogSettings.height,\n                        });\n                        break;\n                    case 'rectangle-header':\n                        entry.graphic = new RectangleHeader({\n                            x: attrs.x,\n                            y: attrs.y,\n                            width: attrs.width,\n                            height: attrs.height,\n                            cornerRadius: attrs.cornerRadius,\n                            group: attrs.group,\n                        });\n                        break;\n                    case 'message-bubble':\n                        entry.graphic = new MessageBubble(attrs.group, attrs.width,\n                            attrs.height, attrs.colorOne, attrs.x, attrs.y);\n                        break;\n                    default: \n                        break;\n                };\n                entry.graphic.CreateHeader();\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @summary     Updates the ids of each object in the handler.\n     * @description See summary. This function is typically called when an object\n     *              is removed from the handler. In this case, when the array elements\n     *              are restructured, the groups (which are used to access them on\n     *              the infog) must be explicitly updated.\n     */\n    _UpdateHandlerId()\n    {\n        this._handler.forEach((d, i) => {\n            d.group.setAttr('id', i);\n        });\n    }\n\n    _GetCommonAttrs(graphicElement)\n    {\n        let attrs = graphicElement.GetAttrs();\n        if (graphicElement instanceof RibbonHeader) {\n            return {\n                x: 0,\n                y: 0,\n                width: attrs.hWidth,\n                height: attrs.hHeight,\n                colorOne: attrs.colorOne,\n                colorTwo: attrs.colorTwo,\n                group: attrs.group,\n                cornerRadius: 0,\n            };\n        } else if (graphicElement instanceof RectangleHeader) {\n            return {\n                x: attrs.x,\n                y: attrs.y,\n                width: attrs.width,\n                height: attrs.height,\n                cornerRadius: attrs.cornerRadius,\n                group: attrs.group,\n                colorOne: attrs.fill,\n                colorTwo: '#999999',\n            };\n        } else if (graphicElement instanceof ArrowHeader) {\n            return {\n                x: attrs.x,\n                y: attrs.y,\n                width: attrs.width,\n                height: attrs.height,\n                colorOne: attrs.backgroundColor,\n                colorTwo: attrs.borderColor,\n                group: attrs.group,\n                cornerRadius: 0\n            };\n        } else if (graphicElement instanceof MessageBubble) {\n            return {\n                x: attrs.x,\n                y: attrs.y,\n                width: attrs.width,\n                height: attrs.height,\n                colorOne: attrs.color,\n                colorTwo: '#999999',\n                group: attrs.group,\n                cornerRadius: 0,\n            };\n        }\n    }\n}\n\nexport { GraphicsHandler };"]},"metadata":{},"sourceType":"module"}