{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/InfographicEditor.js\";\n// Cullen, Riley\n// InfographicEditor.js\n// June 28, 2021\nimport React from 'react';\nimport { CanvasContainer } from './CanvasContainer';\nimport { QuillEditor, WaffleEditor, BarEditor, IconBarEditor, PieEditor, LineEditor, BackgroundElementEditor, ImageEditor, IconEditor, Chart, Icon, BackgroundElement, Image, Background } from './Editors/index';\nimport { Toolbar } from './Toolbar/Toolbar';\nimport '../../css/React/InfographicEditor.css';\n/**\n * Container for all of the react components related to editing infographics.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InfographicEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentEditor: 'none',\n      toolbarOptions: 'none',\n      toolbarContent: 'insert',\n      chartData: 0,\n      cSettings: 0,\n      dSettings: 0,\n      graphicSettings: 0,\n      isRemoving: false,\n      isDownloading: false,\n      layerAction: 'none',\n      insertType: 'none',\n      insertElement: 'none',\n      updateType: 'none',\n      updateElement: 'none',\n      infogTextElem: 0,\n      backgroundSettings: 0\n    };\n    this._editorTextElem = 0;\n    this._infogDimensions = {\n      width: 582,\n      height: 582\n    };\n    this._clearSelection = false;\n  }\n\n  render() {\n    let currentEditor = this._SelectEditor(),\n        editorWindowHeight = this._DetermineEditorMenuHeight(),\n        editorWindowBkgColor = this.state.currentEditor === 'none' ? 'white' : '#ECECEC';\n\n    let editorWindowContent = this._GetEditorWindowContent();\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upper-container\",\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {\n          currentEditor: this.state.currentEditor,\n          toolbarContent: this.state.toolbarContent,\n          toolbarOptions: this.state.toolbarOptions,\n          setToolbarContent: content => {\n            this._SetToolbarContent(content);\n          },\n          displayHome: () => {\n            this.props.displayHome();\n          },\n          canvasToggle: setting => {\n            this._CanvasToggle(setting);\n          },\n          editorHandler: editor => {\n            this._SetCurrentEditor(editor);\n          },\n          downloadToggle: () => {\n            this._ToggleDownload();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lower-container\",\n        children: /*#__PURE__*/_jsxDEV(CanvasContainer, {\n          infographic: this.props.currentInfographic,\n          editorHandler: editor => {\n            this._SetCurrentEditor(editor);\n          },\n          textHandler: textElem => {\n            this._SetInfogTextElem(textElem);\n          },\n          chartHandler: (data, cSettings, dSettings) => {\n            this._ChartHandler(data, cSettings, dSettings);\n          },\n          graphicHandler: settings => {\n            this._GraphicHandler(settings);\n          },\n          dimensionHandler: dims => {\n            this._SetInfogDimensions(dims);\n          },\n          textElem: this._editorTextElem,\n          chartData: this.state.chartData,\n          cSettings: this.state.cSettings,\n          dSettings: this.state.dSettings,\n          graphicSettings: this.state.graphicSettings,\n          isRemoving: this.state.isRemoving,\n          isDownloading: this.state.isDownloading,\n          clearSelection: this._clearSelection,\n          layerAction: this.state.layerAction,\n          insertType: this.state.insertType,\n          insertElement: this.state.insertElement,\n          updateType: this.state.updateType,\n          updateElement: this.state.updateElement,\n          backgroundSettings: this.state.backgroundSettings,\n          style: {\n            flex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-vertical-divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-menu\",\n          style: {\n            height: editorWindowHeight,\n            backgroundColor: editorWindowBkgColor\n          },\n          children: editorWindowContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), currentEditor]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n  componentDidUpdate() {\n    if (this.state.isRemoving) this.setState({\n      isRemoving: false\n    });\n    if (this.state.isDownloading) this.setState({\n      isDownloading: false\n    });\n    if (this.state.layerAction !== 'none') this.setState({\n      layerAction: 'none'\n    });\n    if (this.state.insertElement !== 'none') this.setState({\n      insertElement: 'none'\n    });\n    if (this.state.insertType !== 'none') this.setState({\n      insertType: 'none'\n    });\n    if (this.state.backgroundSettings !== 0) this.setState({\n      backgroundSettings: 0\n    });\n    if (this.state.updateType !== 'none') this.setState({\n      updateType: 'none'\n    });\n    if (this.state.updateElement !== 'none') this.setState({\n      updateElement: 'none'\n    });\n    this._clearSelection = false;\n  }\n\n  _DetermineEditorMenuHeight() {\n    switch (this.state.currentEditor) {\n      case 'none':\n        return '100%';\n\n      case 'insert-chart':\n      case 'insert-icon':\n      case 'insert-text':\n      case 'insert-image':\n      case 'insert-background-elem':\n      case 'edit-background':\n      case 'header-editor':\n      case 'image-editor':\n      case 'icon-editor':\n      case 'text-editor':\n        return '100px';\n    }\n\n    return '150px';\n  }\n  /**\n   * @summary     Updates the current editor.\n   * @param {string} editor The new editor.\n   */\n\n\n  _SetCurrentEditor(editor) {\n    let expr = editor === 'insert-chart' || editor === 'insert-icon' || editor === 'insert-text' || editor === 'insert-image' || editor === 'insert-background-elem' || editor === 'edit-background';\n\n    this._RemoveUnderline(this.state.toolbarContent);\n\n    this.setState({\n      currentEditor: editor,\n      toolbarOptions: this._GetToolbarOptions(editor),\n      toolbarContent: this._GetToolbarContent(expr, editor)\n    });\n\n    if (editor === 'none') {\n      this.setState({\n        graphicSettings: 0\n      });\n    } else if (editor === 'insert-text') {\n      this._ToggleInsert('text', 'Sample Text');\n    }\n\n    if (expr) this._clearSelection = true;\n    this._editorTextElem = 0;\n  }\n\n  _GetToolbarOptions(editor) {\n    if (editor.slice(0, 6) === 'update') return this.state.toolbarOptions;\n    return editor;\n  }\n\n  _GetToolbarContent(expr, editor) {\n    if (expr || editor === 'none') {\n      return 'insert';\n    } else if (editor.slice(0, 6) === 'update') {\n      return this.state.currentEditor;\n    }\n\n    return editor;\n  }\n  /**\n   * @summary     Updates the current text element.\n   * @param {JSON} textElem The new text element.\n   */\n\n\n  _SetInfogTextElem(textElem) {\n    this.setState({\n      infogTextElem: textElem\n    });\n  }\n  /**\n   * @summary     Updates the current text element.\n   * @param {JSON} textElem The new text element.\n   */\n\n\n  _SetEditorTextElem(textElem) {\n    this._editorTextElem = textElem;\n  }\n\n  _GraphicHandler(settings) {\n    this.setState({\n      graphicSettings: settings\n    });\n  }\n\n  _ToggleDownload() {\n    this.setState({\n      isDownloading: true\n    });\n  }\n\n  _ToggleInsert(type, element) {\n    this.setState({\n      insertType: type,\n      insertElement: element\n    });\n  }\n\n  _ToggleUpdate(type, element) {\n    this.setState({\n      updateType: type,\n      updateElement: element\n    });\n  }\n\n  _ToggleBackgroundSettings(settings) {\n    this.setState({\n      backgroundSettings: settings\n    });\n  }\n  /**\n   * @summary Updates _infogDimensions.\n   * @param {JSON} dimensions JSON object containing a width and height attribute.\n   */\n\n\n  _SetInfogDimensions(dimensions) {\n    this._infogDimensions = {\n      width: dimensions.width,\n      height: dimensions.height\n    };\n  }\n\n  _ChartHandler(data, cSettings, dSettings) {\n    this.setState({\n      chartData: data,\n      cSettings: cSettings,\n      dSettings: dSettings\n    });\n  }\n  /**\n   * @summary Updates chartData.\n   * @param {misc} chartData Layout of data depends on which chart we are dealing with.\n   */\n\n\n  _SetChartData(chartData) {\n    this.setState({\n      chartData: chartData\n    });\n  }\n\n  _SetChartSettings(settings) {\n    this.setState({\n      cSettings: settings\n    });\n  }\n\n  _SetDecoratorSettings(settings) {\n    this.setState({\n      dSettings: settings\n    });\n  }\n  /**\n   * @summary Selects the current editor being displayed.\n   * @returns A react component\n   */\n\n\n  _SelectEditor() {\n    if (this.state.currentEditor === 'text-editor') {\n      return /*#__PURE__*/_jsxDEV(QuillEditor, {\n        textElem: this.state.infogTextElem,\n        setTextElem: textElem => {\n          this._SetEditorTextElem(textElem);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.currentEditor === 'waffle-editor') {\n      return /*#__PURE__*/_jsxDEV(WaffleEditor, {\n        chartData: this.state.chartData,\n        cSettings: this.state.cSettings,\n        dSettings: this.state.dSettings,\n        setChartData: data => {\n          this._SetChartData(data);\n        },\n        setChartSettings: settings => {\n          this._SetChartSettings(settings);\n        },\n        setDecoratorSettings: settings => {\n          this._SetDecoratorSettings(settings);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.currentEditor === 'bar-editor' || this.state.currentEditor === 'stacked-bar-editor') {\n      return /*#__PURE__*/_jsxDEV(BarEditor, {\n        type: this.state.currentEditor,\n        chartData: this.state.chartData,\n        cSettings: this.state.cSettings,\n        dSettings: this.state.dSettings,\n        setChartData: data => {\n          this._SetChartData(data);\n        },\n        setChartSettings: settings => {\n          this._SetChartSettings(settings);\n        },\n        setDecoratorSettings: settings => {\n          this._SetDecoratorSettings(settings);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.currentEditor === 'pie-editor' || this.state.currentEditor === 'donut-editor') {\n      return /*#__PURE__*/_jsxDEV(PieEditor, {\n        type: this.state.currentEditor,\n        chartData: this.state.chartData,\n        cSettings: this.state.cSettings,\n        dSettings: this.state.dSettings,\n        setChartData: data => {\n          this._SetChartData(data);\n        },\n        setChartSettings: settings => {\n          this._SetChartSettings(settings);\n        },\n        setDecoratorSettings: settings => {\n          this._SetDecoratorSettings(settings);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.currentEditor === 'image-editor') {\n      return /*#__PURE__*/_jsxDEV(ImageEditor, {\n        settings: this.state.graphicSettings,\n        setGraphicSettings: settings => {\n          this._GraphicHandler(settings);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.currentEditor === 'icon-editor') {\n      return /*#__PURE__*/_jsxDEV(IconEditor, {\n        settings: this.state.graphicSettings,\n        setGraphicSettings: settings => {\n          this._GraphicHandler(settings);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.currentEditor === 'header-editor') {\n      return /*#__PURE__*/_jsxDEV(BackgroundElementEditor, {\n        settings: this.state.graphicSettings,\n        setGraphicSettings: settings => {\n          this._GraphicHandler(settings);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.currentEditor === 'line-editor') {\n      return /*#__PURE__*/_jsxDEV(LineEditor, {\n        chartData: this.state.chartData,\n        cSettings: this.state.cSettings,\n        dSettings: this.state.dSettings,\n        setChartData: data => {\n          this._SetChartData(data);\n        },\n        setChartSettings: settings => {\n          this._SetChartSettings(settings);\n        },\n        setDecoratorSettings: settings => {\n          this._SetDecoratorSettings(settings);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.currentEditor === 'icon-bar-editor') {\n      return /*#__PURE__*/_jsxDEV(IconBarEditor, {\n        chartData: this.state.chartData,\n        cSettings: this.state.cSettings,\n        dSettings: this.state.dSettings,\n        setChartData: data => {\n          this._SetChartData(data);\n        },\n        setChartSettings: settings => {\n          this._SetChartSettings(settings);\n        },\n        setDecoratorSettings: settings => {\n          this._SetDecoratorSettings(settings);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 20\n      }, this);\n    } else if (this.state.currentEditor === 'insert-chart' || this.state.currentEditor === 'update-chart') {\n      let handler = this.state.currentEditor === 'insert-chart' ? (type, element) => {\n        this._ToggleInsert(type, element);\n      } : (type, element) => {\n        this._ToggleUpdate(type, element);\n      };\n      return /*#__PURE__*/_jsxDEV(Chart, {\n        toggleInsert: (type, element) => {\n          handler(type, element);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 21\n      }, this);\n    } else if (this.state.currentEditor === 'insert-icon' || this.state.currentEditor === 'update-icon') {\n      let handler = this.state.currentEditor === 'insert-icon' ? (type, element) => {\n        this._ToggleInsert(type, element);\n      } : (type, element) => {\n        this._ToggleUpdate(type, element);\n      };\n      return /*#__PURE__*/_jsxDEV(Icon, {\n        toggleInsert: (type, element) => {\n          handler(type, element);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 21\n      }, this);\n    } else if (this.state.currentEditor === 'insert-background-elem' || this.state.currentEditor === 'update-background-elem') {\n      let handler = this.state.currentEditor === 'insert-background-elem' ? (type, element) => {\n        this._ToggleInsert(type, element);\n      } : (type, element) => {\n        this._ToggleUpdate(type, element);\n      };\n      return /*#__PURE__*/_jsxDEV(BackgroundElement, {\n        toggleInsert: (type, element) => {\n          handler(type, element);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 21\n      }, this);\n    } else if (this.state.currentEditor === 'insert-image') {\n      return /*#__PURE__*/_jsxDEV(Image, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 21\n      }, this);\n    } else if (this.state.currentEditor === 'edit-background') {\n      return /*#__PURE__*/_jsxDEV(Background, {\n        toggleBackgroundSettings: settings => {\n          this._ToggleBackgroundSettings(settings);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 21\n      }, this);\n    }\n\n    return false;\n  }\n\n  _CanvasToggle(setting) {\n    if (setting === 'remove') {\n      this._ToggleRemove();\n    } else {\n      this._ToggleLayerAction(setting);\n    }\n  }\n\n  _ToggleRemove() {\n    this.setState({\n      isRemoving: true\n    });\n  }\n\n  _ToggleLayerAction(layerAction) {\n    this.setState({\n      layerAction: layerAction\n    });\n  }\n  /**\n   * @summary     Sets up the toolbar's contents.\n   * @description A private function that removes the underline from the currently\n   *              selected option in the upper toolbar and adds an underline \n   *              to the newly selected item. This function also updates the \n   *              state of the toolbarContent variable.\n   * \n   * @param {string} content \n   * @returns \n   */\n\n\n  _SetToolbarContent(content) {\n    if (content === this.state.toolbarContent) return;\n\n    this._RemoveUnderline(this.state.toolbarContent);\n\n    this.setState({\n      toolbarContent: content\n    });\n  }\n\n  _RemoveUnderline(name) {\n    // Remove underline \n    let selectedElem = document.getElementById('toolbar-' + name);\n    selectedElem.classList.remove('selected');\n  }\n\n  _GetEditorWindowContent() {\n    if (this.state.currentEditor === 'none') {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"editor-placeholder-text\",\n        children: \"Double click on an element to begin editing!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }, this);\n    } else {\n      let text = '';\n\n      switch (this.state.currentEditor) {\n        case 'insert-chart':\n          text = 'Chart Library';\n          break;\n\n        case 'update-icon':\n        case 'insert-icon':\n          text = 'Icon Library';\n          break;\n\n        case 'insert-image':\n          text = 'Image Library';\n          break;\n\n        case 'insert-background-elem':\n          text = 'Background Element Library';\n          break;\n\n        case 'edit-background':\n          text = 'Background Editor';\n          break;\n\n        case 'text-editor':\n          text = 'Text Editor';\n          break;\n\n        case 'waffle-editor':\n          text = 'Waffle Chart Editor';\n          break;\n\n        case 'pie-editor':\n          text = 'Pie Chart Editor';\n          break;\n\n        case 'bar-editor':\n          text = 'Bar Chart Editor';\n          break;\n\n        case 'stacked-bar-editor':\n          text = 'Stacked Bar Chart Editor';\n          break;\n\n        case 'line-editor':\n          text = 'Line Chart Editor';\n          break;\n\n        case 'icon-bar-editor':\n          text = 'Icon Bar Chart Editor';\n          break;\n\n        case 'donut-editor':\n          text = 'Donut Chart Editor';\n          break;\n\n        case 'image-editor':\n          text = 'Image Editor';\n          break;\n\n        case 'icon-editor':\n          text = 'Icon Editor';\n          break;\n\n        case 'header-editor':\n          text = 'Banner Editor';\n          break;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          fontSize: '20px',\n          position: 'relative',\n          top: '-8px'\n        },\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport { InfographicEditor };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/InfographicEditor.js"],"names":["React","CanvasContainer","QuillEditor","WaffleEditor","BarEditor","IconBarEditor","PieEditor","LineEditor","BackgroundElementEditor","ImageEditor","IconEditor","Chart","Icon","BackgroundElement","Image","Background","Toolbar","InfographicEditor","Component","constructor","props","state","currentEditor","toolbarOptions","toolbarContent","chartData","cSettings","dSettings","graphicSettings","isRemoving","isDownloading","layerAction","insertType","insertElement","updateType","updateElement","infogTextElem","backgroundSettings","_editorTextElem","_infogDimensions","width","height","_clearSelection","render","_SelectEditor","editorWindowHeight","_DetermineEditorMenuHeight","editorWindowBkgColor","editorWindowContent","_GetEditorWindowContent","content","_SetToolbarContent","displayHome","setting","_CanvasToggle","editor","_SetCurrentEditor","_ToggleDownload","currentInfographic","textElem","_SetInfogTextElem","data","_ChartHandler","settings","_GraphicHandler","dims","_SetInfogDimensions","flex","backgroundColor","componentDidUpdate","setState","expr","_RemoveUnderline","_GetToolbarOptions","_GetToolbarContent","_ToggleInsert","slice","_SetEditorTextElem","type","element","_ToggleUpdate","_ToggleBackgroundSettings","dimensions","_SetChartData","_SetChartSettings","_SetDecoratorSettings","handler","_ToggleRemove","_ToggleLayerAction","name","selectedElem","document","getElementById","classList","remove","text","fontSize","position","top"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// InfographicEditor.js\n// June 28, 2021\n\nimport React from 'react';\nimport {CanvasContainer} from './CanvasContainer';\nimport { QuillEditor, WaffleEditor, BarEditor, IconBarEditor, \n    PieEditor, LineEditor, BackgroundElementEditor, ImageEditor, IconEditor, \n    Chart, Icon, BackgroundElement, Image, Background }\n    from './Editors/index';\nimport { Toolbar } from './Toolbar/Toolbar';\n\nimport '../../css/React/InfographicEditor.css';\n\n/**\n * Container for all of the react components related to editing infographics.\n */\nclass InfographicEditor extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            currentEditor: 'none',\n            toolbarOptions: 'none',\n            toolbarContent: 'insert',\n            chartData: 0,\n            cSettings: 0,\n            dSettings: 0,\n            graphicSettings: 0,\n            isRemoving: false,\n            isDownloading: false,\n            layerAction: 'none',\n            insertType: 'none',\n            insertElement: 'none',\n            updateType: 'none',\n            updateElement: 'none',\n            infogTextElem: 0,\n            backgroundSettings: 0,\n        };\n        this._editorTextElem = 0;\n        this._infogDimensions = {\n            width: 582,\n            height: 582,\n        };\n        this._clearSelection = false;\n    }\n\n    render()\n    {\n        let currentEditor = this._SelectEditor(),\n            editorWindowHeight = this._DetermineEditorMenuHeight(),\n            editorWindowBkgColor = (this.state.currentEditor === 'none') ? \n                'white' : '#ECECEC';\n\n        let editorWindowContent = this._GetEditorWindowContent();\n        return (\n            <div className='editor-container'>\n                <div className='upper-container'>\n                    <Toolbar \n                        currentEditor={this.state.currentEditor}\n                        toolbarContent={this.state.toolbarContent}\n                        toolbarOptions={this.state.toolbarOptions}\n                        setToolbarContent={(content) => { this._SetToolbarContent(content); }}\n                        displayHome={() => { this.props.displayHome(); }}\n                        canvasToggle={(setting) => { this._CanvasToggle(setting); }} \n                        editorHandler={(editor) => { this._SetCurrentEditor(editor); }}\n                        downloadToggle={() => { this._ToggleDownload(); }}/>\n                </div>\n                <div className='lower-container'>\n                    <CanvasContainer \n                        infographic={this.props.currentInfographic}\n                        editorHandler={(editor) => { this._SetCurrentEditor(editor); }}\n                        textHandler={(textElem) => { this._SetInfogTextElem(textElem); }}\n                        chartHandler={(data, cSettings, dSettings) => { this._ChartHandler(data, cSettings, dSettings); }}\n                        graphicHandler={(settings) => { this._GraphicHandler(settings); }}\n                        dimensionHandler={(dims) => { this._SetInfogDimensions(dims); }}\n                        textElem={this._editorTextElem}\n                        chartData={this.state.chartData}\n                        cSettings={this.state.cSettings}\n                        dSettings={this.state.dSettings}\n                        graphicSettings={this.state.graphicSettings}\n                        isRemoving={this.state.isRemoving}\n                        isDownloading={this.state.isDownloading}\n                        clearSelection={this._clearSelection}\n                        layerAction={this.state.layerAction}\n                        insertType={this.state.insertType}\n                        insertElement={this.state.insertElement}\n                        updateType={this.state.updateType}\n                        updateElement={this.state.updateElement}\n                        backgroundSettings={this.state.backgroundSettings}\n                        style={{flex: 1}}\n                    />\n                </div>\n                <div className='editor'>\n                    <div className='editor-vertical-divider'></div>\n                    <div className='editor-menu'\n                        style={{\n                            height: editorWindowHeight, \n                            backgroundColor: editorWindowBkgColor}}>\n                        {editorWindowContent}\n                    </div>\n                    {currentEditor}\n                </div>\n            </div>\n        );\n    }\n\n    componentDidUpdate()\n    { \n        if (this.state.isRemoving) this.setState({isRemoving: false});\n        if (this.state.isDownloading) this.setState({isDownloading: false});\n        if (this.state.layerAction !== 'none') this.setState({layerAction: 'none'});\n        if (this.state.insertElement !== 'none') this.setState({insertElement: 'none'});\n        if (this.state.insertType !== 'none') this.setState({insertType: 'none'});\n        if (this.state.backgroundSettings !== 0) this.setState({backgroundSettings: 0});\n        if (this.state.updateType !== 'none') this.setState({ updateType: 'none'});\n        if (this.state.updateElement !== 'none') this.setState({updateElement: 'none'});\n        this._clearSelection = false;\n    }\n\n    _DetermineEditorMenuHeight()\n    {\n        switch(this.state.currentEditor) {\n            case 'none':\n                return '100%';\n            case 'insert-chart':\n            case 'insert-icon':\n            case 'insert-text':\n            case 'insert-image':\n            case 'insert-background-elem':\n            case 'edit-background':\n            case 'header-editor':\n            case 'image-editor':\n            case 'icon-editor':\n            case 'text-editor':\n                return '100px';\n        }\n        return '150px';\n    }\n\n    /**\n     * @summary     Updates the current editor.\n     * @param {string} editor The new editor.\n     */\n    _SetCurrentEditor(editor)\n    {\n        let expr = editor === 'insert-chart' || editor === 'insert-icon'\n            || editor === 'insert-text' || editor === 'insert-image' \n            || editor === 'insert-background-elem' || editor === 'edit-background';\n\n        this._RemoveUnderline(this.state.toolbarContent);\n        this.setState({\n            currentEditor: editor,\n            toolbarOptions: this._GetToolbarOptions(editor),\n            toolbarContent: this._GetToolbarContent(expr, editor),\n        });\n\n        if (editor === 'none') {\n            this.setState({\n                graphicSettings: 0,\n            });\n        } else if (editor === 'insert-text') {\n            this._ToggleInsert('text', 'Sample Text');\n        }\n\n        if (expr) this._clearSelection = true;\n\n        this._editorTextElem = 0;\n    }\n\n    _GetToolbarOptions(editor)\n    {\n        if (editor.slice(0, 6) === 'update') return this.state.toolbarOptions\n        return editor;\n    }\n\n    _GetToolbarContent(expr, editor)\n    {\n        if (expr || editor === 'none') {\n            return 'insert';\n        } else if (editor.slice(0, 6) === 'update') {\n            return this.state.currentEditor;\n        }\n        return editor;\n    }\n\n    /**\n     * @summary     Updates the current text element.\n     * @param {JSON} textElem The new text element.\n     */\n    _SetInfogTextElem(textElem) \n    {\n        this.setState({\n            infogTextElem: textElem,\n        });\n    }\n\n    /**\n     * @summary     Updates the current text element.\n     * @param {JSON} textElem The new text element.\n     */\n    _SetEditorTextElem(textElem)\n    {\n        this._editorTextElem = textElem;\n    }\n\n    _GraphicHandler(settings)\n    {\n        this.setState({\n            graphicSettings: settings,\n        });\n    }\n\n    _ToggleDownload()\n    {\n        this.setState({\n            isDownloading: true,\n        });\n    }\n\n    _ToggleInsert(type, element)\n    {\n        this.setState({\n            insertType: type,\n            insertElement: element,\n        });\n    }\n\n    _ToggleUpdate(type, element)\n    {   \n        this.setState({\n            updateType: type,\n            updateElement: element,\n        });\n    }\n\n    _ToggleBackgroundSettings(settings)\n    {\n        this.setState({\n            backgroundSettings: settings,\n        });\n    }\n\n    /**\n     * @summary Updates _infogDimensions.\n     * @param {JSON} dimensions JSON object containing a width and height attribute.\n     */\n    _SetInfogDimensions(dimensions) \n    {\n        this._infogDimensions = {\n            width: dimensions.width,\n            height: dimensions.height,\n        };\n    }\n\n    _ChartHandler(data, cSettings, dSettings)\n    {\n        this.setState({\n            chartData: data,\n            cSettings: cSettings,\n            dSettings: dSettings,\n        });\n    }\n\n    /**\n     * @summary Updates chartData.\n     * @param {misc} chartData Layout of data depends on which chart we are dealing with.\n     */\n    _SetChartData(chartData)\n    {\n        this.setState({\n            chartData: chartData,\n        });\n    }\n\n    _SetChartSettings(settings)\n    {\n        this.setState({\n            cSettings: settings,\n        });\n    }\n\n    _SetDecoratorSettings(settings)\n    {\n        this.setState({\n            dSettings: settings,\n        });\n    }\n\n    /**\n     * @summary Selects the current editor being displayed.\n     * @returns A react component\n     */\n    _SelectEditor()\n    {\n        if (this.state.currentEditor === 'text-editor') {\n            return <QuillEditor \n                textElem={this.state.infogTextElem}\n                setTextElem={(textElem) => { this._SetEditorTextElem(textElem); }}\n            />;\n        } else if (this.state.currentEditor === 'waffle-editor') {\n            return <WaffleEditor \n                chartData={this.state.chartData}\n                cSettings={this.state.cSettings}\n                dSettings={this.state.dSettings}\n                setChartData={(data) => { this._SetChartData(data); }}\n                setChartSettings={(settings) => { this._SetChartSettings(settings); }}\n                setDecoratorSettings={(settings) => { this._SetDecoratorSettings(settings); }}/>\n        } else if (this.state.currentEditor === 'bar-editor' || \n            this.state.currentEditor === 'stacked-bar-editor') {\n            return <BarEditor\n                type={this.state.currentEditor}\n                chartData={this.state.chartData}\n                cSettings={this.state.cSettings}\n                dSettings={this.state.dSettings}\n                setChartData={(data) => { this._SetChartData(data); }}\n                setChartSettings={(settings) => { this._SetChartSettings(settings); }}\n                setDecoratorSettings={(settings) => { this._SetDecoratorSettings(settings); }}/>;\n        } else if (this.state.currentEditor === 'pie-editor' || \n            this.state.currentEditor === 'donut-editor') {\n            return <PieEditor \n                type={this.state.currentEditor}\n                chartData={this.state.chartData}\n                cSettings={this.state.cSettings}\n                dSettings={this.state.dSettings}\n                setChartData={(data) => { this._SetChartData(data); }}\n                setChartSettings={(settings) => { this._SetChartSettings(settings); }}\n                setDecoratorSettings={(settings) => { this._SetDecoratorSettings(settings); }}/>;\n        } else if (this.state.currentEditor === 'image-editor') {\n            return <ImageEditor \n                settings={this.state.graphicSettings}\n                setGraphicSettings={(settings) => { this._GraphicHandler(settings); }}/>;\n        } else if (this.state.currentEditor === 'icon-editor') {\n            return <IconEditor \n                settings={this.state.graphicSettings}\n                setGraphicSettings={(settings) => { this._GraphicHandler(settings); }}/>;\n        } else if (this.state.currentEditor === 'header-editor') {\n            return <BackgroundElementEditor \n                settings={this.state.graphicSettings}\n                setGraphicSettings={(settings) => { this._GraphicHandler(settings); }}/>;\n        } else if (this.state.currentEditor === 'line-editor') {\n            return <LineEditor \n                chartData={this.state.chartData}\n                cSettings={this.state.cSettings}\n                dSettings={this.state.dSettings}\n                setChartData={(data) => { this._SetChartData(data); }}\n                setChartSettings={(settings) => { this._SetChartSettings(settings); }}\n                setDecoratorSettings={(settings) => { this._SetDecoratorSettings(settings); }}/>;\n        } else if (this.state.currentEditor === 'icon-bar-editor') {\n            return <IconBarEditor \n                chartData={this.state.chartData}\n                cSettings={this.state.cSettings}\n                dSettings={this.state.dSettings}\n                setChartData={(data) => { this._SetChartData(data); }}\n                setChartSettings={(settings) => { this._SetChartSettings(settings); }}\n                setDecoratorSettings={(settings) => { this._SetDecoratorSettings(settings); }}/>;\n        } else if (this.state.currentEditor === 'insert-chart' || this.state.currentEditor === 'update-chart') {\n            let handler = (this.state.currentEditor === 'insert-chart') ?\n                (type, element) => { this._ToggleInsert(type, element); } :\n                (type, element) => { this._ToggleUpdate(type, element); };\n            return (<Chart \n                toggleInsert={(type, element) => { handler(type, element); }}/>);\n        } else if (this.state.currentEditor === 'insert-icon' || this.state.currentEditor === 'update-icon') {\n            let handler = (this.state.currentEditor === 'insert-icon') ? \n                (type, element) => { this._ToggleInsert(type, element); } : \n                (type, element) => { this._ToggleUpdate(type, element); };\n            return (<Icon \n                toggleInsert={(type, element) => { handler(type, element); }}/>);\n        } else if (this.state.currentEditor === 'insert-background-elem' || this.state.currentEditor === 'update-background-elem') {\n            let handler = (this.state.currentEditor === 'insert-background-elem') ?\n                (type, element) => { this._ToggleInsert(type, element); } :\n                (type, element) => { this._ToggleUpdate(type, element); };\n            return (<BackgroundElement \n                toggleInsert={(type, element) => { handler(type, element); }}/>);\n        } else if (this.state.currentEditor === 'insert-image') {\n            return (<Image />);\n        } else if (this.state.currentEditor === 'edit-background') {\n            return (<Background \n                toggleBackgroundSettings={(settings) => { this._ToggleBackgroundSettings(settings); }}/>);\n        }\n        return false;\n    }\n\n    _CanvasToggle(setting)\n    {\n        if (setting === 'remove') {\n            this._ToggleRemove();\n        } else {\n            this._ToggleLayerAction(setting)\n        }\n    }\n\n    _ToggleRemove()\n    {\n        this.setState({\n            isRemoving: true,\n        }); \n    }\n\n    _ToggleLayerAction(layerAction)\n    {\n        this.setState({\n            layerAction: layerAction\n        });\n    }\n\n    /**\n     * @summary     Sets up the toolbar's contents.\n     * @description A private function that removes the underline from the currently\n     *              selected option in the upper toolbar and adds an underline \n     *              to the newly selected item. This function also updates the \n     *              state of the toolbarContent variable.\n     * \n     * @param {string} content \n     * @returns \n     */\n    _SetToolbarContent(content)\n    {\n        if (content === this.state.toolbarContent) return;    \n\n        this._RemoveUnderline(this.state.toolbarContent);\n\n        this.setState({\n            toolbarContent: content,\n        });\n    }\n\n    _RemoveUnderline(name)\n    {\n        // Remove underline \n        let selectedElem = document.getElementById('toolbar-' + name);\n        selectedElem.classList.remove('selected');\n    }\n\n    _GetEditorWindowContent()\n    {\n        if (this.state.currentEditor === 'none') {\n            return (\n                <p className='editor-placeholder-text'>Double click on an element to begin editing!</p>\n            );\n        } else {\n            let text = '';\n            switch(this.state.currentEditor) {\n                case 'insert-chart':\n                    text = 'Chart Library';\n                    break;\n                case 'update-icon':\n                case 'insert-icon':\n                    text = 'Icon Library';\n                    break;\n                case 'insert-image':\n                    text = 'Image Library';\n                    break;\n                case 'insert-background-elem':\n                    text = 'Background Element Library';\n                    break;\n                case 'edit-background':\n                    text = 'Background Editor';\n                    break;\n                case 'text-editor':\n                    text = 'Text Editor';\n                    break;\n                case 'waffle-editor':\n                    text = 'Waffle Chart Editor';\n                    break;\n                case 'pie-editor':\n                    text = 'Pie Chart Editor';\n                    break;\n                case 'bar-editor':\n                    text = 'Bar Chart Editor';\n                    break;\n                case 'stacked-bar-editor':\n                    text = 'Stacked Bar Chart Editor';\n                    break;\n                case 'line-editor':\n                    text = 'Line Chart Editor';\n                    break;\n                case 'icon-bar-editor':\n                    text = 'Icon Bar Chart Editor';\n                    break;\n                case 'donut-editor':\n                    text = 'Donut Chart Editor';\n                    break;\n                case 'image-editor':\n                    text = 'Image Editor';\n                    break;\n                case 'icon-editor':\n                    text = 'Icon Editor';\n                    break;\n                case 'header-editor':\n                    text = 'Banner Editor';\n                    break;\n            }\n            return (\n                <h3 style={{\n                    fontSize: '20px',\n                    position: 'relative',\n                    top: '-8px',\n                }}>{text}</h3>\n            );\n        }\n    }\n}\n\nexport {InfographicEditor};"]},"metadata":{},"sourceType":"module"}