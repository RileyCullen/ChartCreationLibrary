{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/PieEditor.js\";\nimport React from 'react';\nimport { Editor, FontSelector, LabeledColorPicker, LabeledTextField, Menu, PieChartInputFields } from './Components/index';\nimport '../../../css/React/Editors/ChartEditor.css';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PieEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: 0 // 0 - Settings and 1 - Design Options\n\n    };\n    this._defaultFont = {\n      fontFamily: 'Times New Roman, Times, serif',\n      fontSize: 10,\n      textColor: '#000'\n    };\n    this._settingsManager = new SettingsManager({\n      cSettings: this.props.cSettings,\n      dSettings: this.props.dSettings,\n      setChartSettings: settings => {\n        this.props.setChartSettings(settings);\n      },\n      setDecoratorSettings: settings => {\n        this.props.setDecoratorSettings(settings);\n      }\n    });\n    this._defaultSettings = {\n      chartOutline: {\n        size: {\n          radius: 100,\n          outlineWidth: 2\n        },\n        color: {\n          outlineColor: '#000'\n        }\n      },\n      statistic: {\n        font: this._defaultFont,\n        position: {\n          x: 0,\n          y: 0\n        }\n      }\n    };\n  }\n\n  render() {\n    let content = {\n      chartSettings: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Chart Data\",\n        isOpen: true,\n        content: this._GetChartData(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'chart-data', false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Color Settings\",\n        isOpen: false,\n        content: this._GetColorContents(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'color-settings', false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Size Settings\",\n        isOpen: false,\n        content: this._GetSizeContents(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'size-settings', false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)],\n      designOptions: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Data Labels\",\n        isOpen: false,\n        content: this._GetDataLabelContents(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.statistic === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'statistic', {\n              statistic: this._defaultSettings.statistic\n            });\n          }\n        }\n      }, 'data-labels', false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Chart Outline\",\n        isOpen: false,\n        content: this._GetChartOutlineContents(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.chartOutline === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'chartOutline', {\n              chartOutline: this._defaultSettings.chartOutline\n            });\n          }\n        }\n      }, 'chart-outline', false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        content: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n\n  _SetCurrentTab(state) {\n    this.setState({\n      currentTab: state\n    });\n  }\n\n  _UpdateDecoratorSettings(decorator, category, key, value) {\n    this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n  }\n\n  _CheckboxHandler(checkboxValue, key, decoratorSettings) {\n    this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n  }\n\n  _GetChartData() {\n    return [/*#__PURE__*/_jsxDEV(PieChartInputFields, {\n      value: this.props.chartData[0].value,\n      rows: 1,\n      cols: 4,\n      setChartData: value => {\n        this._SetChartData(value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _SetChartData(value) {\n    let data = [{\n      category: this.props.chartData[0].category,\n      value: parseFloat(value),\n      color: this.props.chartData[0].color\n    }, {\n      category: this.props.chartData[1].category,\n      value: 100 - value,\n      color: this.props.chartData[1].color\n    }];\n    this.props.setChartData(data);\n  }\n\n  _GetColorContents() {\n    let color = this.props.chartData;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n        label: \"Primary Color:\",\n        color: color[0].color,\n        onChange: value => {\n          this._SetColor(value, 0);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n        label: \"Background Color:\",\n        color: color[1].color,\n        onChange: value => {\n          this._SetColor(value, 1);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _SetColor(color, i) {\n    let data = [{\n      category: this.props.chartData[0].category,\n      value: this.props.chartData[0].value,\n      color: this.props.chartData[0].color\n    }, {\n      category: this.props.chartData[1].category,\n      value: this.props.chartData[1].value,\n      color: this.props.chartData[1].color\n    }];\n    data[i].color = color;\n    this.props.setChartData(data);\n  }\n\n  _SetRadius(radius) {\n    let settings = this.props.cSettings;\n    settings.size.chartRadius = radius;\n    this.props.setChartSettings(settings);\n  }\n\n  _SetDonutRadius(thickness) {\n    let settings = this.props.cSettings;\n    settings.size.innerRadius = settings.size.chartRadius - thickness;\n    this.props.setChartSettings(settings);\n  }\n\n  _GetSizeContents() {\n    let size = this.props.cSettings.size;\n    let innerRadiusContent = this.props.type === 'pie-editor' ? false : /*#__PURE__*/_jsxDEV(LabeledTextField, {\n      label: \"Thickness:\",\n      index: \"donut-radius\",\n      initialValue: parseFloat(size.chartRadius) - parseFloat(size.innerRadius),\n      rows: 1,\n      cols: 5,\n      onChange: (d, i) => {\n        this._SetDonutRadius(d);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }, this);\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Radius:\",\n        index: \"chart-radius\",\n        initialValue: size.chartRadius,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetRadius(d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), innerRadiusContent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetDataLabelContents() {\n    let statistic = this.props.dSettings.statistic === undefined ? this._defaultSettings.statistic : this.props.dSettings.statistic;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Position Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"X:\",\n          index: \"label-x\",\n          initialValue: statistic.position.x,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('statistic', 'position', 'x', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Y:\",\n          index: \"label-y\",\n          initialValue: statistic.position.y,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('statistic', 'position', 'y', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: statistic.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('statistic', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('statistic', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('statistic', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetChartOutlineContents() {\n    let chartOutline = this.props.dSettings.chartOutline === undefined ? this._defaultSettings.chartOutline : this.props.dSettings.chartOutline;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Size Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Radius:\",\n          index: \"outline-radius\",\n          initialValue: chartOutline.size.radius,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('chartOutline', 'size', 'radius', parseFloat(d));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Stroke Width:\",\n          index: \"stroke-width\",\n          initialValue: chartOutline.size.outlineWidth,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('chartOutline', 'size', 'outlineWidth', parseFloat(d));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Color Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n          label: \"Outline Color:\",\n          color: chartOutline.color.outlineColor,\n          onChange: value => {\n            this._UpdateDecoratorSettings('chartOutline', 'color', 'outlineColor', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }, this)];\n  }\n\n}\n\nexport { PieEditor };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/PieEditor.js"],"names":["React","Editor","FontSelector","LabeledColorPicker","LabeledTextField","Menu","PieChartInputFields","SettingsManager","PieEditor","Component","constructor","props","state","currentTab","_defaultFont","fontFamily","fontSize","textColor","_settingsManager","cSettings","dSettings","setChartSettings","settings","setDecoratorSettings","_defaultSettings","chartOutline","size","radius","outlineWidth","color","outlineColor","statistic","font","position","x","y","render","content","chartSettings","_GetChartData","displayCheckbox","_GetColorContents","_GetSizeContents","designOptions","_GetDataLabelContents","isChecked","undefined","checkboxHandler","d","_CheckboxHandler","_GetChartOutlineContents","_SetCurrentTab","setState","_UpdateDecoratorSettings","decorator","category","key","value","UpdateDecoratorSettings","checkboxValue","decoratorSettings","DecoratorToggle","chartData","_SetChartData","data","parseFloat","setChartData","_SetColor","i","_SetRadius","chartRadius","_SetDonutRadius","thickness","innerRadius","innerRadiusContent","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Editor, FontSelector, LabeledColorPicker, LabeledTextField, Menu, \n    PieChartInputFields } from './Components/index';\n\nimport '../../../css/React/Editors/ChartEditor.css';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\n\nclass PieEditor extends React.Component \n{\n    constructor(props) \n    {\n        super(props);\n        this.state = {\n            currentTab: 0 // 0 - Settings and 1 - Design Options\n        };\n        this._defaultFont = {\n            fontFamily: 'Times New Roman, Times, serif',\n            fontSize: 10,\n            textColor: '#000'\n        };\n\n        this._settingsManager = new SettingsManager({\n            cSettings: this.props.cSettings,\n            dSettings: this.props.dSettings,\n            setChartSettings: (settings) => { this.props.setChartSettings(settings); },\n            setDecoratorSettings: (settings) => { this.props.setDecoratorSettings(settings); }\n        });\n\n        this._defaultSettings = {\n            chartOutline: {\n                size: {\n                    radius: 100,\n                    outlineWidth: 2,\n                },\n                color: {\n                    outlineColor: '#000'\n                }\n            },\n            statistic: {\n                font: this._defaultFont,\n                position: {\n                    x: 0,\n                    y: 0\n                }\n            }\n        };\n    }\n\n    render()\n    {\n        let content = {\n            chartSettings: [\n                <Menu \n                    key='chart-data'\n                    name='Chart Data'\n                    isOpen={true}\n                    content={this._GetChartData()}\n                    checkbox={{\n                        displayCheckbox: false\n                    }}/>,\n                <Menu \n                    key='color-settings'\n                    name='Color Settings'\n                    isOpen={false}\n                    content={this._GetColorContents()}\n                    checkbox={{\n                        displayCheckbox: false\n                    }}/>,\n                <Menu \n                    key='size-settings'\n                    name='Size Settings'\n                    isOpen={false}\n                    content={this._GetSizeContents()}\n                    checkbox={{\n                        displayCheckbox: false\n                    }}/>,\n            ],\n            designOptions: [\n                <Menu \n                    key='data-labels'\n                    name='Data Labels'\n                    isOpen={false}\n                    content={this._GetDataLabelContents()}\n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.statistic === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'statistic', { statistic: this._defaultSettings.statistic});\n                        }\n                    }} />,\n                <Menu \n                    key='chart-outline'\n                    name='Chart Outline'\n                    isOpen={false}\n                    content={this._GetChartOutlineContents()} \n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.chartOutline === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'chartOutline', { chartOutline: this._defaultSettings.chartOutline});\n                        }\n                    }} />\n            ]\n        }\n\n        return (\n            <div>\n                <Editor content={content}/>\n            </div>\n        )\n    }\n\n    _SetCurrentTab(state)\n    {\n        this.setState({\n            currentTab: state,\n        });\n    }\n\n    _UpdateDecoratorSettings(decorator, category, key, value)\n    {\n        this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n    }\n\n    _CheckboxHandler(checkboxValue, key, decoratorSettings)\n    {\n        this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n    }\n\n    _GetChartData()\n    {\n        return [\n            <PieChartInputFields \n                value={this.props.chartData[0].value}\n                rows={1}\n                cols={4}\n                setChartData={(value) => { this._SetChartData(value); }}\n            />\n        ];\n    }\n\n    _SetChartData(value)\n    {\n        let data = [\n            {\n                category: this.props.chartData[0].category,\n                value: parseFloat(value),\n                color: this.props.chartData[0].color,\n            },\n            {\n                category: this.props.chartData[1].category,\n                value: 100 - value,\n                color: this.props.chartData[1].color,\n            }\n        ];\n        this.props.setChartData(data);\n    }\n\n    _GetColorContents()\n    {\n        let color = this.props.chartData;\n        return [\n            <div className='center'>\n                <LabeledColorPicker \n                    label='Primary Color:'\n                    color={color[0].color}\n                    onChange={(value) => { this._SetColor(value, 0); }}\n                />\n                <LabeledColorPicker \n                    label='Background Color:'\n                    color={color[1].color}\n                    onChange={(value) => { this._SetColor(value, 1); }}\n                />\n            </div>\n        ];\n    }\n\n    _SetColor(color, i)\n    {\n        let data = [\n            {\n                category: this.props.chartData[0].category,\n                value: this.props.chartData[0].value,\n                color: this.props.chartData[0].color,\n            },\n            {\n                category: this.props.chartData[1].category,\n                value: this.props.chartData[1].value,\n                color: this.props.chartData[1].color,\n            }\n        ];\n        data[i].color = color;\n        this.props.setChartData(data);\n    }\n\n    _SetRadius(radius)\n    {\n        let settings = this.props.cSettings;\n        settings.size.chartRadius = radius;\n        this.props.setChartSettings(settings);\n    }\n\n    _SetDonutRadius(thickness)\n    {\n        let settings = this.props.cSettings;\n        settings.size.innerRadius = settings.size.chartRadius - thickness;\n        this.props.setChartSettings(settings);\n    }\n\n    _GetSizeContents()\n    {\n        let size = this.props.cSettings.size;\n        let innerRadiusContent = (this.props.type === 'pie-editor') ? false : \n            ( <LabeledTextField \n                label='Thickness:'\n                index='donut-radius'\n                initialValue={parseFloat(size.chartRadius) - parseFloat(size.innerRadius)}\n                rows={1}\n                cols={5}\n                onChange={ (d, i) => { this._SetDonutRadius(d); }}\n            />);\n        return [\n            <div className='center'>\n                <LabeledTextField \n                     label='Radius:'\n                     index='chart-radius'\n                     initialValue={size.chartRadius}\n                     rows={1}\n                     cols={5}\n                     onChange={(d, i) => { this._SetRadius(d); }}\n                />\n                {innerRadiusContent}\n            </div>\n        ]\n    }\n\n    _GetDataLabelContents()\n    {\n        let statistic = (this.props.dSettings.statistic === undefined) ? \n            this._defaultSettings.statistic : this.props.dSettings.statistic;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Position Settings:</h5>\n                    <LabeledTextField \n                        label='X:'\n                        index='label-x'\n                        initialValue={statistic.position.x}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('statistic', 'position', 'x', d);\n                        }} \n                    />\n                    <LabeledTextField \n                        label='Y:'\n                        index='label-y'\n                        initialValue={statistic.position.y}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('statistic', 'position', 'y', d);\n                        }} \n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        initialFont={statistic.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('statistic', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('statistic', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('statistic', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n\n    _GetChartOutlineContents()\n    {\n        let chartOutline = (this.props.dSettings.chartOutline === undefined) ? \n            this._defaultSettings.chartOutline : this.props.dSettings.chartOutline;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Size Settings:</h5>\n                    <LabeledTextField \n                        label='Radius:'\n                        index='outline-radius'\n                        initialValue={chartOutline.size.radius}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('chartOutline', 'size', 'radius', parseFloat(d));\n                        }} \n                    />\n                    <LabeledTextField \n                        label='Stroke Width:'\n                        index='stroke-width'\n                        initialValue={chartOutline.size.outlineWidth}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('chartOutline', 'size', 'outlineWidth', parseFloat(d));\n                        }} \n                    />\n                </div>\n                <div>\n                    <h5>Color Settings:</h5>\n                    <LabeledColorPicker \n                        label='Outline Color:'\n                        color={chartOutline.color.outlineColor}\n                        onChange={(value) => { \n                            this._UpdateDecoratorSettings('chartOutline', 'color', 'outlineColor', value);\n                        }}\n                    />\n                </div>\n            </div>\n        ]\n    }\n}\n\nexport { PieEditor };"]},"metadata":{},"sourceType":"module"}