{"ast":null,"code":"// Cullen, Riley\n// AInfographic.js\n// October 26, 2020 \nimport Konva from 'konva';\nimport html2canvas from 'html2canvas';\nimport { ChartHandler, GraphicsHandler, TextHandler } from '../Handlers/index';\n\nclass AInfographic {\n  /**\n   * @summary     An abstract class the provide structure and common functionality\n   *              to the Infographic type.\n   * @description See summary.\n   * \n   * @requires D3.js\n   * @requires Konva.js\n   * \n   * @source _AddTextSelection() uses code from https://konvajs.org/docs/sandbox/Editable_Text.html\n   * @source Selecting mutliple elements demo uses code from https://konvajs.org/docs/select_and_transform/Basic_demo.html#page-title\n   * @source _DrawSVG code taken from https://konvajs.org/docs/sandbox/SVG_On_Canvas.html\n   * @source Download code taken from https://konvajs.org/docs/data_and_serialization/High-Quality-Export.html\n   * \n   * @param {double} height The height of the canvas element\n   * @param {double} width  The width of the canvas element\n   */\n  constructor(height, width, editorHandler, textCallback, chartCallback, graphicCallback) {\n    if (AInfographic === this.constructor) {\n      throw new TypeError('Abstract class \"AInfographic\" cannot be instantiated');\n    }\n\n    if (this.CreateInfographic === undefined) {\n      throw new TypeError('Types extending \"AInfographic\" must implement CreateInfographic()');\n    }\n\n    if (this.Draw === undefined) {\n      throw new TypeError('Types extending \"AInfographic\" must implement Draw()');\n    }\n\n    this._chartHandler = new ChartHandler();\n    this._textHandler = new TextHandler();\n    this._graphicsHandler = new GraphicsHandler();\n    this._tr = new Konva.Transformer({\n      nodes: [],\n      resizeEnabled: false,\n      rotateEnabled: false\n    });\n    this._chartHeight = height;\n    this._chartWidth = width;\n    this._stage = new Konva.Stage({\n      container: 'canvas-container',\n      width: this._chartWidth,\n      height: this._chartHeight\n    });\n    /*this._selectionRectangle = new Konva.Rect({\n        fill: 'rgba(0, 0, 255, 0.5)',\n        visible: false,\n    });\n    this._hasSelected = false;\n    this._isSelecting = false;\n    this._oldNodes = [];\n    this._mouseX1 = 0, this._mouseX2 = 0, this._mouseY1 = 0, this._mouseY2 = 0;*/\n\n    this._main = new Konva.Layer(); // this._UIAdder = new UIAdder(this._chartWidth, this._chartHeight);\n\n    this._editorHandler = editorHandler;\n    this._textCallback = textCallback;\n    this._chartCallback = chartCallback;\n    this._graphicCallback = graphicCallback;\n    this._selectedTextIndex = -1;\n    this._selectedTextHelper = -1;\n    this._selectedChartIndex = -1;\n    this._selectedGraphicIndex = -1;\n\n    this._stage.add(this._main);\n\n    this._main.add(this._tr);\n\n    this._AddStageBorder();\n  }\n  /**\n   * @summary     Returns chart's dimensions to caller.\n   * @description Returns the chart's width and height in the form of a JSON\n   *              object to the caller.\n   * @returns A JSON object containing the chart's width and height.\n   */\n\n\n  GetDimensions() {\n    return {\n      width: this._chartWidth,\n      height: this._chartHeight\n    };\n  }\n  /**\n   * @summary     Manages memory for infographic type.\n   * @description A function that is responsible for freeing memory that would \n   *              otherwise cause memory leaks. \n   */\n\n\n  Clean() {\n    // Remove chart/text listeners\n    this._RemoveTextListeners();\n\n    this._RemoveChartListeners();\n\n    this._RemoveGraphicListeners(); // Remove all the elements from this._stage\n\n\n    this._stage.destroy();\n\n    this._stage = 0;\n  }\n\n  ClearSelection() {\n    this._tr.nodes([]);\n\n    this._selectedChartIndex = -1;\n    this._selectedGraphicIndex = -1;\n    this._selectedTextIndex = this._selectedTextHelper = -1;\n  }\n\n  Download() {\n    // function from https://stackoverflow.com/a/15832662/512042\n    function downloadURI(uri, name) {\n      var link = document.createElement('a');\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      link.remove();\n    }\n\n    var dataURL = this._stage.toDataURL({\n      pixelRatio: 5\n    });\n\n    downloadURI(dataURL, 'Infographic.png');\n  }\n  /**\n   * @summary Removes the event listeners from each text node.\n   */\n\n\n  _RemoveTextListeners() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('EditableText');\n    });\n\n    selection.forEach(textElem => {\n      textElem.off('dblclick');\n    });\n  }\n  /**\n   * @summary Removes the event listeners from each chart node.\n   */\n\n\n  _RemoveChartListeners() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('Chart');\n    });\n\n    selection.forEach(chartElem => {\n      chartElem.off('dblclick');\n    });\n  }\n\n  _RemoveGraphicListeners() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Graphic');\n    });\n\n    selection.forEach(group => {\n      group.off('dblclick');\n    });\n  }\n\n  _CreateImage({\n    x,\n    y,\n    width,\n    height,\n    src,\n    group\n  }) {\n    let image = new Image(),\n        imageHelper = new Konva.Image(),\n        imageGroup = new Konva.Group();\n\n    image.onload = () => {\n      imageHelper.setAttrs({\n        x: x,\n        y: y,\n        height: height,\n        width: width,\n        image: image,\n        opacity: 1,\n        stroke: 'black',\n        strokeWidth: 0\n      });\n      imageHelper.cache();\n      imageHelper.filters([Konva.Filters.Contrast, Konva.Filters.Brighten, Konva.Filters.Blur]);\n      imageHelper.brightness(0);\n      imageHelper.blurRadius(0);\n      imageHelper.contrast(0);\n\n      this._main.batchDraw();\n\n      image.onload = null;\n    };\n\n    image.src = src;\n    imageGroup.add(imageHelper);\n    group.add(imageGroup);\n\n    this._graphicsHandler.AddGraphic({\n      type: 'image',\n      graphic: imageHelper,\n      group: imageGroup\n    });\n  }\n  /**\n   * @summary     A function that takes in a font and a font weight and maps it\n   *              to the proper quill code.\n   * \n   * @param {string} font   The font associated with a quill code.\n   * @param {int}    weight The weight associated with a quill code. \n   */\n\n\n  _quillMap(font, weight = 0) {\n    if (font === 'museo' && weight === 900) return '900-museo';else if (font === 'canada-type-gibson') {\n      switch (weight) {\n        case 100:\n          return '100-canada';\n\n        case 200:\n          return '200-canada';\n\n        case 400:\n          return '400-canada';\n\n        case 500:\n          return '500-canada';\n\n        case 600:\n          return '600-canada';\n\n        case 700:\n          return '700-canada';\n\n        case 900:\n          return '900-canada';\n\n        default:\n          return '100-canada';\n      }\n    } else if (font === 'Montserrat') return '200-Montserrat';else if (font === 'Open Sans') return 'Open-Sans';else if (font === 'Roboto') {\n      switch (weight) {\n        case 100:\n          return '100-Roboto';\n\n        case 300:\n          return '300-Roboto';\n\n        case 400:\n          return '400-Roboto';\n\n        case 500:\n          return '500-Roboto';\n\n        case 700:\n          return '700-Roboto';\n\n        case 900:\n          return '900-Roboto';\n\n        default:\n          return '100-Roboto';\n      }\n    }\n  }\n  /**\n   * @summary     Adds a black border around the edges of the canvas element.\n   */\n\n\n  _AddStageBorder() {\n    var bkg = new Konva.Rect({\n      x: 0,\n      y: 0,\n      width: this._stage.width(),\n      height: this._stage.height(),\n      fill: 'white',\n      stroke: 'black'\n    });\n\n    this._main.add(bkg);\n\n    bkg.moveToBottom();\n  }\n  /**\n   * @summary     Returns the width of a text element given the text's font.\n   * @description Using canvas' measureText function, _GetTextWidth returns the\n   *              width in pixels of a given piece of text.\n   * \n   * @param {string} text       The text we want to determine the width of.\n   * @param {double} fontSize   The font size of the text we want to find the width of.\n   * @param {string} fontFamily The font family of the text we want to analyze.\n   */\n\n\n  _GetTextWidth(text, fontSize, fontFamily) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = fontSize + 'px ' + fontFamily;\n    var helper = ctx.measureText(text).width;\n    canvas.remove();\n    return helper;\n  }\n  /**\n   * @param {double} width  The width of the element we are centering.\n   * @param {double} center The x-coordinate we want to center about.\n   */\n\n\n  _CenterXAbout(width, center) {\n    return center - width / 2;\n  }\n  /**\n   * @summary     Calls additional functions to complete the infographic.\n   * @description Renders all of the text elements and adds the capability to \n   *              edit graphs and text elements.\n   */\n\n\n  _FinalizeInfog() {\n    this._RenderText();\n\n    this._AddGraphSelection();\n\n    this._AddTextSelection();\n\n    this._AddGraphicSelection(); // this._AddMultipleElementSelector();\n\n  }\n  /**\n   * @summary     Renders all of the text elements.\n   * @description Iterates through all of the elements in textHandler and converts\n   *              them from DOM elements to Konva.Image elements.\n   */\n\n\n  _RenderText() {\n    var helperElem = document.createElement('div');\n    helperElem.style.position = 'absolute';\n    document.getElementById('renderHelper').appendChild(helperElem);\n\n    for (var i = 0; i < this._textHandler.GetSize(); i++) {\n      helperElem.appendChild(this._textHandler.GetTextElem(i));\n\n      this._HTMLToCanvas('.EditableText', i);\n\n      this._textHandler.GetTextElem(i).remove();\n    }\n\n    helperElem.remove();\n  }\n  /**\n   * @summary     Converts DOM elements on the page to Konva.Image elements\n   * @description Uses the html2canvas module to convert DOM elements located \n   *              within the body into Konva.Image elements.\n   * \n   * @param {int} index The index of the text element we want to convert.\n   */\n\n\n  _HTMLToCanvas(query, index) {\n    var element = document.querySelector(query); // var comp = window.getComputedStyle(element, null);\n\n    html2canvas(element, {\n      logging: false,\n      backgroundColor: null,\n      scrollY: -window.scrollY // width: comp.width.replace('px', ''),\n\n    }).then(image => {\n      // console.log('image width: ' + image.width)\n      this._textHandler.GetImage(index).image(image);\n\n      this._main.batchDraw();\n    }).catch(() => {\n      var helperElem = document.createElement('div');\n      helperElem.style.position = 'absolute';\n      document.getElementById('renderHelper').appendChild(helperElem);\n      helperElem.appendChild(this._textHandler.GetTextElem(index));\n\n      this._HTMLToCanvas('.EditableText', index);\n\n      this._textHandler.GetTextElem(index).remove();\n\n      helperElem.remove();\n    });\n    /*console.log('width: ' + comp.width);\n    console.log('height: ' + comp.height);\n    console.log('x: ' + comp.x);\n    console.log('y: ' + comp.y)*/\n  }\n  /**\n   * @summary     Adds the capability to select and edit text.\n   * @description Iterates through all of the elements in the text handler and\n   *              adds an event listener that triggers when the text element\n   *              is double clicked.\n   */\n\n\n  _AddTextSelection() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('EditableText');\n    });\n\n    selection.forEach(textElem => {\n      textElem.on('dblclick', () => {\n        console.log(textElem);\n        textElem.setAttr('draggable', true);\n\n        this._tr.nodes([textElem]);\n\n        this._tr.moveToTop();\n\n        this._main.batchDraw();\n\n        this._selectedTextIndex = textElem.getAttr('id');\n        this._selectedTextHelper = this._selectedTextIndex;\n\n        this._textCallback(this._textHandler.GetHandlerElem(this._selectedTextIndex));\n\n        this._editorHandler('text-editor');\n\n        setTimeout(() => {\n          this._stage.on('click', HandleOutsideClick);\n        });\n\n        var HandleOutsideClick = e => {\n          if (e.target !== textElem) {\n            this._selectedTextIndex = -1;\n\n            this._editorHandler('none');\n\n            this._tr.nodes([]);\n\n            textElem.setAttr('draggable', false);\n\n            this._main.batchDraw();\n\n            this._stage.off('click', HandleOutsideClick);\n          }\n        };\n      });\n    });\n  }\n  /**\n   * @summary     Updates current handler element.\n   * @description Updates the text handler element located at _selectedTextIndex\n   *              with data from the parameterized textElem variable.\n   * \n   * @param {JSON} textElem A JSON object containing the updated textElem information.\n   */\n\n\n  UpdateTextHandler(textElem) {\n    if (textElem.image === undefined || textElem.textElem === undefined || textElem.group === undefined || textElem.spanCSS === undefined || textElem === 0) {\n      return;\n    }\n\n    console.log('index: ' + this._selectedTextHelper);\n\n    this._textHandler.UpdateTextElem({\n      index: this._selectedTextHelper,\n      textElem: textElem.textElem,\n      group: textElem.group,\n      image: textElem.image,\n      spanCSS: textElem.spanCSS\n    });\n\n    console.log(this._textHandler);\n    this._selectedTextHelper = -1;\n  }\n\n  Remove() {\n    // TODO remove entries from handler\n    if (this._selectedChartIndex !== -1) {\n      this._tr.nodes([]);\n\n      this._main.batchDraw();\n\n      this._chartHandler.RemoveHandlerElem(this._selectedChartIndex);\n\n      this._selectedChartIndex = -1;\n    } else if (this._selectedTextIndex !== -1) {\n      this._tr.nodes([]);\n\n      this._main.batchDraw();\n\n      this._textHandler.RemoveHandlerElem(this._selectedTextIndex);\n\n      this._selectedChartIndex = -1;\n    } else if (this._selectedGraphicIndex !== -1) {\n      this._tr.nodes([]);\n\n      this._main.batchDraw();\n\n      this._graphicsHandler.RemoveHandlerElem(this._selectedGraphicIndex);\n\n      this._selectedGraphicIndex = -1;\n    }\n  }\n\n  UpdateChartDecorators(settings) {\n    if (settings === 0 || this._selectedChartIndex === -1) return;\n\n    this._chartHandler.UpdateChartDecorators(this._selectedChartIndex, settings);\n  }\n  /**\n   * @summary     Updates the selected chart.\n   * @description Updates the chart (and its associated data) at index \n   *              _selectedChartIndex.\n   * @param {misc} chartData The structure of this variable depends on the \n   *                         type of chart we are dealing with.\n   */\n\n\n  UpdateChartData(chartData) {\n    if (chartData === 0 || this._selectedChartIndex === -1) return;\n\n    var elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex),\n        name = elem.group.getAttr('name');\n\n    if (name === 'Selectable Chart Waffle') {\n      // We assume that the data will be formatted as follows\n      // data = {\n      //    numerator: {num}, denominator: {num}\n      // }\n      if (chartData.numerator === 0 || chartData.denominator === 0) return;\n      var numerator = chartData.numerator,\n          denominator = chartData.denominator;\n      elem.chart.UpdateData(parseInt(numerator), parseInt(denominator));\n    } else {\n      // We assume that the data will be formated as follows\n      // data = [\n      //    { category: {string}, value: {float}, color: {string}}, ...   \n      // ]\n      elem.chart.UpdateData(chartData);\n    }\n\n    this._UpdateDecorators(elem);\n  }\n\n  UpdateChartSettings(settings) {\n    if (settings === 0 || this._selectedChartIndex === -1) return;\n\n    let elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex);\n\n    elem.chart.UpdateChartSettings(settings);\n\n    this._UpdateDecorators(elem);\n  }\n\n  UpdateGraphicSettings(settings) {\n    if (settings === 0 || this._selectedGraphicIndex === -1) return;\n\n    this._graphicsHandler.UpdateGraphicSettings({\n      id: this._selectedGraphicIndex,\n      settings: settings\n    });\n\n    this._tr.forceUpdate();\n\n    this._main.batchDraw();\n  }\n  /**\n   * @summary     Updates decorators.\n   * @description Iterates though all the decorators in handlerElem and updates\n   *              them.\n   * \n   * @param {JSON} handlerElem \n   */\n\n\n  _UpdateDecorators(handlerElem) {\n    var prev = handlerElem.chart;\n\n    for (var i = 0; i <= handlerElem.decoratorSize; i++) {\n      handlerElem.decorators[i].UpdateDecorator(prev);\n      prev = handlerElem.decorators[i];\n    }\n\n    prev.CreateChart();\n\n    this._tr.forceUpdate();\n\n    this._main.batchDraw();\n  }\n  /**\n   * @summary     Adds the capability to select and edit graphs.\n   * @description Iterates through all of the elements in the graph handler and\n   *              adds an event listener when they are double clicked on.\n   */\n\n\n  _AddGraphSelection() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('Chart');\n    });\n\n    selection.forEach(chart => {\n      chart.on('dblclick', () => {\n        this._selectedChartIndex = parseInt(chart.getAttr('id'));\n\n        this._tr.nodes([chart]);\n\n        this._tr.moveToTop();\n\n        this._main.batchDraw();\n\n        chart.setAttr('draggable', true);\n\n        let selectedChart = this._chartHandler.GetHandlerElem(this._selectedChartIndex).chart,\n            dSettings = this._chartHandler.GetDecoratorSettingsArray(this._selectedChartIndex);\n\n        this._chartCallback(selectedChart.GetData(), selectedChart.GetChartSettings(), dSettings);\n\n        if (chart.getAttr('name') === 'Selectable Chart Waffle') {\n          this._editorHandler('waffle-editor');\n        } else if (chart.getAttr('name') === 'Selectable Chart Pie') {\n          this._editorHandler('pie-editor');\n        } else if (chart.getAttr('name') === 'Selectable Chart Bar') {\n          this._editorHandler('bar-editor');\n        } else if (chart.getAttr('name') === 'Selectable Chart Stacked') {\n          this._editorHandler('stacked-bar-editor');\n        } else if (chart.getAttr('name') === 'Selectable Chart Line') {\n          this._editorHandler('line-editor');\n        } else if (chart.getAttr('name') === 'Selectable Chart Icon') {\n          this._editorHandler('icon-bar-editor');\n        } else if (chart.getAttr('name') === 'Selectable Chart Donut') {\n          this._editorHandler('donut-editor');\n        }\n\n        setTimeout(() => {\n          this._stage.on('click', HandleOutsideClick);\n        });\n\n        var HandleOutsideClick = e => {\n          if (e.target !== chart) {\n            this._selectedChartIndex = -1;\n\n            this._editorHandler('none');\n\n            this._tr.nodes([]);\n\n            chart.setAttr('draggable', false);\n\n            this._main.batchDraw();\n\n            this._stage.off('click', HandleOutsideClick);\n          }\n        };\n      });\n    });\n  }\n\n  _AddGraphicSelection() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Graphic');\n    });\n\n    selection.forEach(group => {\n      group.on('dblclick', () => {\n        this._selectedGraphicIndex = group.getAttr('id');\n\n        let type = this._graphicsHandler.GetType(this._selectedGraphicIndex);\n\n        this._tr.nodes([group]);\n\n        this._tr.moveToTop();\n\n        this._main.batchDraw();\n\n        group.setAttr('draggable', true);\n\n        this._editorHandler(type + '-editor');\n\n        this._graphicCallback(this._graphicsHandler.GetSettings(this._selectedGraphicIndex));\n\n        setTimeout(() => {\n          this._stage.on('click', HandleOutsideClick);\n        });\n\n        var HandleOutsideClick = e => {\n          if (e.target !== group) {\n            this._selectedGraphicIndex = -1;\n\n            this._tr.nodes([]);\n\n            group.setAttr('draggable', false);\n\n            this._main.batchDraw();\n\n            this._editorHandler('none');\n\n            this._stage.off('click', HandleOutsideClick);\n          }\n        };\n      });\n    });\n  }\n\n  _AddMultipleElementSelector() {\n    this._main.add(this._selectionRectangle);\n\n    this._MultipleSelectorStart();\n\n    this._MultipleSelectorMove();\n\n    this._MultipleSelectorEnd();\n\n    this._MultipleSelectorDeselect();\n  }\n\n  _MultipleSelectorStart() {\n    this._stage.on('mousedown touchstart', e => {\n      //if (e.target !== this._stage) return;\n      this._isSelecting = true;\n      this._mouseX1 = this._stage.getPointerPosition().x;\n      this._mouseX2 = this._mouseX1;\n      this._mouseY1 = this._stage.getPointerPosition().y;\n      this._mouseY2 = this._mouseY1;\n\n      this._selectionRectangle.visible(true);\n\n      this._selectionRectangle.width(0);\n\n      this._selectionRectangle.height(0);\n\n      this._main.batchDraw();\n    });\n  }\n\n  _MultipleSelectorMove() {\n    this._stage.on('mousemove touchmove', () => {\n      if (!this._selectionRectangle.visible()) return;\n      this._mouseX2 = this._stage.getPointerPosition().x;\n      this._mouseY2 = this._stage.getPointerPosition().y;\n\n      this._selectionRectangle.setAttrs({\n        x: Math.min(this._mouseX1, this._mouseX2),\n        y: Math.min(this._mouseY1, this._mouseY2),\n        width: Math.abs(this._mouseX2 - this._mouseX1),\n        height: Math.abs(this._mouseY2 - this._mouseY1)\n      });\n\n      this._main.batchDraw();\n    });\n  }\n\n  _MultipleSelectorEnd() {\n    this._stage.on('mouseup touchend', () => {\n      if (!this._selectionRectangle.visible()) return; // selection code \n\n      var elems = this._stage.find('.Selectable').toArray();\n\n      var box = this._selectionRectangle.getClientRect();\n      /*var selected = elems.filter((element) => {\n          if (Konva.Util.haveIntersection(box, element.getClientRect())) {\n              alert('h')\n              return element;\n          }\n          var x = element.getClientRect().x,\n              y = element.getClientRect().y;\n          if (x >= box.x &&\n              x <= box.x + box.width &&\n              y >= box.y &&\n              y <= box.y + box.height)\n          {\n              element.setAttr('draggable', true);\n              this._oldNodes.push(element);\n              return element;\n          }\n      });*/\n\n\n      var selected = elems.filter(elem => Konva.Util.haveIntersection(box, elem.getClientRect()));\n      console.log(selected);\n\n      this._tr.nodes(selected);\n\n      this._tr.moveToTop();\n\n      this._main.batchDraw();\n\n      setTimeout(() => {\n        this._selectionRectangle.visible(false);\n\n        this._main.batchDraw();\n\n        this._hasSelected = true;\n        this._isSelecting = false;\n      });\n    });\n  }\n\n  _MultipleSelectorDeselect() {\n    this._stage.on('click tap', e => {\n      if (this._selectionRectangle.visible()) return;\n\n      if (this._hasSelected) {\n        this._oldNodes.forEach(node => {\n          node.setAttr('draggable', false);\n        });\n\n        this._tr.nodes([]);\n\n        this._main.batchDraw();\n\n        this._hasSelected = false;\n        return;\n      }\n    });\n  }\n\n}\n\nexport { AInfographic };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/InfographicTemplates/AInfographic.js"],"names":["Konva","html2canvas","ChartHandler","GraphicsHandler","TextHandler","AInfographic","constructor","height","width","editorHandler","textCallback","chartCallback","graphicCallback","TypeError","CreateInfographic","undefined","Draw","_chartHandler","_textHandler","_graphicsHandler","_tr","Transformer","nodes","resizeEnabled","rotateEnabled","_chartHeight","_chartWidth","_stage","Stage","container","_main","Layer","_editorHandler","_textCallback","_chartCallback","_graphicCallback","_selectedTextIndex","_selectedTextHelper","_selectedChartIndex","_selectedGraphicIndex","add","_AddStageBorder","GetDimensions","Clean","_RemoveTextListeners","_RemoveChartListeners","_RemoveGraphicListeners","destroy","ClearSelection","Download","downloadURI","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","remove","dataURL","toDataURL","pixelRatio","selection","find","node","hasName","forEach","textElem","off","chartElem","group","_CreateImage","x","y","src","image","Image","imageHelper","imageGroup","Group","onload","setAttrs","opacity","stroke","strokeWidth","cache","filters","Filters","Contrast","Brighten","Blur","brightness","blurRadius","contrast","batchDraw","AddGraphic","type","graphic","_quillMap","font","weight","bkg","Rect","fill","moveToBottom","_GetTextWidth","text","fontSize","fontFamily","canvas","ctx","getContext","helper","measureText","_CenterXAbout","center","_FinalizeInfog","_RenderText","_AddGraphSelection","_AddTextSelection","_AddGraphicSelection","helperElem","style","position","getElementById","i","GetSize","GetTextElem","_HTMLToCanvas","query","index","element","querySelector","logging","backgroundColor","scrollY","window","then","GetImage","catch","on","console","log","setAttr","moveToTop","getAttr","GetHandlerElem","setTimeout","HandleOutsideClick","e","target","UpdateTextHandler","spanCSS","UpdateTextElem","Remove","RemoveHandlerElem","UpdateChartDecorators","settings","UpdateChartData","chartData","elem","numerator","denominator","chart","UpdateData","parseInt","_UpdateDecorators","UpdateChartSettings","UpdateGraphicSettings","id","forceUpdate","handlerElem","prev","decoratorSize","decorators","UpdateDecorator","CreateChart","selectedChart","dSettings","GetDecoratorSettingsArray","GetData","GetChartSettings","GetType","GetSettings","_AddMultipleElementSelector","_selectionRectangle","_MultipleSelectorStart","_MultipleSelectorMove","_MultipleSelectorEnd","_MultipleSelectorDeselect","_isSelecting","_mouseX1","getPointerPosition","_mouseX2","_mouseY1","_mouseY2","visible","Math","min","abs","elems","toArray","box","getClientRect","selected","filter","Util","haveIntersection","_hasSelected","_oldNodes"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// AInfographic.js\n// October 26, 2020 \n\nimport Konva from 'konva';\nimport html2canvas from 'html2canvas';\nimport { ChartHandler, GraphicsHandler, TextHandler } from '../Handlers/index';\n\nclass AInfographic \n{\n    /**\n     * @summary     An abstract class the provide structure and common functionality\n     *              to the Infographic type.\n     * @description See summary.\n     * \n     * @requires D3.js\n     * @requires Konva.js\n     * \n     * @source _AddTextSelection() uses code from https://konvajs.org/docs/sandbox/Editable_Text.html\n     * @source Selecting mutliple elements demo uses code from https://konvajs.org/docs/select_and_transform/Basic_demo.html#page-title\n     * @source _DrawSVG code taken from https://konvajs.org/docs/sandbox/SVG_On_Canvas.html\n     * @source Download code taken from https://konvajs.org/docs/data_and_serialization/High-Quality-Export.html\n     * \n     * @param {double} height The height of the canvas element\n     * @param {double} width  The width of the canvas element\n     */\n    constructor(height, width, editorHandler, textCallback, chartCallback, graphicCallback)\n    {\n        if (AInfographic === this.constructor) {\n            throw new TypeError('Abstract class \"AInfographic\" cannot be instantiated');\n        }\n\n        if (this.CreateInfographic === undefined) {\n            throw new TypeError('Types extending \"AInfographic\" must implement CreateInfographic()');\n        }\n\n        if (this.Draw === undefined) {\n            throw new TypeError('Types extending \"AInfographic\" must implement Draw()');\n        }\n\n        this._chartHandler = new ChartHandler();\n        this._textHandler = new TextHandler();\n        this._graphicsHandler = new GraphicsHandler();\n\n        this._tr = new Konva.Transformer({\n            nodes: [],\n            resizeEnabled: false,\n            rotateEnabled: false,\n        });\n\n        this._chartHeight = height;\n        this._chartWidth = width;\n        this._stage = new Konva.Stage({\n            container: 'canvas-container',\n            width: this._chartWidth,\n            height: this._chartHeight,\n        });\n\n        /*this._selectionRectangle = new Konva.Rect({\n            fill: 'rgba(0, 0, 255, 0.5)',\n            visible: false,\n        });\n        this._hasSelected = false;\n        this._isSelecting = false;\n        this._oldNodes = [];\n        this._mouseX1 = 0, this._mouseX2 = 0, this._mouseY1 = 0, this._mouseY2 = 0;*/\n\n        this._main = new Konva.Layer();\n        // this._UIAdder = new UIAdder(this._chartWidth, this._chartHeight);\n\n        this._editorHandler = editorHandler;\n        this._textCallback = textCallback;\n        this._chartCallback = chartCallback;\n        this._graphicCallback = graphicCallback;\n\n        this._selectedTextIndex = -1;\n        this._selectedTextHelper = -1;\n        this._selectedChartIndex = -1;\n        this._selectedGraphicIndex = -1;\n\n        this._stage.add(this._main);\n\n        this._main.add(this._tr);\n\n        this._AddStageBorder();\n    }\n\n    /**\n     * @summary     Returns chart's dimensions to caller.\n     * @description Returns the chart's width and height in the form of a JSON\n     *              object to the caller.\n     * @returns A JSON object containing the chart's width and height.\n     */\n    GetDimensions()\n    {\n        return {\n            width: this._chartWidth,\n            height: this._chartHeight,\n        };\n    }\n\n    /**\n     * @summary     Manages memory for infographic type.\n     * @description A function that is responsible for freeing memory that would \n     *              otherwise cause memory leaks. \n     */\n    Clean()\n    {\n        // Remove chart/text listeners\n        this._RemoveTextListeners();\n        this._RemoveChartListeners();\n        this._RemoveGraphicListeners();\n\n        // Remove all the elements from this._stage\n        this._stage.destroy();\n        this._stage = 0;\n    }\n\n    ClearSelection()\n    {\n        this._tr.nodes([]);\n        this._selectedChartIndex = -1;\n        this._selectedGraphicIndex = -1;\n        this._selectedTextIndex = this._selectedTextHelper = -1;\n    }\n\n    Download()\n    {\n        // function from https://stackoverflow.com/a/15832662/512042\n        function downloadURI(uri, name) {\n            var link = document.createElement('a');\n            link.download = name;\n            link.href = uri;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            link.remove();\n        }\n        var dataURL = this._stage.toDataURL({pixelRatio: 5})\n        downloadURI(dataURL, 'Infographic.png');\n    }\n\n    /**\n     * @summary Removes the event listeners from each text node.\n     */\n    _RemoveTextListeners()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('EditableText');\n        });\n        selection.forEach(textElem => { textElem.off('dblclick'); })\n    }\n\n    /**\n     * @summary Removes the event listeners from each chart node.\n     */\n    _RemoveChartListeners()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('Chart');\n        });\n        selection.forEach(chartElem => { chartElem.off('dblclick'); })\n    }\n\n    _RemoveGraphicListeners()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Graphic');\n        });\n        selection.forEach(group => { group.off('dblclick'); });\n    }\n\n    _CreateImage({x, y, width, height, src, group})\n    {\n        let image = new Image(), imageHelper = new Konva.Image(),\n            imageGroup = new Konva.Group();\n\n        image.onload = () => {\n            imageHelper.setAttrs({\n                x: x, \n                y: y,\n                height: height,\n                width: width,\n                image: image,\n                opacity: 1,\n                stroke: 'black',\n                strokeWidth: 0\n            });\n            imageHelper.cache();\n            imageHelper.filters([\n                Konva.Filters.Contrast,\n                Konva.Filters.Brighten,\n                Konva.Filters.Blur,\n            ]);\n\n            imageHelper.brightness(0);\n            imageHelper.blurRadius(0);\n            imageHelper.contrast(0);\n\n            this._main.batchDraw();\n            image.onload = null;\n        };\n\n        image.src = src;\n        imageGroup.add(imageHelper);\n        group.add(imageGroup);\n        this._graphicsHandler.AddGraphic({\n            type: 'image',\n            graphic: imageHelper,\n            group: imageGroup,\n        });\n    }\n\n    /**\n     * @summary     A function that takes in a font and a font weight and maps it\n     *              to the proper quill code.\n     * \n     * @param {string} font   The font associated with a quill code.\n     * @param {int}    weight The weight associated with a quill code. \n     */\n    _quillMap(font, weight = 0)\n    {\n        if (font === 'museo' && weight === 900) return '900-museo';\n        else if (font === 'canada-type-gibson') {\n            switch (weight) {\n                case 100: return '100-canada';\n                case 200: return '200-canada';\n                case 400: return '400-canada';\n                case 500: return '500-canada';\n                case 600: return '600-canada';\n                case 700: return '700-canada';\n                case 900: return '900-canada';\n                default: return '100-canada';\n            }\n        } else if (font === 'Montserrat') return '200-Montserrat';\n        else if (font === 'Open Sans') return 'Open-Sans';\n        else if (font === 'Roboto') {\n            switch(weight) {\n                case 100: return '100-Roboto';\n                case 300: return '300-Roboto';\n                case 400: return '400-Roboto';\n                case 500: return '500-Roboto';\n                case 700: return '700-Roboto';\n                case 900: return '900-Roboto';\n                default: return '100-Roboto';\n            }\n        }\n    }\n\n    /**\n     * @summary     Adds a black border around the edges of the canvas element.\n     */\n    _AddStageBorder()\n    {\n        var bkg = new Konva.Rect({\n            x: 0,\n            y: 0,\n            width: this._stage.width(),\n            height: this._stage.height(),\n            fill: 'white',\n            stroke: 'black',\n        });\n        this._main.add(bkg);\n        bkg.moveToBottom();\n    }\n\n    /**\n     * @summary     Returns the width of a text element given the text's font.\n     * @description Using canvas' measureText function, _GetTextWidth returns the\n     *              width in pixels of a given piece of text.\n     * \n     * @param {string} text       The text we want to determine the width of.\n     * @param {double} fontSize   The font size of the text we want to find the width of.\n     * @param {string} fontFamily The font family of the text we want to analyze.\n     */\n    _GetTextWidth(text, fontSize, fontFamily)\n    {\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n\n        ctx.font = fontSize + 'px ' + fontFamily;\n        var helper = ctx.measureText(text).width;\n        canvas.remove();\n\n        return helper;\n    }\n    /**\n     * @param {double} width  The width of the element we are centering.\n     * @param {double} center The x-coordinate we want to center about.\n     */\n    _CenterXAbout(width, center)\n    {\n        return center - (width / 2);\n    }\n\n    /**\n     * @summary     Calls additional functions to complete the infographic.\n     * @description Renders all of the text elements and adds the capability to \n     *              edit graphs and text elements.\n     */\n    _FinalizeInfog()\n    {\n        this._RenderText();\n        this._AddGraphSelection();\n        this._AddTextSelection();\n        this._AddGraphicSelection();\n        // this._AddMultipleElementSelector();\n    }\n\n    /**\n     * @summary     Renders all of the text elements.\n     * @description Iterates through all of the elements in textHandler and converts\n     *              them from DOM elements to Konva.Image elements.\n     */\n    _RenderText()\n    {\n        var helperElem = document.createElement('div');\n        helperElem.style.position = 'absolute';\n        document.getElementById('renderHelper').appendChild(helperElem);\n\n        for (var i = 0; i < this._textHandler.GetSize(); i++) {\n            helperElem.appendChild(this._textHandler.GetTextElem(i));\n            this._HTMLToCanvas('.EditableText', i);\n            this._textHandler.GetTextElem(i).remove();\n        }\n        helperElem.remove();\n    }\n\n    /**\n     * @summary     Converts DOM elements on the page to Konva.Image elements\n     * @description Uses the html2canvas module to convert DOM elements located \n     *              within the body into Konva.Image elements.\n     * \n     * @param {int} index The index of the text element we want to convert.\n     */\n    _HTMLToCanvas(query, index)\n    {\n        var element = document.querySelector(query);\n        // var comp = window.getComputedStyle(element, null);\n        html2canvas(element, {\n            logging: false,\n            backgroundColor: null,\n            scrollY: -(window.scrollY),\n            // width: comp.width.replace('px', ''),\n        }).then((image) => {\n            // console.log('image width: ' + image.width)\n            this._textHandler.GetImage(index).image(image);\n            this._main.batchDraw();\n        }).catch(() => {\n            var helperElem = document.createElement('div');\n            helperElem.style.position = 'absolute';\n            document.getElementById('renderHelper').appendChild(helperElem);\n\n            helperElem.appendChild(this._textHandler.GetTextElem(index));\n            this._HTMLToCanvas('.EditableText', index);\n            this._textHandler.GetTextElem(index).remove();\n            helperElem.remove();\n        });\n        /*console.log('width: ' + comp.width);\n        console.log('height: ' + comp.height);\n        console.log('x: ' + comp.x);\n        console.log('y: ' + comp.y)*/\n    }\n\n    /**\n     * @summary     Adds the capability to select and edit text.\n     * @description Iterates through all of the elements in the text handler and\n     *              adds an event listener that triggers when the text element\n     *              is double clicked.\n     */\n    _AddTextSelection()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('EditableText');\n        });\n\n        selection.forEach((textElem) => {\n            textElem.on('dblclick', () => {\n                console.log(textElem)\n                textElem.setAttr('draggable', true);\n\n                this._tr.nodes([textElem]);\n                this._tr.moveToTop();\n                this._main.batchDraw();\n\n                this._selectedTextIndex = textElem.getAttr('id');\n                this._selectedTextHelper = this._selectedTextIndex;\n  \n                this._textCallback(this._textHandler.GetHandlerElem(this._selectedTextIndex))\n                this._editorHandler('text-editor');\n\n                setTimeout(() => {\n                    this._stage.on('click', HandleOutsideClick);\n                });\n\n                var HandleOutsideClick = (e) => {\n                    if (e.target !== textElem) {\n                        this._selectedTextIndex = -1;\n                        this._editorHandler('none');\n                        this._tr.nodes([]);\n                        textElem.setAttr('draggable', false);\n                        this._main.batchDraw();\n                        this._stage.off('click', HandleOutsideClick);\n                    }\n                };\n            });\n        });\n    }\n\n    /**\n     * @summary     Updates current handler element.\n     * @description Updates the text handler element located at _selectedTextIndex\n     *              with data from the parameterized textElem variable.\n     * \n     * @param {JSON} textElem A JSON object containing the updated textElem information.\n     */\n    UpdateTextHandler(textElem)\n    {\n        if (textElem.image === undefined || textElem.textElem === undefined || \n            textElem.group === undefined || textElem.spanCSS === undefined || \n            textElem === 0) {\n            return;\n        } \n        console.log('index: ' + this._selectedTextHelper);\n        this._textHandler.UpdateTextElem({\n            index: this._selectedTextHelper,\n            textElem: textElem.textElem,\n            group: textElem.group,\n            image: textElem.image,\n            spanCSS: textElem.spanCSS,\n        });\n        console.log(this._textHandler);\n        this._selectedTextHelper = -1;\n    }\n\n    Remove()\n    {\n        // TODO remove entries from handler\n        if (this._selectedChartIndex !== -1) {\n            this._tr.nodes([]);\n            this._main.batchDraw();\n            this._chartHandler.RemoveHandlerElem(this._selectedChartIndex);\n            this._selectedChartIndex = -1;\n        } else if (this._selectedTextIndex !== -1) {\n            this._tr.nodes([]);\n            this._main.batchDraw();\n            this._textHandler.RemoveHandlerElem(this._selectedTextIndex);\n            this._selectedChartIndex = -1;\n        } else if (this._selectedGraphicIndex !== -1) {\n            this._tr.nodes([]);\n            this._main.batchDraw();\n            this._graphicsHandler.RemoveHandlerElem(this._selectedGraphicIndex);\n            this._selectedGraphicIndex = -1;\n        }\n    }\n\n    UpdateChartDecorators(settings)\n    {\n        if (settings === 0 || this._selectedChartIndex === -1) return;\n        this._chartHandler.UpdateChartDecorators(this._selectedChartIndex, settings);\n    }\n\n    /**\n     * @summary     Updates the selected chart.\n     * @description Updates the chart (and its associated data) at index \n     *              _selectedChartIndex.\n     * @param {misc} chartData The structure of this variable depends on the \n     *                         type of chart we are dealing with.\n     */\n    UpdateChartData(chartData)\n    {\n        if (chartData === 0 || this._selectedChartIndex === -1) return;\n        var elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex),\n            name = elem.group.getAttr('name');\n        if (name === 'Selectable Chart Waffle') {\n            // We assume that the data will be formatted as follows\n            // data = {\n            //    numerator: {num}, denominator: {num}\n            // }\n            if (chartData.numerator === 0 || chartData.denominator === 0) return;\n            var numerator = chartData.numerator, denominator = chartData.denominator;\n            elem.chart.UpdateData(parseInt(numerator), parseInt(denominator));\n        } else {\n            // We assume that the data will be formated as follows\n            // data = [\n            //    { category: {string}, value: {float}, color: {string}}, ...   \n            // ]\n            elem.chart.UpdateData(chartData);\n        } \n\n        this._UpdateDecorators(elem);\n    }\n\n    UpdateChartSettings(settings)\n    {\n        if (settings === 0 || this._selectedChartIndex === -1) return;\n        let elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex);\n        elem.chart.UpdateChartSettings(settings);\n        this._UpdateDecorators(elem);\n    }\n\n    UpdateGraphicSettings(settings)\n    {\n        if (settings === 0 || this._selectedGraphicIndex === -1) return;\n        this._graphicsHandler.UpdateGraphicSettings({\n            id: this._selectedGraphicIndex, \n            settings:settings\n        });\n        this._tr.forceUpdate();\n        this._main.batchDraw();\n    }\n\n    /**\n     * @summary     Updates decorators.\n     * @description Iterates though all the decorators in handlerElem and updates\n     *              them.\n     * \n     * @param {JSON} handlerElem \n     */\n    _UpdateDecorators(handlerElem)\n    {\n        var prev = handlerElem.chart;\n        for (var i = 0; i <= handlerElem.decoratorSize; i++) {\n            handlerElem.decorators[i].UpdateDecorator(prev);\n            prev = handlerElem.decorators[i];\n        }\n        prev.CreateChart();\n        this._tr.forceUpdate();\n        this._main.batchDraw();\n    }\n\n    /**\n     * @summary     Adds the capability to select and edit graphs.\n     * @description Iterates through all of the elements in the graph handler and\n     *              adds an event listener when they are double clicked on.\n     */\n    _AddGraphSelection()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('Chart');\n        });\n        selection.forEach((chart) => {\n            chart.on('dblclick', () => {\n                this._selectedChartIndex = parseInt(chart.getAttr('id'));\n                this._tr.nodes([chart]);\n                this._tr.moveToTop();\n                this._main.batchDraw();\n                chart.setAttr('draggable', true);\n\n                let selectedChart = this._chartHandler.GetHandlerElem(this._selectedChartIndex).chart,\n                    dSettings = this._chartHandler.GetDecoratorSettingsArray(this._selectedChartIndex);\n                this._chartCallback(selectedChart.GetData(), selectedChart.GetChartSettings(), dSettings);\n\n                if (chart.getAttr('name') === 'Selectable Chart Waffle') {\n                    this._editorHandler('waffle-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Pie') {\n                    this._editorHandler('pie-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Bar') {\n                    this._editorHandler('bar-editor')\n                } else if (chart.getAttr('name') === 'Selectable Chart Stacked') {\n                    this._editorHandler('stacked-bar-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Line') {\n                    this._editorHandler('line-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Icon') {\n                    this._editorHandler('icon-bar-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Donut') {\n                    this._editorHandler('donut-editor');\n                }\n\n                setTimeout(() => {\n                    this._stage.on('click', HandleOutsideClick);\n                });\n\n                var HandleOutsideClick = (e) => {\n                    if (e.target !== chart) {\n                        this._selectedChartIndex = -1;\n                        this._editorHandler('none');\n                        this._tr.nodes([]);\n                        chart.setAttr('draggable', false);\n                        this._main.batchDraw();\n                        this._stage.off('click', HandleOutsideClick);\n                    }\n                };\n            });\n        });\n    }\n\n    _AddGraphicSelection()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Graphic');\n        });\n\n        selection.forEach((group) => {\n            group.on('dblclick', () => {\n                this._selectedGraphicIndex = group.getAttr('id');\n                let type = this._graphicsHandler.GetType(this._selectedGraphicIndex);\n                this._tr.nodes([group]);\n                this._tr.moveToTop();\n                this._main.batchDraw();\n                group.setAttr('draggable', true);\n\n                this._editorHandler(type + '-editor');\n\n                this._graphicCallback(\n                    this._graphicsHandler.GetSettings(this._selectedGraphicIndex)\n                );\n\n                setTimeout(() => {\n                    this._stage.on('click', HandleOutsideClick);\n                });\n\n                var HandleOutsideClick = (e) => {\n                    if (e.target !== group) {\n                        this._selectedGraphicIndex = -1;\n                        this._tr.nodes([]);\n                        group.setAttr('draggable', false);\n                        this._main.batchDraw();\n                        this._editorHandler('none');\n                        this._stage.off('click', HandleOutsideClick);\n                    }\n                };\n            });\n        });\n    }\n\n    _AddMultipleElementSelector()\n    {\n        this._main.add(this._selectionRectangle);\n        this._MultipleSelectorStart();\n        this._MultipleSelectorMove();\n        this._MultipleSelectorEnd();\n        this._MultipleSelectorDeselect();\n    }\n\n    _MultipleSelectorStart()\n    {\n        this._stage.on('mousedown touchstart', e => {\n            //if (e.target !== this._stage) return;\n            this._isSelecting = true;\n\n            this._mouseX1 = this._stage.getPointerPosition().x;\n            this._mouseX2 = this._mouseX1;\n            this._mouseY1 = this._stage.getPointerPosition().y;\n            this._mouseY2 = this._mouseY1;\n\n            this._selectionRectangle.visible(true);\n            this._selectionRectangle.width(0);\n            this._selectionRectangle.height(0);\n            this._main.batchDraw();\n        });\n    }\n\n    _MultipleSelectorMove()\n    {\n        this._stage.on('mousemove touchmove', () => {\n            if (!this._selectionRectangle.visible()) return;\n\n            this._mouseX2 = this._stage.getPointerPosition().x;\n            this._mouseY2 = this._stage.getPointerPosition().y;\n\n            this._selectionRectangle.setAttrs({\n                x: Math.min(this._mouseX1, this._mouseX2),\n                y: Math.min(this._mouseY1, this._mouseY2),\n                width: Math.abs(this._mouseX2 - this._mouseX1),\n                height: Math.abs(this._mouseY2 - this._mouseY1),\n            });\n\n            this._main.batchDraw();\n        });\n    }\n\n    _MultipleSelectorEnd()\n    {\n        this._stage.on('mouseup touchend', () => {\n            if (!this._selectionRectangle.visible()) return;\n            // selection code \n            var elems = this._stage.find('.Selectable').toArray();\n            var box = this._selectionRectangle.getClientRect();\n            /*var selected = elems.filter((element) => {\n                if (Konva.Util.haveIntersection(box, element.getClientRect())) {\n                    alert('h')\n                    return element;\n                }\n                var x = element.getClientRect().x,\n                    y = element.getClientRect().y;\n                if (x >= box.x &&\n                    x <= box.x + box.width &&\n                    y >= box.y &&\n                    y <= box.y + box.height)\n                {\n                    element.setAttr('draggable', true);\n                    this._oldNodes.push(element);\n                    return element;\n                }\n            });*/\n\n            var selected = elems.filter((elem) =>\n                Konva.Util.haveIntersection(box, elem.getClientRect())\n            );\n            console.log(selected)\n\n            this._tr.nodes(selected);\n            this._tr.moveToTop();\n            this._main.batchDraw();\n\n            setTimeout(() => {\n                this._selectionRectangle.visible(false);\n                this._main.batchDraw();\n                this._hasSelected = true;\n                this._isSelecting = false;\n            });\n        });\n    }\n\n    _MultipleSelectorDeselect()\n    {\n        this._stage.on('click tap', e => {\n            if (this._selectionRectangle.visible()) return;\n            if (this._hasSelected) {\n                this._oldNodes.forEach(node => {\n                    node.setAttr('draggable', false);\n                });\n                \n                this._tr.nodes([]);\n                this._main.batchDraw();\n                this._hasSelected = false;\n                return;\n            }\n        });\n    }\n}\n\nexport { AInfographic };"]},"metadata":{},"sourceType":"module"}