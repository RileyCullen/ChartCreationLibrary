{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/Components/StackedBarInputFields.js\";\nimport { faPlusSquare, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport '../../../../css/React/Editors/StackedBarInputFields.css';\nimport { ColorPicker, TextField } from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StackedBarInputFields extends React.Component {\n  render() {\n    let data = this._ReformatData(),\n        categories = Array.from(new Set(this.props.chartData.map(d => d.category))),\n        cols = 10;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stacked-bar-grid-four\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            position: 'relative',\n            left: '15px'\n          },\n          children: \"Subcategory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stacked-bar-grid-auto\",\n          style: {\n            width: 'max-content',\n            position: 'relative',\n            left: '25px'\n          },\n          children: categories.map((d, i) => {\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              id: i + '-category',\n              index: i,\n              initialValue: d,\n              rows: 1,\n              cols: cols,\n              onChange: (value, index) => {\n                this._SetCategory(categories, value, index);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          style: {\n            fontSize: '20px',\n            position: 'relative',\n            left: '10px',\n            top: '2px'\n          },\n          icon: faPlusSquare\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), data.map((d, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stacked-bar-grid-four extra-margin\",\n            children: [/*#__PURE__*/_jsxDEV(ColorPicker, {\n              id: \"stacked-bar-color-picker\",\n              color: d.data[0].color,\n              onChange: color => {\n                this._SetColor(data, color, i);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              id: i + '-subcategory',\n              index: i,\n              initialValue: d.subcategory,\n              rows: 1,\n              cols: cols + 5,\n              onChange: (value, index) => {\n                this._SetSubcategory(data, value, index);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stacked-bar-grid-auto\",\n              children: d.data.map((d, i) => {\n                let content = false;\n                categories.forEach((e, j) => {\n                  if (e === d.category) {\n                    content = /*#__PURE__*/_jsxDEV(TextField, {\n                      id: j + '-category',\n                      index: d.originalIndex,\n                      initialValue: d.value,\n                      rows: 1,\n                      cols: cols,\n                      onChange: (d, i) => {\n                        this._SetChartData(d, i, 'value');\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 79,\n                      columnNumber: 63\n                    }, this);\n                  }\n                });\n                return content;\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              className: \"remove-row-icon\",\n              icon: faTimesCircle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-row-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Add a Row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this);\n  }\n\n  _ReformatData() {\n    let subcategories = new Set(this.props.chartData.map(d => d.subcategory)),\n        helper = [];\n\n    for (let item of subcategories) {\n      helper.splice(helper.length, 0, {\n        subcategory: item,\n        data: []\n      });\n    }\n\n    helper.forEach(d => {\n      this.props.chartData.forEach((e, i) => {\n        let subcategory = d.subcategory;\n\n        if (subcategory === e.subcategory) {\n          d.data.splice(d.data.length, 0, {\n            category: e.category,\n            value: e.value,\n            color: e.color,\n            originalIndex: i\n          });\n        }\n      });\n    });\n    return helper;\n  }\n\n  _SetChartData(d, i, type) {\n    if (d === '') return;\n\n    let data = this._CreateDataCopy();\n\n    if (type === 'value') data[i].value = parseFloat(d);\n    this.props.setChartData(data);\n  }\n\n  _SetSubcategory(data, d, i) {\n    let tmp = this._CreateDataCopy();\n\n    data[i].data.forEach(content => {\n      tmp[content.originalIndex].subcategory = d;\n    });\n    this.props.setChartData(tmp);\n  }\n\n  _SetColor(data, d, i) {\n    let tmp = this._CreateDataCopy();\n\n    data[i].data.forEach(content => {\n      tmp[content.originalIndex].color = d;\n    });\n    this.props.setChartData(tmp);\n  }\n\n  _SetCategory(categories, d, i) {\n    let tmp = this._CreateDataCopy();\n\n    let final = tmp.map(elem => {\n      if (elem.category === categories[i]) {\n        return {\n          category: d,\n          subcategory: elem.subcategory,\n          value: elem.value,\n          color: elem.color\n        };\n      }\n\n      return elem;\n    });\n    this.props.setChartData(final);\n  }\n\n  _CreateDataCopy() {\n    return this.props.chartData.map(d => {\n      return {\n        category: d.category,\n        subcategory: d.subcategory,\n        value: d.value,\n        color: d.color\n      };\n    });\n  }\n\n}\n\nexport { StackedBarInputFields };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/Components/StackedBarInputFields.js"],"names":["faPlusSquare","faTimesCircle","FontAwesomeIcon","React","ColorPicker","TextField","StackedBarInputFields","Component","render","data","_ReformatData","categories","Array","from","Set","props","chartData","map","d","category","cols","position","left","width","i","value","index","_SetCategory","fontSize","top","color","_SetColor","subcategory","_SetSubcategory","content","forEach","e","j","originalIndex","_SetChartData","subcategories","helper","item","splice","length","type","_CreateDataCopy","parseFloat","setChartData","tmp","final","elem"],"mappings":"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","sourcesContent":["import { faPlusSquare, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\nimport '../../../../css/React/Editors/StackedBarInputFields.css';\n\nimport { ColorPicker, TextField } from './index';\n\nclass StackedBarInputFields extends React.Component\n{\n    render()\n    {\n        let data = this._ReformatData(), \n            categories = Array.from(new Set(this.props.chartData.map(d => d.category))),\n            cols = 10;\n        return (\n            <div>\n                <div className='stacked-bar-grid-four'>\n                    <p>Color</p>\n                    <p style={{\n                        position: 'relative',\n                        left: '15px'\n                    }}>Subcategory</p>\n                    <div className='stacked-bar-grid-auto' style={{\n                        width: 'max-content',\n                        position: 'relative',\n                        left: '25px'\n                    }}>\n                        {\n                            categories.map((d, i)=> {\n                                return (\n                                    <TextField \n                                        id={i + '-category'}\n                                        index={i}\n                                        initialValue={d}\n                                        rows={1}\n                                        cols={cols}\n                                        onChange={(value, index) => { \n                                            this._SetCategory(categories, value, index);\n                                        }}\n                                    />\n                                );       \n                            })\n                        }\n                    </div>\n                    <FontAwesomeIcon style={{\n                        fontSize: '20px',\n                        position: 'relative',\n                        left: '10px',\n                        top: '2px'\n                    }}icon={faPlusSquare} />\n                </div>\n                {\n                    data.map((d, i) => {\n                        return (\n                        <div>\n                            <div className='stacked-bar-grid-four extra-margin'>\n                                <ColorPicker\n                                    id='stacked-bar-color-picker' \n                                    color={d.data[0].color}\n                                    onChange={(color) => { \n                                        this._SetColor(data, color, i);\n                                    }}\n                                />\n                                <TextField \n                                    id={i + '-subcategory'}\n                                    index={i}\n                                    initialValue={d.subcategory}\n                                    rows={1}\n                                    cols={cols + 5}\n                                    onChange={(value, index) => { this._SetSubcategory(data, value, index); }}\n                                />\n                                <div className='stacked-bar-grid-auto'>\n                                    {\n                                        d.data.map((d, i) => {\n                                            let content = false;\n                                            categories.forEach((e, j) => {\n                                                if (e === d.category) {\n                                                    content = <TextField \n                                                    id={j + '-category'}\n                                                    index={d.originalIndex}\n                                                    initialValue={d.value}\n                                                    rows={1}\n                                                    cols={cols}\n                                                    onChange={(d, i) => { \n                                                        this._SetChartData(\n                                                            d, i, 'value'\n                                                        )\n                                                    }}\n                                                    />\n                                                }\n                                            });\n                                            return content;\n                                        })\n                                    }\n                                </div>\n                                <FontAwesomeIcon className='remove-row-icon' icon={faTimesCircle} />\n                            </div>\n                        </div>\n                    )})\n                }\n                <div className='add-row-container'>\n                    <button>Add a Row</button>\n                </div>\n            </div>\n        )\n    }\n\n    _ReformatData()\n    {\n        let subcategories = new Set(this.props.chartData.map(d => d.subcategory)),\n            helper = [];\n        \n        for (let item of subcategories) {\n            helper.splice(helper.length, 0, { subcategory: item, data: []})\n        }\n\n        helper.forEach((d) => {\n            this.props.chartData.forEach((e, i) => {\n                let subcategory = d.subcategory;\n                if (subcategory === e.subcategory) {\n                    d.data.splice(d.data.length, 0, {\n                        category: e.category, \n                        value: e.value,\n                        color: e.color,\n                        originalIndex: i\n                    });\n                }\n            });\n        });\n\n        return helper;\n    }\n\n    _SetChartData(d, i, type)\n    {\n        if (d === '') return;\n        let data = this._CreateDataCopy();\n\n        if (type === 'value') data[i].value = parseFloat(d);\n\n        this.props.setChartData(data);\n    }\n\n    _SetSubcategory(data, d, i)\n    {\n        let tmp = this._CreateDataCopy();\n        data[i].data.forEach((content) => {\n            tmp[content.originalIndex].subcategory = d;\n        });\n        this.props.setChartData(tmp);\n    }\n\n    _SetColor(data, d, i) \n    {\n        let tmp = this._CreateDataCopy();\n        data[i].data.forEach(content => {\n            tmp[content.originalIndex].color = d;\n        });\n        this.props.setChartData(tmp);\n    }\n\n    _SetCategory(categories, d, i)\n    {\n        let tmp = this._CreateDataCopy();\n        let final = tmp.map(elem => {\n            if (elem.category === categories[i]) {\n                return {\n                    category: d,\n                    subcategory: elem.subcategory,\n                    value: elem.value,\n                    color: elem.color,\n                }\n            }\n            return elem;\n        });\n        this.props.setChartData(final);\n    }\n\n    _CreateDataCopy()\n    {\n        return this.props.chartData.map(d => {\n            return {\n                category: d.category,\n                subcategory: d.subcategory,\n                value: d.value,\n                color: d.color\n            }\n        });\n    }\n}\n\nexport { StackedBarInputFields };"]},"metadata":{},"sourceType":"module"}