{"ast":null,"code":"import { CategoryLabelDecorator, ChartDescriptorDecorator, DataValueDecorator, RemainderDecorator, XAxisDecorator, YAxisDecorator } from \"./BarChart\";\nimport { IconCategoryDecorator } from \"./IconBarChart/Decorators/IconCategoryDecorator\";\nimport { IconDataValueDecorator } from \"./IconBarChart/Decorators/IconDataValueDecorator\";\nimport { LineDataValueDecorator } from \"./LineChart/Decorators/LineDataValueDecorator\";\nimport { LineXAxisDecorator } from \"./LineChart/Decorators/LineXAxisDecorator\";\nimport { LineYAxisDecorator } from \"./LineChart/Decorators/LineYAxisDecorator\";\nimport { ChartOutlineDecorator, FirstStatisticDecorator } from \"./PieChart\";\nimport { StatisticDecorator } from \"./WaffleChart/Decorators/StatisticDecorator\";\n\nfunction BuildBarChartDecoratorList(chart, dSettings) {\n  let decoratorList = [],\n      size = 0,\n      prevChart = chart;\n  Object.keys(dSettings).forEach(key => {\n    switch (key) {\n      case 'remainder':\n        decoratorList[size] = new RemainderDecorator({\n          chart: prevChart,\n          barColor: dSettings.remainder.color.barColor\n        });\n        break;\n\n      case 'categoryLabel':\n        decoratorList[size] = new CategoryLabelDecorator({\n          chart: prevChart,\n          isWithinBars: dSettings.categoryLabel.location.isWithinBars,\n          isTop: dSettings.categoryLabel.location.isTop,\n          font: dSettings.categoryLabel.font\n        });\n        break;\n\n      case 'chartDescriptor':\n        decoratorList[size] = new ChartDescriptorDecorator({\n          chart: prevChart,\n          isTop: dSettings.chartDescriptor.location.isTop,\n          maxPerRow: dSettings.chartDescriptor.labelSettings.maxPerRow,\n          font: dSettings.chartDescriptor.font\n        });\n        break;\n\n      case 'dataValue':\n        decoratorList[size] = new DataValueDecorator({\n          chart: prevChart,\n          displayPercentage: dSettings.dataValue.display.isPercentage,\n          displayCategory: dSettings.dataValue.display.isCategory,\n          isMiddle: dSettings.dataValue.location.isMiddle,\n          font: dSettings.dataValue.font\n        });\n        break;\n\n      case 'xAxis':\n        decoratorList[size] = new XAxisDecorator({\n          chart: prevChart,\n          axisLabel: dSettings.xAxis.axis.label,\n          lineColor: dSettings.xAxis.color.lineColor,\n          lineStrokeWidth: dSettings.xAxis.size.lineStrokeWidth,\n          tickStrokeWidth: dSettings.xAxis.size.tickStrokeWidth,\n          font: dSettings.xAxis.font\n        });\n        break;\n\n      case 'yAxis':\n        decoratorList[size] = new YAxisDecorator({\n          chart: prevChart,\n          axisLabel: dSettings.yAxis.axis.label,\n          lineColor: dSettings.yAxis.color.lineColor,\n          lineStrokeWidth: dSettings.yAxis.size.lineStrokeWidth,\n          tickStrokeWidth: dSettings.yAxis.size.tickStrokeWidth,\n          font: dSettings.yAxis.font\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    prevChart = decoratorList[size];\n    size++;\n  });\n  return decoratorList;\n}\n\n_c = BuildBarChartDecoratorList;\n\nfunction BuildWaffleChartDecoratorList(chart, dSettings) {\n  let decoratorList = [],\n      size = 0,\n      prevChart = chart;\n  Object.keys(dSettings).forEach(key => {\n    switch (key) {\n      case 'statistic':\n        decoratorList[size] = new StatisticDecorator({\n          chart: prevChart,\n          middleText: dSettings.statistic.display.middleText,\n          font: dSettings.statistic.font\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    prevChart = decoratorList[size];\n    size++;\n  });\n  return decoratorList;\n}\n\n_c2 = BuildWaffleChartDecoratorList;\n\nfunction BuildPieChartDecoratorList(chart, dSettings) {\n  let decoratorList = [],\n      size = 0,\n      prevChart = chart;\n  Object.keys(dSettings).forEach(key => {\n    switch (key) {\n      case 'chartOutline':\n        decoratorList[size] = new ChartOutlineDecorator({\n          chart: prevChart,\n          radius: dSettings.chartOutline.size.radius,\n          outlineWidth: dSettings.chartOutline.size.outlineWidth,\n          outlineColor: dSettings.chartOutline.color.outlineColor\n        });\n        break;\n\n      case 'statistic':\n        decoratorList[size] = new FirstStatisticDecorator({\n          chart: prevChart,\n          font: dSettings.statistic.font\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    prevChart = decoratorList[size];\n    size++;\n  });\n  return decoratorList;\n}\n\n_c3 = BuildPieChartDecoratorList;\n\nfunction BuildLineChartDecoratorList(chart, dSettings) {\n  let decoratorList = [],\n      size = 0,\n      prevChart = chart;\n  Object.keys(dSettings).forEach(key => {\n    switch (key) {\n      case 'yAxis':\n        decoratorList[size] = new LineYAxisDecorator({\n          chart: prevChart,\n          axisLabel: dSettings.yAxis.axis.label,\n          lineColor: dSettings.yAxis.axis.color,\n          lineStrokeWidth: dSettings.yAxis.axis.lineStrokeWidth,\n          tickStrokeWidth: dSettings.yAxis.axis.tickStrokeWidth,\n          tickCount: dSettings.yAxis.axis.tickCount,\n          includeZero: dSettings.yAxis.axis.includeZero,\n          font: dSettings.yAxis.font\n        });\n        break;\n\n      case 'xAxis':\n        decoratorList[size] = new LineXAxisDecorator({\n          chart: prevChart,\n          axisLabel: dSettings.xAxis.axis.label,\n          lineColor: dSettings.xAxis.axis.color,\n          lineStrokeWidth: dSettings.xAxis.axis.axisStrokeWidth,\n          tickStrokeWidth: dSettings.xAxis.axis.axisTickWidth,\n          font: dSettings.xAxis.font\n        });\n        break;\n\n      case 'dataValue':\n        decoratorList[size] = new LineDataValueDecorator({\n          chart: prevChart,\n          location: dSettings.dataValue.location.location,\n          font: dSettings.dataValue.font\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    prevChart = decoratorList[size];\n    size++;\n  });\n  return decoratorList;\n}\n\n_c4 = BuildLineChartDecoratorList;\n\nfunction BuildIconBarChartDecoratorList(chart, dSettings) {\n  let decoratorList = [],\n      size = 0,\n      prevChart = chart;\n  Object.keys(dSettings).forEach(key => {\n    switch (key) {\n      case 'category':\n        decoratorList[size] = new IconCategoryDecorator({\n          chart: prevChart,\n          isWithinBars: dSettings.category.location.isWithinBars,\n          isTop: dSettings.category.location.isTop,\n          font: dSettings.category.font\n        });\n        break;\n\n      case 'dataValue':\n        decoratorList[size] = new IconDataValueDecorator({\n          chart: prevChart,\n          isPercentage: dSettings.dataValue.display.percentage,\n          isCategory: dSettings.dataValue.display.category,\n          isMiddle: dSettings.dataValue.display.isMiddle,\n          backgroundStroke: dSettings.dataValue.backgroundColor.stroke,\n          backgroundFill: dSettings.dataValue.backgroundColor.fill,\n          font: dSettings.dataValue.font\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    prevChart = decoratorList[size];\n    size++;\n  });\n  return decoratorList;\n}\n\n_c5 = BuildIconBarChartDecoratorList;\nexport { BuildBarChartDecoratorList, BuildIconBarChartDecoratorList, BuildLineChartDecoratorList, BuildWaffleChartDecoratorList, BuildPieChartDecoratorList };\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"BuildBarChartDecoratorList\");\n$RefreshReg$(_c2, \"BuildWaffleChartDecoratorList\");\n$RefreshReg$(_c3, \"BuildPieChartDecoratorList\");\n$RefreshReg$(_c4, \"BuildLineChartDecoratorList\");\n$RefreshReg$(_c5, \"BuildIconBarChartDecoratorList\");","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/DecoratorBuilder.js"],"names":["CategoryLabelDecorator","ChartDescriptorDecorator","DataValueDecorator","RemainderDecorator","XAxisDecorator","YAxisDecorator","IconCategoryDecorator","IconDataValueDecorator","LineDataValueDecorator","LineXAxisDecorator","LineYAxisDecorator","ChartOutlineDecorator","FirstStatisticDecorator","StatisticDecorator","BuildBarChartDecoratorList","chart","dSettings","decoratorList","size","prevChart","Object","keys","forEach","key","barColor","remainder","color","isWithinBars","categoryLabel","location","isTop","font","chartDescriptor","maxPerRow","labelSettings","displayPercentage","dataValue","display","isPercentage","displayCategory","isCategory","isMiddle","axisLabel","xAxis","axis","label","lineColor","lineStrokeWidth","tickStrokeWidth","yAxis","BuildWaffleChartDecoratorList","middleText","statistic","BuildPieChartDecoratorList","radius","chartOutline","outlineWidth","outlineColor","BuildLineChartDecoratorList","tickCount","includeZero","axisStrokeWidth","axisTickWidth","BuildIconBarChartDecoratorList","category","percentage","backgroundStroke","backgroundColor","stroke","backgroundFill","fill"],"mappings":"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","sourcesContent":["import { CategoryLabelDecorator, ChartDescriptorDecorator, DataValueDecorator, RemainderDecorator, XAxisDecorator, YAxisDecorator } from \"./BarChart\";\nimport { IconCategoryDecorator } from \"./IconBarChart/Decorators/IconCategoryDecorator\";\nimport { IconDataValueDecorator } from \"./IconBarChart/Decorators/IconDataValueDecorator\";\nimport { LineDataValueDecorator } from \"./LineChart/Decorators/LineDataValueDecorator\";\nimport { LineXAxisDecorator } from \"./LineChart/Decorators/LineXAxisDecorator\";\nimport { LineYAxisDecorator } from \"./LineChart/Decorators/LineYAxisDecorator\";\nimport { ChartOutlineDecorator, FirstStatisticDecorator } from \"./PieChart\";\nimport { StatisticDecorator } from \"./WaffleChart/Decorators/StatisticDecorator\";\n\nfunction BuildBarChartDecoratorList(chart, dSettings)\n{\n    let decoratorList = [], size = 0, prevChart = chart;\n    Object.keys(dSettings).forEach(key => {\n        switch(key) {\n            case 'remainder':\n                decoratorList[size] = new RemainderDecorator({\n                    chart: prevChart,\n                    barColor: dSettings.remainder.color.barColor,\n                });\n                break;\n            case 'categoryLabel':\n                decoratorList[size] = new CategoryLabelDecorator({\n                    chart: prevChart,\n                    isWithinBars: dSettings.categoryLabel.location.isWithinBars,\n                    isTop: dSettings.categoryLabel.location.isTop,\n                    font: dSettings.categoryLabel.font,\n                });\n                break;\n            case 'chartDescriptor':\n                decoratorList[size] = new ChartDescriptorDecorator({\n                    chart: prevChart,\n                    isTop: dSettings.chartDescriptor.location.isTop,\n                    maxPerRow: dSettings.chartDescriptor.labelSettings.maxPerRow,\n                    font: dSettings.chartDescriptor.font,\n                });\n                break;\n            case 'dataValue':\n                decoratorList[size] = new DataValueDecorator({\n                    chart: prevChart,\n                    displayPercentage: dSettings.dataValue.display.isPercentage,\n                    displayCategory: dSettings.dataValue.display.isCategory,\n                    isMiddle: dSettings.dataValue.location.isMiddle,\n                    font: dSettings.dataValue.font\n                });\n                break;\n            case 'xAxis':\n                decoratorList[size] = new XAxisDecorator({\n                    chart: prevChart,\n                    axisLabel: dSettings.xAxis.axis.label,\n                    lineColor: dSettings.xAxis.color.lineColor,\n                    lineStrokeWidth: dSettings.xAxis.size.lineStrokeWidth,\n                    tickStrokeWidth: dSettings.xAxis.size.tickStrokeWidth,\n                    font: dSettings.xAxis.font\n                });\n                break;\n            case 'yAxis':\n                decoratorList[size] = new YAxisDecorator({\n                    chart: prevChart,\n                    axisLabel: dSettings.yAxis.axis.label,\n                    lineColor: dSettings.yAxis.color.lineColor,\n                    lineStrokeWidth: dSettings.yAxis.size.lineStrokeWidth,\n                    tickStrokeWidth: dSettings.yAxis.size.tickStrokeWidth,\n                    font: dSettings.yAxis.font\n                });\n                break;\n            default:\n                break;\n        }\n        prevChart = decoratorList[size];\n        size++;\n    });\n    return decoratorList;\n}\n\nfunction BuildWaffleChartDecoratorList(chart, dSettings)\n{\n    let decoratorList = [], size = 0, prevChart = chart;\n    Object.keys(dSettings).forEach(key => {\n        switch(key) {\n            case 'statistic':\n                decoratorList[size] = new StatisticDecorator({\n                    chart: prevChart,\n                    middleText: dSettings.statistic.display.middleText,\n                    font: dSettings.statistic.font,\n                });\n                break;\n            default:\n                break;\n        }\n        prevChart = decoratorList[size];\n        size++;\n    });\n    return decoratorList;\n}\n\nfunction BuildPieChartDecoratorList(chart, dSettings)\n{\n    let decoratorList = [], size = 0, prevChart = chart;\n    Object.keys(dSettings).forEach(key => {\n        switch(key) {\n            case 'chartOutline':\n                decoratorList[size] = new ChartOutlineDecorator({\n                    chart: prevChart,\n                    radius: dSettings.chartOutline.size.radius,\n                    outlineWidth: dSettings.chartOutline.size.outlineWidth,\n                    outlineColor: dSettings.chartOutline.color.outlineColor,\n                });\n                break;\n            case 'statistic':\n                decoratorList[size] = new FirstStatisticDecorator({\n                    chart: prevChart,\n                    font: dSettings.statistic.font,\n                });\n                break;\n            default:\n                break;\n        }\n        prevChart = decoratorList[size];\n        size++;\n    });\n    return decoratorList;\n}\n\nfunction BuildLineChartDecoratorList(chart, dSettings)\n{\n    let decoratorList = [], size = 0, prevChart = chart;\n    Object.keys(dSettings).forEach(key => {\n        switch(key) {\n            case 'yAxis':\n                decoratorList[size] = new LineYAxisDecorator({\n                    chart: prevChart,\n                    axisLabel: dSettings.yAxis.axis.label,\n                    lineColor: dSettings.yAxis.axis.color,\n                    lineStrokeWidth: dSettings.yAxis.axis.lineStrokeWidth,\n                    tickStrokeWidth: dSettings.yAxis.axis.tickStrokeWidth,\n                    tickCount: dSettings.yAxis.axis.tickCount,\n                    includeZero: dSettings.yAxis.axis.includeZero,\n                    font: dSettings.yAxis.font,\n                });\n                break;\n            case 'xAxis':\n                decoratorList[size] = new LineXAxisDecorator({\n                    chart: prevChart,\n                    axisLabel: dSettings.xAxis.axis.label,\n                    lineColor: dSettings.xAxis.axis.color,\n                    lineStrokeWidth: dSettings.xAxis.axis.axisStrokeWidth,\n                    tickStrokeWidth: dSettings.xAxis.axis.axisTickWidth,\n                    font: dSettings.xAxis.font\n                });\n                break;\n            case 'dataValue':\n                decoratorList[size] = new LineDataValueDecorator({\n                    chart: prevChart,\n                    location: dSettings.dataValue.location.location,\n                    font: dSettings.dataValue.font\n                });\n                break;\n            default:\n                break;\n        }\n        prevChart = decoratorList[size];\n        size++;\n    });\n    return decoratorList;\n}\n\nfunction BuildIconBarChartDecoratorList(chart, dSettings)\n{\n    let decoratorList = [], size = 0, prevChart = chart;\n    Object.keys(dSettings).forEach(key => {\n        switch(key) {\n            case 'category':\n                decoratorList[size] = new IconCategoryDecorator({\n                    chart: prevChart,\n                    isWithinBars: dSettings.category.location.isWithinBars,\n                    isTop: dSettings.category.location.isTop,\n                    font: dSettings.category.font,\n                });\n                break;\n            case 'dataValue':\n                decoratorList[size] = new IconDataValueDecorator({\n                    chart: prevChart,\n                    isPercentage: dSettings.dataValue.display.percentage,\n                    isCategory: dSettings.dataValue.display.category,\n                    isMiddle: dSettings.dataValue.display.isMiddle,\n                    backgroundStroke: dSettings.dataValue.backgroundColor.stroke,\n                    backgroundFill: dSettings.dataValue.backgroundColor.fill,\n                    font: dSettings.dataValue.font,\n                });\n                break;\n            default:\n                break;\n        }\n        prevChart = decoratorList[size];\n        size++;\n    });\n    return decoratorList;\n}\n\nexport { BuildBarChartDecoratorList, BuildIconBarChartDecoratorList, \n    BuildLineChartDecoratorList, BuildWaffleChartDecoratorList, BuildPieChartDecoratorList };"]},"metadata":{},"sourceType":"module"}