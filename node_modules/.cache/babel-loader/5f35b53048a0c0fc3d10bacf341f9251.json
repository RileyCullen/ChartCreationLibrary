{"ast":null,"code":"// Cullen, Riley\n// AInfographic.js\n// October 26, 2020 \nimport Konva from 'konva';\nimport html2canvas from 'html2canvas';\nimport { ChartHandler, GraphicsHandler, TextHandler } from '../Handlers/index';\nimport { BasicBarChart, StackedBarChart } from '../Charts/BarChart/index';\nimport { IconBarChart } from '../Charts/IconBarChart/index';\nimport { GenerateIconDataArray, WaffleChart } from '../Charts/WaffleChart';\nimport { LineChart, LineXAxisDecorator, LineYAxisDecorator } from '../Charts/LineChart';\nimport { DonutChart, PieChart } from '../Charts/PieChart';\nimport { RectangleHeader, RibbonHeader } from '../Headers';\nimport { MessageBubble } from '../ToolTips';\n\nclass AInfographic {\n  /**\n   * @summary     An abstract class the provide structure and common functionality\n   *              to the Infographic type.\n   * @description See summary.\n   * \n   * @requires D3.js\n   * @requires Konva.js\n   * \n   * @source _AddTextSelection() uses code from https://konvajs.org/docs/sandbox/Editable_Text.html\n   * @source Selecting mutliple elements demo uses code from https://konvajs.org/docs/select_and_transform/Basic_demo.html#page-title\n   * @source _DrawSVG code taken from https://konvajs.org/docs/sandbox/SVG_On_Canvas.html\n   * @source Download code taken from https://konvajs.org/docs/data_and_serialization/High-Quality-Export.html\n   * \n   * @param {double} height The height of the canvas element\n   * @param {double} width  The width of the canvas element\n   */\n  constructor(height, width, editorHandler, textCallback, chartCallback, graphicCallback) {\n    if (AInfographic === this.constructor) {\n      throw new TypeError('Abstract class \"AInfographic\" cannot be instantiated');\n    }\n\n    if (this.CreateInfographic === undefined) {\n      throw new TypeError('Types extending \"AInfographic\" must implement CreateInfographic()');\n    }\n\n    if (this.Draw === undefined) {\n      throw new TypeError('Types extending \"AInfographic\" must implement Draw()');\n    }\n\n    this._chartHandler = new ChartHandler();\n    this._textHandler = new TextHandler();\n    this._graphicsHandler = new GraphicsHandler();\n    this._tr = new Konva.Transformer({\n      nodes: [],\n      resizeEnabled: false,\n      rotateEnabled: false\n    });\n    this._chartHeight = height;\n    this._chartWidth = width;\n    this._stage = new Konva.Stage({\n      container: 'canvas-container',\n      width: this._chartWidth,\n      height: this._chartHeight\n    });\n    /*this._selectionRectangle = new Konva.Rect({\n        fill: 'rgba(0, 0, 255, 0.5)',\n        visible: false,\n    });\n    this._hasSelected = false;\n    this._isSelecting = false;\n    this._oldNodes = [];\n    this._mouseX1 = 0, this._mouseX2 = 0, this._mouseY1 = 0, this._mouseY2 = 0;*/\n\n    this._main = new Konva.Layer();\n    this._bkg = 0; // this._UIAdder = new UIAdder(this._chartWidth, this._chartHeight);\n\n    this._editorHandler = editorHandler;\n    this._textCallback = textCallback;\n    this._chartCallback = chartCallback;\n    this._graphicCallback = graphicCallback;\n    this._selectedTextIndex = -1;\n    this._selectedTextHelper = -1;\n    this._selectedChartIndex = -1;\n    this._selectedGraphicIndex = -1;\n    this._colorScheme = {\n      primary: '#999',\n      secondary: '#000'\n    };\n\n    this._stage.add(this._main);\n\n    this._main.add(this._tr);\n\n    this._AddStageBorder();\n  }\n  /**\n   * @summary     Returns chart's dimensions to caller.\n   * @description Returns the chart's width and height in the form of a JSON\n   *              object to the caller.\n   * @returns A JSON object containing the chart's width and height.\n   */\n\n\n  GetDimensions() {\n    return {\n      width: this._chartWidth,\n      height: this._chartHeight\n    };\n  }\n  /**\n   * @summary     Manages memory for infographic type.\n   * @description A function that is responsible for freeing memory that would \n   *              otherwise cause memory leaks. \n   */\n\n\n  Clean() {\n    // Remove chart/text listeners\n    this._RemoveTextListeners();\n\n    this._RemoveChartListeners();\n\n    this._RemoveGraphicListeners(); // Remove all the elements from this._stage\n\n\n    this._stage.destroy();\n\n    this._stage = 0;\n  }\n\n  ClearSelection() {\n    this._tr.nodes([]);\n\n    this._selectedChartIndex = -1;\n    this._selectedGraphicIndex = -1;\n    this._selectedTextIndex = this._selectedTextHelper = -1;\n  }\n\n  Download() {\n    // function from https://stackoverflow.com/a/15832662/512042\n    function downloadURI(uri, name) {\n      var link = document.createElement('a');\n      link.download = name;\n      link.href = uri;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      link.remove();\n    }\n\n    var dataURL = this._stage.toDataURL({\n      pixelRatio: 5\n    });\n\n    downloadURI(dataURL, 'Infographic.png');\n  }\n\n  UpdateLayering(layerAction) {\n    if (this._selectedChartIndex !== -1) {\n      this._chartHandler.UpdateLayering(this._selectedChartIndex, layerAction);\n    } else if (this._selectedGraphicIndex !== -1) {\n      this._graphicsHandler.UpdateLayering(this._selectedGraphicIndex, layerAction);\n    } else if (this._selectedTextIndex !== -1) {\n      this._textHandler.UpdateLayering(this._selectedTextIndex, layerAction);\n    }\n  }\n\n  UpdateBackground(settings) {\n    if (settings === 0) return;\n\n    this._bkg.setAttrs({\n      fill: settings.fill\n    });\n  }\n\n  InsertElement({\n    type,\n    element\n  }) {\n    let group = new Konva.Group({\n      x: this._chartWidth / 2,\n      y: this._chartHeight / 2\n    });\n\n    this._main.add(group);\n\n    if (type === 'chart') {\n      let chart = 0,\n          decoratorList = [];\n\n      switch (element) {\n        case 'Bar':\n          chart = new BasicBarChart({\n            data: [{\n              category: 'A',\n              value: 10,\n              color: this._colorScheme.primary\n            }, {\n              category: 'B',\n              value: 30,\n              color: this._colorScheme.primary\n            }],\n            group: group,\n            width: 100,\n            height: 100,\n            padding: 0.2\n          });\n          break;\n\n        case 'Stacked':\n          chart = new StackedBarChart({\n            data: [{\n              category: 'A',\n              subcategory: 'one',\n              value: 10,\n              color: this._colorScheme.primary\n            }, {\n              category: 'A',\n              subcategory: 'two',\n              value: 20,\n              color: this._colorScheme.secondary\n            }],\n            group: group,\n            width: 100,\n            height: 100,\n            padding: 0.2\n          });\n          break;\n\n        case 'Icon':\n          chart = new IconBarChart({\n            data: [{\n              category: 'A',\n              value: 15,\n              color: this._colorScheme.primary\n            }, {\n              category: 'B',\n              value: 30,\n              color: this._colorScheme.primary\n            }],\n            group: group,\n            width: 100,\n            height: 100,\n            padding: 50,\n            remainderColor: this._colorScheme.secondary\n          });\n          break;\n\n        case 'Waffle':\n          chart = new WaffleChart({\n            numerator: 1,\n            denominator: 3,\n            group: group,\n            presetA: GenerateIconDataArray({\n              icon: '\\uf004',\n              color: this._colorScheme.primary,\n              offset: 85,\n              font: '\"Font Awesome 5 Free\"'\n            }),\n            presetB: GenerateIconDataArray({\n              icon: '\\uf004',\n              color: this._colorScheme.secondary,\n              offset: 85,\n              font: '\"Font Awesome 5 Free\"'\n            }),\n            fontSize: 80,\n            isDynamicResize: false\n          });\n          break;\n\n        case 'Line':\n          chart = new LineChart({\n            data: [{\n              category: 'A',\n              value: 10\n            }, {\n              category: 'B',\n              value: 20\n            }],\n            group: group,\n            chartWidth: 100,\n            chartHeight: 100,\n            lineWidth: 1,\n            pointRadius: 3,\n            lineColor: this._colorScheme.primary,\n            pointColor: this._colorScheme.secondary\n          });\n          decoratorList[0] = new LineXAxisDecorator({\n            chart: chart\n          });\n          decoratorList[1] = new LineYAxisDecorator({\n            chart: decoratorList[0]\n          });\n          break;\n\n        case 'Pie':\n          chart = new PieChart({\n            data: [{\n              category: 'A',\n              value: 10,\n              color: this._colorScheme.primary\n            }, {\n              category: 'B',\n              value: 90,\n              color: this._colorScheme.secondary\n            }],\n            group: group,\n            radius: 50\n          });\n          break;\n\n        case 'Donut':\n          chart = new DonutChart({\n            data: [{\n              category: 'A',\n              value: 20,\n              color: this._colorScheme.primary\n            }, {\n              category: 'B',\n              value: 80,\n              color: this._colorScheme.secondary\n            }],\n            group: group,\n            radius: 50,\n            innerRadius: 35\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      if (chart !== 0) {\n        this._chartHandler.AddChart({\n          chart: chart,\n          group: group,\n          type: element\n        });\n\n        decoratorList.forEach(d => {\n          this._chartHandler.AddDecorator({\n            decorator: d,\n            id: this._chartHandler.GetCurrChartID()\n          });\n        });\n        if (decoratorList.length === 0) chart.CreateChart();else decoratorList[decoratorList.length - 1].CreateChart();\n        group.on('dblclick', () => {\n          this._ChartHelper(group);\n        });\n        group.on('dragend', () => {\n          this._SwitchContainerOnDrag(group);\n        });\n\n        this._ChartHelper(group);\n      }\n    } else if (type === 'icon') {\n      let icon = new Konva.Text({\n        text: String.fromCharCode(parseInt(element, 16)),\n        fontFamily: '\"Font Awesome 5 Free\"',\n        fontStyle: '900',\n        fill: this._colorScheme.primary,\n        fontSize: 100\n      });\n\n      this._graphicsHandler.AddGraphic({\n        type: type,\n        graphic: icon,\n        group: group\n      });\n\n      group.on('dblclick', () => {\n        this._GraphicHelper(group);\n      });\n      group.on('dragend', () => {\n        this._SwitchContainerOnDrag(group);\n      });\n\n      this._GraphicHelper(group);\n    } else if (type === 'text') {\n      // Set up text\n      let div = document.createElement('div'),\n          textElem = '<p><span style=\"line-height: 1.2; font-size: 20px; font-family: museo, serif;\">' + element + '</span></p>';\n      div.innerHTML = textElem; // Set up text handler \n\n      this._textHandler.AddTextElem({\n        textElem: div,\n        group: group,\n        x: 0,\n        y: 0,\n        rotateBy: 0\n      });\n\n      this._textHandler.SetCSSInfo({\n        id: this._textHandler.GetCurrID(),\n        fontFamily: this._quillMap('museo', 900),\n        fontSize: '20px',\n        textColor: '#000',\n        lineHeight: '1.2',\n        align: 'center'\n      }); // Render the text \n\n\n      var helperElem = document.createElement('div');\n      helperElem.style.position = 'absolute';\n      document.getElementById('renderHelper').appendChild(helperElem);\n      helperElem.appendChild(div);\n\n      this._HTMLToCanvas('.EditableText', this._textHandler.GetCurrID());\n\n      div.remove();\n      helperElem.remove();\n\n      let helper = this._textHandler.GetImage(this._textHandler.GetCurrID());\n\n      helper.on('dblclick', () => {\n        this._TextHelper(helper);\n      });\n      helper.on('dragend', () => {\n        this._SwitchContainerOnDrag(helper);\n      });\n\n      this._TextHelper(helper);\n    } else if (type === 'bkg-elem') {\n      let graphic = 0;\n\n      switch (element) {\n        case 'ribbon-header':\n          graphic = new RibbonHeader({\n            colorOne: this._colorScheme.primary,\n            colorTwo: this._colorScheme.secondary,\n            group: group,\n            hWidth: 300,\n            hHeight: 25,\n            iWidth: this._chartWidth,\n            iHeight: this._chartHeight\n          });\n          break;\n\n        case 'rectangle-header':\n          graphic = new RectangleHeader({\n            x: 0,\n            y: 0,\n            width: 300,\n            height: 200,\n            cornerRadius: 0,\n            fill: this._colorScheme.primary,\n            group: group\n          });\n          break;\n\n        case 'message-bubble':\n          graphic = new MessageBubble(group, 200, 100, this._colorScheme.primary, 0, 0);\n          break;\n\n        default:\n          break;\n      }\n\n      this._graphicsHandler.AddGraphic({\n        type: 'header',\n        graphic: graphic,\n        group: group\n      });\n\n      group.on('dblclick', () => {\n        this._GraphicHelper(group);\n      });\n      group.on('dragend', () => {\n        this._SwitchContainerOnDrag(group);\n      });\n\n      this._GraphicHelper(group);\n    }\n\n    this._main.batchDraw();\n  }\n\n  _CreateSwitchableContainer(attrs = {}, id = '') {\n    attrs.name = 'Switchable Container ' + id;\n    return new Konva.Group(attrs);\n  }\n  /**\n   * @summary Removes the event listeners from each text node.\n   */\n\n\n  _RemoveTextListeners() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('EditableText');\n    });\n\n    selection.forEach(textElem => {\n      textElem.off('dblclick');\n    });\n  }\n  /**\n   * @summary Removes the event listeners from each chart node.\n   */\n\n\n  _RemoveChartListeners() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('Chart');\n    });\n\n    selection.forEach(chartElem => {\n      chartElem.off('dblclick');\n    });\n  }\n\n  _RemoveGraphicListeners() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Graphic');\n    });\n\n    selection.forEach(group => {\n      group.off('dblclick');\n    });\n  }\n\n  _CreateImage({\n    x,\n    y,\n    width,\n    height,\n    src,\n    group\n  }) {\n    let image = new Image(),\n        imageHelper = new Konva.Image(),\n        imageGroup = new Konva.Group();\n\n    image.onload = () => {\n      imageHelper.setAttrs({\n        x: x,\n        y: y,\n        height: height,\n        width: width,\n        image: image,\n        opacity: 1,\n        stroke: 'black',\n        strokeWidth: 0\n      });\n      imageHelper.cache();\n      imageHelper.filters([Konva.Filters.Contrast, Konva.Filters.Brighten, Konva.Filters.Blur]);\n      imageHelper.brightness(0);\n      imageHelper.blurRadius(0);\n      imageHelper.contrast(0);\n\n      this._main.batchDraw();\n\n      image.onload = null;\n    };\n\n    image.src = src;\n    imageGroup.add(imageHelper);\n    group.add(imageGroup);\n\n    this._graphicsHandler.AddGraphic({\n      type: 'image',\n      graphic: imageHelper,\n      group: imageGroup\n    });\n  }\n  /**\n   * @summary     A function that takes in a font and a font weight and maps it\n   *              to the proper quill code.\n   * \n   * @param {string} font   The font associated with a quill code.\n   * @param {int}    weight The weight associated with a quill code. \n   */\n\n\n  _quillMap(font, weight = 0) {\n    if (font === 'museo' && weight === 900) return '900-museo';else if (font === 'canada-type-gibson') {\n      switch (weight) {\n        case 100:\n          return '100-canada';\n\n        case 200:\n          return '200-canada';\n\n        case 400:\n          return '400-canada';\n\n        case 500:\n          return '500-canada';\n\n        case 600:\n          return '600-canada';\n\n        case 700:\n          return '700-canada';\n\n        case 900:\n          return '900-canada';\n\n        default:\n          return '100-canada';\n      }\n    } else if (font === 'Montserrat') return '200-Montserrat';else if (font === 'Open Sans') return 'Open-Sans';else if (font === 'Roboto') {\n      switch (weight) {\n        case 100:\n          return '100-Roboto';\n\n        case 300:\n          return '300-Roboto';\n\n        case 400:\n          return '400-Roboto';\n\n        case 500:\n          return '500-Roboto';\n\n        case 700:\n          return '700-Roboto';\n\n        case 900:\n          return '900-Roboto';\n\n        default:\n          return '100-Roboto';\n      }\n    }\n  }\n  /**\n   * @summary     Adds a black border around the edges of the canvas element.\n   */\n\n\n  _AddStageBorder() {\n    this._bkg = new Konva.Rect({\n      x: 0,\n      y: 0,\n      width: this._stage.width(),\n      height: this._stage.height(),\n      fill: 'white',\n      stroke: 'black'\n    });\n\n    this._main.add(this._bkg);\n\n    this._bkg.moveToBottom();\n  }\n  /**\n   * @summary     Returns the width of a text element given the text's font.\n   * @description Using canvas' measureText function, _GetTextWidth returns the\n   *              width in pixels of a given piece of text.\n   * \n   * @param {string} text       The text we want to determine the width of.\n   * @param {double} fontSize   The font size of the text we want to find the width of.\n   * @param {string} fontFamily The font family of the text we want to analyze.\n   */\n\n\n  _GetTextWidth(text, fontSize, fontFamily) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = fontSize + 'px ' + fontFamily;\n    var helper = ctx.measureText(text).width;\n    canvas.remove();\n    return helper;\n  }\n  /**\n   * @param {double} width  The width of the element we are centering.\n   * @param {double} center The x-coordinate we want to center about.\n   */\n\n\n  _CenterXAbout(width, center) {\n    return center - width / 2;\n  }\n  /**\n   * @summary     Calls additional functions to complete the infographic.\n   * @description Renders all of the text elements and adds the capability to \n   *              edit graphs and text elements.\n   */\n\n\n  _FinalizeInfog() {\n    this._RenderText();\n\n    this._AddGraphSelection();\n\n    this._AddTextSelection();\n\n    this._AddGraphicSelection(); // this._AddMultipleElementSelector();\n\n  }\n  /**\n   * @summary     Renders all of the text elements.\n   * @description Iterates through all of the elements in textHandler and converts\n   *              them from DOM elements to Konva.Image elements.\n   */\n\n\n  _RenderText() {\n    var helperElem = document.createElement('div');\n    helperElem.style.position = 'absolute';\n    document.getElementById('renderHelper').appendChild(helperElem);\n\n    for (var i = 0; i < this._textHandler.GetSize(); i++) {\n      helperElem.appendChild(this._textHandler.GetTextElem(i));\n\n      this._HTMLToCanvas('.EditableText', i);\n\n      this._textHandler.GetTextElem(i).remove();\n    }\n\n    helperElem.remove();\n  }\n  /**\n   * @summary     Converts DOM elements on the page to Konva.Image elements\n   * @description Uses the html2canvas module to convert DOM elements located \n   *              within the body into Konva.Image elements.\n   * \n   * @param {int} index The index of the text element we want to convert.\n   */\n\n\n  _HTMLToCanvas(query, index) {\n    var element = document.querySelector(query); // var comp = window.getComputedStyle(element, null);\n\n    html2canvas(element, {\n      logging: false,\n      backgroundColor: null,\n      scrollY: -window.scrollY // width: comp.width.replace('px', ''),\n\n    }).then(image => {\n      // console.log('image width: ' + image.width)\n      this._textHandler.GetImage(index).image(image);\n\n      this._main.batchDraw();\n    }).catch(() => {\n      var helperElem = document.createElement('div');\n      helperElem.style.position = 'absolute';\n      document.getElementById('renderHelper').appendChild(helperElem);\n      helperElem.appendChild(this._textHandler.GetTextElem(index));\n\n      this._HTMLToCanvas('.EditableText', index);\n\n      this._textHandler.GetTextElem(index).remove();\n\n      helperElem.remove();\n    });\n    /*console.log('width: ' + comp.width);\n    console.log('height: ' + comp.height);\n    console.log('x: ' + comp.x);\n    console.log('y: ' + comp.y)*/\n  }\n  /**\n   * @summary     Adds the capability to select and edit text.\n   * @description Iterates through all of the elements in the text handler and\n   *              adds an event listener that triggers when the text element\n   *              is double clicked.\n   */\n\n\n  _AddTextSelection() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('EditableText');\n    });\n\n    selection.forEach(textElem => {\n      textElem.on('dblclick', () => {\n        this._TextHelper(textElem);\n      });\n      textElem.on('dragend', () => {\n        this._SwitchContainerOnDrag(textElem);\n      });\n    });\n  }\n\n  _TextHelper(textElem) {\n    textElem.setAttr('draggable', true);\n\n    this._tr.nodes([textElem]);\n\n    this._tr.moveToTop();\n\n    this._main.batchDraw();\n\n    this._selectedTextIndex = textElem.getAttr('id');\n    this._selectedTextHelper = this._selectedTextIndex;\n\n    this._textCallback(this._textHandler.GetHandlerElem(this._selectedTextIndex));\n\n    this._editorHandler('text-editor');\n\n    setTimeout(() => {\n      this._stage.on('click', HandleOutsideClick);\n    });\n\n    var HandleOutsideClick = e => {\n      if (e.target !== textElem) {\n        this._selectedTextIndex = -1;\n\n        this._editorHandler('none');\n\n        this._tr.nodes([]);\n\n        textElem.setAttr('draggable', false);\n\n        this._main.batchDraw();\n\n        this._stage.off('click', HandleOutsideClick);\n      }\n    };\n  }\n  /**\n   * @summary     Updates current handler element.\n   * @description Updates the text handler element located at _selectedTextIndex\n   *              with data from the parameterized textElem variable.\n   * \n   * @param {JSON} textElem A JSON object containing the updated textElem information.\n   */\n\n\n  UpdateTextHandler(textElem) {\n    if (textElem.image === undefined || textElem.textElem === undefined || textElem.group === undefined || textElem.spanCSS === undefined || textElem === 0) {\n      return;\n    }\n\n    this._textHandler.UpdateTextElem({\n      index: this._selectedTextHelper,\n      textElem: textElem.textElem,\n      group: textElem.group,\n      image: textElem.image,\n      spanCSS: textElem.spanCSS\n    });\n\n    this._selectedTextHelper = -1;\n\n    this._main.batchDraw();\n  }\n\n  Remove() {\n    // TODO remove entries from handler\n    if (this._selectedChartIndex !== -1) {\n      this._tr.nodes([]);\n\n      this._main.batchDraw();\n\n      this._chartHandler.RemoveHandlerElem(this._selectedChartIndex);\n\n      this._selectedChartIndex = -1;\n    } else if (this._selectedTextIndex !== -1) {\n      this._tr.nodes([]);\n\n      this._main.batchDraw();\n\n      this._textHandler.RemoveHandlerElem(this._selectedTextIndex);\n\n      this._selectedTextIndex = this._selectedTextHelper = -1;\n    } else if (this._selectedGraphicIndex !== -1) {\n      this._tr.nodes([]);\n\n      this._main.batchDraw();\n\n      this._graphicsHandler.RemoveHandlerElem(this._selectedGraphicIndex);\n\n      this._selectedGraphicIndex = -1;\n    }\n  }\n\n  UpdateChartDecorators(settings) {\n    if (settings === 0 || this._selectedChartIndex === -1) return;\n\n    this._chartHandler.UpdateChartDecorators(this._selectedChartIndex, settings);\n  }\n  /**\n   * @summary     Updates the selected chart.\n   * @description Updates the chart (and its associated data) at index \n   *              _selectedChartIndex.\n   * @param {misc} chartData The structure of this variable depends on the \n   *                         type of chart we are dealing with.\n   */\n\n\n  UpdateChartData(chartData) {\n    if (chartData === 0 || this._selectedChartIndex === -1) return;\n\n    var elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex),\n        name = elem.group.getAttr('name');\n\n    if (name === 'Selectable Chart Waffle') {\n      // We assume that the data will be formatted as follows\n      // data = {\n      //    numerator: {num}, denominator: {num}\n      // }\n      if (chartData.numerator === 0 || chartData.denominator === 0) return;\n      var numerator = chartData.numerator,\n          denominator = chartData.denominator;\n      elem.chart.UpdateData(parseInt(numerator), parseInt(denominator));\n    } else {\n      // We assume that the data will be formated as follows\n      // data = [\n      //    { category: {string}, value: {float}, color: {string}}, ...   \n      // ]\n      elem.chart.UpdateData(chartData);\n    }\n\n    this._UpdateDecorators(elem);\n  }\n\n  UpdateChartSettings(settings) {\n    if (settings === 0 || this._selectedChartIndex === -1) return;\n\n    let elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex);\n\n    elem.chart.UpdateChartSettings(settings);\n\n    this._UpdateDecorators(elem);\n  }\n\n  UpdateGraphicSettings(settings) {\n    if (settings === 0 || this._selectedGraphicIndex === -1) return;\n\n    this._graphicsHandler.UpdateGraphicSettings({\n      id: this._selectedGraphicIndex,\n      settings: settings\n    });\n\n    this._tr.forceUpdate();\n\n    this._main.batchDraw();\n  }\n  /**\n   * @summary     Updates decorators.\n   * @description Iterates though all the decorators in handlerElem and updates\n   *              them.\n   * \n   * @param {JSON} handlerElem \n   */\n\n\n  _UpdateDecorators(handlerElem) {\n    var prev = handlerElem.chart;\n\n    for (var i = 0; i <= handlerElem.decoratorSize; i++) {\n      handlerElem.decorators[i].UpdateDecorator(prev);\n      prev = handlerElem.decorators[i];\n    }\n\n    prev.CreateChart();\n\n    this._tr.forceUpdate();\n\n    this._main.batchDraw();\n  }\n  /**\n   * @summary     Adds the capability to select and edit graphs.\n   * @description Iterates through all of the elements in the graph handler and\n   *              adds an event listener when they are double clicked on.\n   */\n\n\n  _AddGraphSelection() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Selectable') && node.hasName('Chart');\n    });\n\n    selection.forEach(chart => {\n      /**\n       * Adds ability to select and edit graphs.\n       */\n      chart.on('dblclick', () => {\n        this._ChartHelper(chart);\n      });\n      chart.on('dragend', () => {\n        this._SwitchContainerOnDrag(chart);\n      });\n    });\n  }\n\n  _ChartHelper(chart) {\n    this._selectedChartIndex = parseInt(chart.getAttr('id'));\n\n    this._tr.nodes([chart]);\n\n    this._tr.moveToTop();\n\n    this._main.batchDraw();\n\n    chart.setAttr('draggable', true);\n\n    let selectedChart = this._chartHandler.GetHandlerElem(this._selectedChartIndex).chart,\n        dSettings = this._chartHandler.GetDecoratorSettingsArray(this._selectedChartIndex);\n\n    this._chartCallback(selectedChart.GetData(), selectedChart.GetChartSettings(), dSettings);\n\n    if (chart.getAttr('name') === 'Selectable Chart Waffle') {\n      this._editorHandler('waffle-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Pie') {\n      this._editorHandler('pie-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Bar') {\n      this._editorHandler('bar-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Stacked') {\n      this._editorHandler('stacked-bar-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Line') {\n      this._editorHandler('line-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Icon') {\n      this._editorHandler('icon-bar-editor');\n    } else if (chart.getAttr('name') === 'Selectable Chart Donut') {\n      this._editorHandler('donut-editor');\n    }\n\n    setTimeout(() => {\n      this._stage.on('click', HandleOutsideClick);\n    });\n\n    var HandleOutsideClick = e => {\n      if (e.target !== chart) {\n        this._selectedChartIndex = -1;\n\n        this._editorHandler('none');\n\n        this._tr.nodes([]);\n\n        chart.setAttr('draggable', false);\n\n        this._main.batchDraw();\n\n        this._stage.off('click', HandleOutsideClick);\n      }\n    };\n  }\n\n  _AddGraphicSelection() {\n    var selection = this._stage.find(node => {\n      return node.hasName('Graphic');\n    });\n\n    selection.forEach(group => {\n      group.on('dblclick', () => {\n        this._GraphicHelper(group);\n      });\n      group.on('dragend', () => {\n        this._SwitchContainerOnDrag(group);\n      });\n    });\n  }\n\n  _GraphicHelper(group) {\n    this._selectedGraphicIndex = group.getAttr('id');\n\n    let type = this._graphicsHandler.GetType(this._selectedGraphicIndex);\n\n    this._tr.nodes([group]);\n\n    this._tr.moveToTop();\n\n    this._main.batchDraw();\n\n    group.setAttr('draggable', true);\n\n    this._editorHandler(type + '-editor');\n\n    this._graphicCallback(this._graphicsHandler.GetSettings(this._selectedGraphicIndex));\n\n    setTimeout(() => {\n      this._stage.on('click', HandleOutsideClick);\n    });\n\n    var HandleOutsideClick = e => {\n      if (e.target !== group) {\n        this._selectedGraphicIndex = -1;\n\n        this._tr.nodes([]);\n\n        group.setAttr('draggable', false);\n\n        this._main.batchDraw();\n\n        this._editorHandler('none');\n\n        this._stage.off('click', HandleOutsideClick);\n      }\n    };\n  }\n\n  _SwitchContainerOnDrag(elem) {\n    let selection = this._stage.find(node => {\n      return node.hasName('Switchable') && node.hasName('Container');\n    }),\n        parent = this._FindTopContainer(elem);\n\n    selection = selection.filter(d => parent !== d);\n    selection.forEach(group => {\n      if (Konva.Util.haveIntersection(group.getClientRect(), elem.getClientRect())) {\n        let absPos = elem.getAbsolutePosition();\n        elem.moveTo(group);\n        elem.absolutePosition({\n          x: absPos.x,\n          y: absPos.y\n        });\n      }\n    });\n  }\n\n  _FindTopContainer(elem) {\n    let parent = elem.getParent();\n\n    while (parent.getDepth() > 2 && !parent.hasName('Switchable')) {\n      parent = parent.getParent();\n    }\n\n    return parent;\n  }\n\n  _AddMultipleElementSelector() {\n    this._main.add(this._selectionRectangle);\n\n    this._MultipleSelectorStart();\n\n    this._MultipleSelectorMove();\n\n    this._MultipleSelectorEnd();\n\n    this._MultipleSelectorDeselect();\n  }\n\n  _MultipleSelectorStart() {\n    this._stage.on('mousedown touchstart', e => {\n      //if (e.target !== this._stage) return;\n      this._isSelecting = true;\n      this._mouseX1 = this._stage.getPointerPosition().x;\n      this._mouseX2 = this._mouseX1;\n      this._mouseY1 = this._stage.getPointerPosition().y;\n      this._mouseY2 = this._mouseY1;\n\n      this._selectionRectangle.visible(true);\n\n      this._selectionRectangle.width(0);\n\n      this._selectionRectangle.height(0);\n\n      this._main.batchDraw();\n    });\n  }\n\n  _MultipleSelectorMove() {\n    this._stage.on('mousemove touchmove', () => {\n      if (!this._selectionRectangle.visible()) return;\n      this._mouseX2 = this._stage.getPointerPosition().x;\n      this._mouseY2 = this._stage.getPointerPosition().y;\n\n      this._selectionRectangle.setAttrs({\n        x: Math.min(this._mouseX1, this._mouseX2),\n        y: Math.min(this._mouseY1, this._mouseY2),\n        width: Math.abs(this._mouseX2 - this._mouseX1),\n        height: Math.abs(this._mouseY2 - this._mouseY1)\n      });\n\n      this._main.batchDraw();\n    });\n  }\n\n  _MultipleSelectorEnd() {\n    this._stage.on('mouseup touchend', () => {\n      if (!this._selectionRectangle.visible()) return; // selection code \n\n      var elems = this._stage.find('.Selectable').toArray();\n\n      var box = this._selectionRectangle.getClientRect();\n      /*var selected = elems.filter((element) => {\n          if (Konva.Util.haveIntersection(box, element.getClientRect())) {\n              alert('h')\n              return element;\n          }\n          var x = element.getClientRect().x,\n              y = element.getClientRect().y;\n          if (x >= box.x &&\n              x <= box.x + box.width &&\n              y >= box.y &&\n              y <= box.y + box.height)\n          {\n              element.setAttr('draggable', true);\n              this._oldNodes.push(element);\n              return element;\n          }\n      });*/\n\n\n      var selected = elems.filter(elem => Konva.Util.haveIntersection(box, elem.getClientRect()));\n      console.log(selected);\n\n      this._tr.nodes(selected);\n\n      this._tr.moveToTop();\n\n      this._main.batchDraw();\n\n      setTimeout(() => {\n        this._selectionRectangle.visible(false);\n\n        this._main.batchDraw();\n\n        this._hasSelected = true;\n        this._isSelecting = false;\n      });\n    });\n  }\n\n  _MultipleSelectorDeselect() {\n    this._stage.on('click tap', e => {\n      if (this._selectionRectangle.visible()) return;\n\n      if (this._hasSelected) {\n        this._oldNodes.forEach(node => {\n          node.setAttr('draggable', false);\n        });\n\n        this._tr.nodes([]);\n\n        this._main.batchDraw();\n\n        this._hasSelected = false;\n        return;\n      }\n    });\n  }\n\n}\n\nexport { AInfographic };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/InfographicTemplates/AInfographic.js"],"names":["Konva","html2canvas","ChartHandler","GraphicsHandler","TextHandler","BasicBarChart","StackedBarChart","IconBarChart","GenerateIconDataArray","WaffleChart","LineChart","LineXAxisDecorator","LineYAxisDecorator","DonutChart","PieChart","RectangleHeader","RibbonHeader","MessageBubble","AInfographic","constructor","height","width","editorHandler","textCallback","chartCallback","graphicCallback","TypeError","CreateInfographic","undefined","Draw","_chartHandler","_textHandler","_graphicsHandler","_tr","Transformer","nodes","resizeEnabled","rotateEnabled","_chartHeight","_chartWidth","_stage","Stage","container","_main","Layer","_bkg","_editorHandler","_textCallback","_chartCallback","_graphicCallback","_selectedTextIndex","_selectedTextHelper","_selectedChartIndex","_selectedGraphicIndex","_colorScheme","primary","secondary","add","_AddStageBorder","GetDimensions","Clean","_RemoveTextListeners","_RemoveChartListeners","_RemoveGraphicListeners","destroy","ClearSelection","Download","downloadURI","uri","name","link","document","createElement","download","href","body","appendChild","click","removeChild","remove","dataURL","toDataURL","pixelRatio","UpdateLayering","layerAction","UpdateBackground","settings","setAttrs","fill","InsertElement","type","element","group","Group","x","y","chart","decoratorList","data","category","value","color","padding","subcategory","remainderColor","numerator","denominator","presetA","icon","offset","font","presetB","fontSize","isDynamicResize","chartWidth","chartHeight","lineWidth","pointRadius","lineColor","pointColor","radius","innerRadius","AddChart","forEach","d","AddDecorator","decorator","id","GetCurrChartID","length","CreateChart","on","_ChartHelper","_SwitchContainerOnDrag","Text","text","String","fromCharCode","parseInt","fontFamily","fontStyle","AddGraphic","graphic","_GraphicHelper","div","textElem","innerHTML","AddTextElem","rotateBy","SetCSSInfo","GetCurrID","_quillMap","textColor","lineHeight","align","helperElem","style","position","getElementById","_HTMLToCanvas","helper","GetImage","_TextHelper","colorOne","colorTwo","hWidth","hHeight","iWidth","iHeight","cornerRadius","batchDraw","_CreateSwitchableContainer","attrs","selection","find","node","hasName","off","chartElem","_CreateImage","src","image","Image","imageHelper","imageGroup","onload","opacity","stroke","strokeWidth","cache","filters","Filters","Contrast","Brighten","Blur","brightness","blurRadius","contrast","weight","Rect","moveToBottom","_GetTextWidth","canvas","ctx","getContext","measureText","_CenterXAbout","center","_FinalizeInfog","_RenderText","_AddGraphSelection","_AddTextSelection","_AddGraphicSelection","i","GetSize","GetTextElem","query","index","querySelector","logging","backgroundColor","scrollY","window","then","catch","setAttr","moveToTop","getAttr","GetHandlerElem","setTimeout","HandleOutsideClick","e","target","UpdateTextHandler","spanCSS","UpdateTextElem","Remove","RemoveHandlerElem","UpdateChartDecorators","UpdateChartData","chartData","elem","UpdateData","_UpdateDecorators","UpdateChartSettings","UpdateGraphicSettings","forceUpdate","handlerElem","prev","decoratorSize","decorators","UpdateDecorator","selectedChart","dSettings","GetDecoratorSettingsArray","GetData","GetChartSettings","GetType","GetSettings","parent","_FindTopContainer","filter","Util","haveIntersection","getClientRect","absPos","getAbsolutePosition","moveTo","absolutePosition","getParent","getDepth","_AddMultipleElementSelector","_selectionRectangle","_MultipleSelectorStart","_MultipleSelectorMove","_MultipleSelectorEnd","_MultipleSelectorDeselect","_isSelecting","_mouseX1","getPointerPosition","_mouseX2","_mouseY1","_mouseY2","visible","Math","min","abs","elems","toArray","box","selected","console","log","_hasSelected","_oldNodes"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,WAAxC,QAA2D,mBAA3D;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,0BAA/C;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,qBAAT,EAAgCC,WAAhC,QAAmD,uBAAnD;AACA,SAASC,SAAT,EAAoBC,kBAApB,EAAwCC,kBAAxC,QAAkE,qBAAlE;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,oBAArC;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,YAA9C;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,MAAMC,YAAN,CACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,aAAhB,EAA+BC,YAA/B,EAA6CC,aAA7C,EAA4DC,eAA5D,EACX;AACI,QAAIP,YAAY,KAAK,KAAKC,WAA1B,EAAuC;AACnC,YAAM,IAAIO,SAAJ,CAAc,sDAAd,CAAN;AACH;;AAED,QAAI,KAAKC,iBAAL,KAA2BC,SAA/B,EAA0C;AACtC,YAAM,IAAIF,SAAJ,CAAc,mEAAd,CAAN;AACH;;AAED,QAAI,KAAKG,IAAL,KAAcD,SAAlB,EAA6B;AACzB,YAAM,IAAIF,SAAJ,CAAc,sDAAd,CAAN;AACH;;AAED,SAAKI,aAAL,GAAqB,IAAI5B,YAAJ,EAArB;AACA,SAAK6B,YAAL,GAAoB,IAAI3B,WAAJ,EAApB;AACA,SAAK4B,gBAAL,GAAwB,IAAI7B,eAAJ,EAAxB;AAEA,SAAK8B,GAAL,GAAW,IAAIjC,KAAK,CAACkC,WAAV,CAAsB;AAC7BC,MAAAA,KAAK,EAAE,EADsB;AAE7BC,MAAAA,aAAa,EAAE,KAFc;AAG7BC,MAAAA,aAAa,EAAE;AAHc,KAAtB,CAAX;AAMA,SAAKC,YAAL,GAAoBlB,MAApB;AACA,SAAKmB,WAAL,GAAmBlB,KAAnB;AACA,SAAKmB,MAAL,GAAc,IAAIxC,KAAK,CAACyC,KAAV,CAAgB;AAC1BC,MAAAA,SAAS,EAAE,kBADe;AAE1BrB,MAAAA,KAAK,EAAE,KAAKkB,WAFc;AAG1BnB,MAAAA,MAAM,EAAE,KAAKkB;AAHa,KAAhB,CAAd;AAMA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,SAAKK,KAAL,GAAa,IAAI3C,KAAK,CAAC4C,KAAV,EAAb;AACA,SAAKC,IAAL,GAAY,CAAZ,CAzCJ,CA0CI;;AAEA,SAAKC,cAAL,GAAsBxB,aAAtB;AACA,SAAKyB,aAAL,GAAqBxB,YAArB;AACA,SAAKyB,cAAL,GAAsBxB,aAAtB;AACA,SAAKyB,gBAAL,GAAwBxB,eAAxB;AAEA,SAAKyB,kBAAL,GAA0B,CAAC,CAA3B;AACA,SAAKC,mBAAL,GAA2B,CAAC,CAA5B;AACA,SAAKC,mBAAL,GAA2B,CAAC,CAA5B;AACA,SAAKC,qBAAL,GAA6B,CAAC,CAA9B;AAEA,SAAKC,YAAL,GAAoB;AAChBC,MAAAA,OAAO,EAAE,MADO;AAEhBC,MAAAA,SAAS,EAAE;AAFK,KAApB;;AAKA,SAAKhB,MAAL,CAAYiB,GAAZ,CAAgB,KAAKd,KAArB;;AAEA,SAAKA,KAAL,CAAWc,GAAX,CAAe,KAAKxB,GAApB;;AAEA,SAAKyB,eAAL;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,aAAa,GACb;AACI,WAAO;AACHtC,MAAAA,KAAK,EAAE,KAAKkB,WADT;AAEHnB,MAAAA,MAAM,EAAE,KAAKkB;AAFV,KAAP;AAIH;AAED;AACJ;AACA;AACA;AACA;;;AACIsB,EAAAA,KAAK,GACL;AACI;AACA,SAAKC,oBAAL;;AACA,SAAKC,qBAAL;;AACA,SAAKC,uBAAL,GAJJ,CAMI;;;AACA,SAAKvB,MAAL,CAAYwB,OAAZ;;AACA,SAAKxB,MAAL,GAAc,CAAd;AACH;;AAEDyB,EAAAA,cAAc,GACd;AACI,SAAKhC,GAAL,CAASE,KAAT,CAAe,EAAf;;AACA,SAAKiB,mBAAL,GAA2B,CAAC,CAA5B;AACA,SAAKC,qBAAL,GAA6B,CAAC,CAA9B;AACA,SAAKH,kBAAL,GAA0B,KAAKC,mBAAL,GAA2B,CAAC,CAAtD;AACH;;AAEDe,EAAAA,QAAQ,GACR;AACI;AACA,aAASC,WAAT,CAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAC5B,UAAIC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAX;AACAF,MAAAA,IAAI,CAACG,QAAL,GAAgBJ,IAAhB;AACAC,MAAAA,IAAI,CAACI,IAAL,GAAYN,GAAZ;AACAG,MAAAA,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,IAA1B;AACAA,MAAAA,IAAI,CAACO,KAAL;AACAN,MAAAA,QAAQ,CAACI,IAAT,CAAcG,WAAd,CAA0BR,IAA1B;AACAA,MAAAA,IAAI,CAACS,MAAL;AACH;;AACD,QAAIC,OAAO,GAAG,KAAKxC,MAAL,CAAYyC,SAAZ,CAAsB;AAACC,MAAAA,UAAU,EAAE;AAAb,KAAtB,CAAd;;AACAf,IAAAA,WAAW,CAACa,OAAD,EAAU,iBAAV,CAAX;AACH;;AAEDG,EAAAA,cAAc,CAACC,WAAD,EACd;AACI,QAAI,KAAKhC,mBAAL,KAA6B,CAAC,CAAlC,EAAqC;AACjC,WAAKtB,aAAL,CAAmBqD,cAAnB,CAAkC,KAAK/B,mBAAvC,EAA4DgC,WAA5D;AACH,KAFD,MAEO,IAAI,KAAK/B,qBAAL,KAA+B,CAAC,CAApC,EAAuC;AAC1C,WAAKrB,gBAAL,CAAsBmD,cAAtB,CAAqC,KAAK9B,qBAA1C,EAAiE+B,WAAjE;AACH,KAFM,MAEA,IAAI,KAAKlC,kBAAL,KAA4B,CAAC,CAAjC,EAAoC;AACvC,WAAKnB,YAAL,CAAkBoD,cAAlB,CAAiC,KAAKjC,kBAAtC,EAA0DkC,WAA1D;AACH;AACJ;;AAEDC,EAAAA,gBAAgB,CAACC,QAAD,EAChB;AACI,QAAIA,QAAQ,KAAK,CAAjB,EAAoB;;AACpB,SAAKzC,IAAL,CAAU0C,QAAV,CAAmB;AACfC,MAAAA,IAAI,EAAEF,QAAQ,CAACE;AADA,KAAnB;AAGH;;AAEDC,EAAAA,aAAa,CAAC;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAD,EACb;AACI,QAAIC,KAAK,GAAG,IAAI5F,KAAK,CAAC6F,KAAV,CAAgB;AACxBC,MAAAA,CAAC,EAAE,KAAKvD,WAAL,GAAmB,CADE;AAExBwD,MAAAA,CAAC,EAAE,KAAKzD,YAAL,GAAoB;AAFC,KAAhB,CAAZ;;AAIA,SAAKK,KAAL,CAAWc,GAAX,CAAemC,KAAf;;AACA,QAAIF,IAAI,KAAK,OAAb,EAAsB;AAClB,UAAIM,KAAK,GAAG,CAAZ;AAAA,UACIC,aAAa,GAAG,EADpB;;AAEA,cAAON,OAAP;AACI,aAAK,KAAL;AACIK,UAAAA,KAAK,GAAG,IAAI3F,aAAJ,CAAkB;AACtB6F,YAAAA,IAAI,EAAE,CACF;AACIC,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE,EAFX;AAGIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBC;AAH7B,aADE,EAMF;AACI4C,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE,EAFX;AAGIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBC;AAH7B,aANE,CADgB;AAatBqC,YAAAA,KAAK,EAAEA,KAbe;AActBvE,YAAAA,KAAK,EAAE,GAde;AAetBD,YAAAA,MAAM,EAAE,GAfc;AAgBtBkF,YAAAA,OAAO,EAAE;AAhBa,WAAlB,CAAR;AAkBA;;AACJ,aAAK,SAAL;AACIN,UAAAA,KAAK,GAAG,IAAI1F,eAAJ,CAAoB;AACxB4F,YAAAA,IAAI,EAAE,CACF;AACIC,cAAAA,QAAQ,EAAE,GADd;AAEII,cAAAA,WAAW,EAAE,KAFjB;AAGIH,cAAAA,KAAK,EAAE,EAHX;AAIIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBC;AAJ7B,aADE,EAOF;AACI4C,cAAAA,QAAQ,EAAE,GADd;AAEII,cAAAA,WAAW,EAAE,KAFjB;AAGIH,cAAAA,KAAK,EAAE,EAHX;AAIIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBE;AAJ7B,aAPE,CADkB;AAexBoC,YAAAA,KAAK,EAAEA,KAfiB;AAgBxBvE,YAAAA,KAAK,EAAE,GAhBiB;AAiBxBD,YAAAA,MAAM,EAAE,GAjBgB;AAkBxBkF,YAAAA,OAAO,EAAE;AAlBe,WAApB,CAAR;AAoBA;;AACJ,aAAK,MAAL;AACIN,UAAAA,KAAK,GAAG,IAAIzF,YAAJ,CAAiB;AACrB2F,YAAAA,IAAI,EAAE,CACF;AACIC,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE,EAFX;AAGIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBC;AAH7B,aADE,EAMF;AACI4C,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE,EAFX;AAGIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBC;AAH7B,aANE,CADe;AAarBqC,YAAAA,KAAK,EAAEA,KAbc;AAcrBvE,YAAAA,KAAK,EAAE,GAdc;AAerBD,YAAAA,MAAM,EAAE,GAfa;AAgBrBkF,YAAAA,OAAO,EAAE,EAhBY;AAiBrBE,YAAAA,cAAc,EAAE,KAAKlD,YAAL,CAAkBE;AAjBb,WAAjB,CAAR;AAmBA;;AACJ,aAAK,QAAL;AACIwC,UAAAA,KAAK,GAAG,IAAIvF,WAAJ,CAAgB;AACpBgG,YAAAA,SAAS,EAAE,CADS;AAEpBC,YAAAA,WAAW,EAAE,CAFO;AAGpBd,YAAAA,KAAK,EAAEA,KAHa;AAIpBe,YAAAA,OAAO,EAAEnG,qBAAqB,CAAC;AAC3BoG,cAAAA,IAAI,EAAE,QADqB;AAE3BP,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBC,OAFE;AAG3BsD,cAAAA,MAAM,EAAE,EAHmB;AAI3BC,cAAAA,IAAI,EAAE;AAJqB,aAAD,CAJV;AAUpBC,YAAAA,OAAO,EAAEvG,qBAAqB,CAAC;AAC3BoG,cAAAA,IAAI,EAAE,QADqB;AAE3BP,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBE,SAFE;AAG3BqD,cAAAA,MAAM,EAAE,EAHmB;AAI3BC,cAAAA,IAAI,EAAE;AAJqB,aAAD,CAVV;AAgBpBE,YAAAA,QAAQ,EAAE,EAhBU;AAiBpBC,YAAAA,eAAe,EAAE;AAjBG,WAAhB,CAAR;AAmBA;;AACJ,aAAK,MAAL;AACIjB,UAAAA,KAAK,GAAG,IAAItF,SAAJ,CAAc;AAClBwF,YAAAA,IAAI,EAAE,CACF;AACIC,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE;AAFX,aADE,EAKF;AACID,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE;AAFX,aALE,CADY;AAWlBR,YAAAA,KAAK,EAAEA,KAXW;AAYlBsB,YAAAA,UAAU,EAAE,GAZM;AAalBC,YAAAA,WAAW,EAAE,GAbK;AAclBC,YAAAA,SAAS,EAAE,CAdO;AAelBC,YAAAA,WAAW,EAAE,CAfK;AAgBlBC,YAAAA,SAAS,EAAE,KAAKhE,YAAL,CAAkBC,OAhBX;AAiBlBgE,YAAAA,UAAU,EAAE,KAAKjE,YAAL,CAAkBE;AAjBZ,WAAd,CAAR;AAmBAyC,UAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,IAAItF,kBAAJ,CAAuB;AACtCqF,YAAAA,KAAK,EAAEA;AAD+B,WAAvB,CAAnB;AAGAC,UAAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,IAAIrF,kBAAJ,CAAuB;AACtCoF,YAAAA,KAAK,EAAEC,aAAa,CAAC,CAAD;AADkB,WAAvB,CAAnB;AAGA;;AACJ,aAAK,KAAL;AACID,UAAAA,KAAK,GAAG,IAAIlF,QAAJ,CAAa;AACjBoF,YAAAA,IAAI,EAAE,CACF;AACIC,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE,EAFX;AAGIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBC;AAH7B,aADE,EAMF;AACI4C,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE,EAFX;AAGIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBE;AAH7B,aANE,CADW;AAajBoC,YAAAA,KAAK,EAAEA,KAbU;AAcjB4B,YAAAA,MAAM,EAAE;AAdS,WAAb,CAAR;AAgBA;;AACJ,aAAK,OAAL;AACIxB,UAAAA,KAAK,GAAG,IAAInF,UAAJ,CAAe;AACnBqF,YAAAA,IAAI,EAAE,CACF;AACIC,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE,EAFX;AAGIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBC;AAH7B,aADE,EAMF;AACI4C,cAAAA,QAAQ,EAAE,GADd;AAEIC,cAAAA,KAAK,EAAE,EAFX;AAGIC,cAAAA,KAAK,EAAE,KAAK/C,YAAL,CAAkBE;AAH7B,aANE,CADa;AAanBoC,YAAAA,KAAK,EAAEA,KAbY;AAcnB4B,YAAAA,MAAM,EAAE,EAdW;AAenBC,YAAAA,WAAW,EAAE;AAfM,WAAf,CAAR;AAiBA;;AACJ;AACI;AAtJR;;AAwJA,UAAIzB,KAAK,KAAK,CAAd,EAAiB;AACb,aAAKlE,aAAL,CAAmB4F,QAAnB,CAA4B;AACxB1B,UAAAA,KAAK,EAAEA,KADiB;AAExBJ,UAAAA,KAAK,EAAEA,KAFiB;AAGxBF,UAAAA,IAAI,EAAEC;AAHkB,SAA5B;;AAKAM,QAAAA,aAAa,CAAC0B,OAAd,CAAsBC,CAAC,IAAI;AACvB,eAAK9F,aAAL,CAAmB+F,YAAnB,CAAgC;AAC5BC,YAAAA,SAAS,EAAEF,CADiB;AAE5BG,YAAAA,EAAE,EAAE,KAAKjG,aAAL,CAAmBkG,cAAnB;AAFwB,WAAhC;AAIH,SALD;AAOA,YAAI/B,aAAa,CAACgC,MAAd,KAAyB,CAA7B,EAAgCjC,KAAK,CAACkC,WAAN,GAAhC,KACKjC,aAAa,CAACA,aAAa,CAACgC,MAAd,GAAuB,CAAxB,CAAb,CAAwCC,WAAxC;AAELtC,QAAAA,KAAK,CAACuC,EAAN,CAAS,UAAT,EAAqB,MAAM;AACvB,eAAKC,YAAL,CAAkBxC,KAAlB;AACH,SAFD;AAGAA,QAAAA,KAAK,CAACuC,EAAN,CAAS,SAAT,EAAoB,MAAM;AACtB,eAAKE,sBAAL,CAA4BzC,KAA5B;AACH,SAFD;;AAGA,aAAKwC,YAAL,CAAkBxC,KAAlB;AACH;AACJ,KAnLD,MAmLO,IAAIF,IAAI,KAAK,MAAb,EAAqB;AACxB,UAAIkB,IAAI,GAAG,IAAI5G,KAAK,CAACsI,IAAV,CAAe;AACtBC,QAAAA,IAAI,EAAEC,MAAM,CAACC,YAAP,CAAoBC,QAAQ,CAAC/C,OAAD,EAAU,EAAV,CAA5B,CADgB;AAEtBgD,QAAAA,UAAU,EAAE,uBAFU;AAGtBC,QAAAA,SAAS,EAAE,KAHW;AAItBpD,QAAAA,IAAI,EAAE,KAAKlC,YAAL,CAAkBC,OAJF;AAKtByD,QAAAA,QAAQ,EAAE;AALY,OAAf,CAAX;;AAOA,WAAKhF,gBAAL,CAAsB6G,UAAtB,CAAiC;AAC7BnD,QAAAA,IAAI,EAAEA,IADuB;AAE7BoD,QAAAA,OAAO,EAAElC,IAFoB;AAG7BhB,QAAAA,KAAK,EAAEA;AAHsB,OAAjC;;AAMAA,MAAAA,KAAK,CAACuC,EAAN,CAAS,UAAT,EAAqB,MAAM;AACvB,aAAKY,cAAL,CAAoBnD,KAApB;AACH,OAFD;AAGAA,MAAAA,KAAK,CAACuC,EAAN,CAAS,SAAT,EAAoB,MAAM;AACtB,aAAKE,sBAAL,CAA4BzC,KAA5B;AACH,OAFD;;AAGA,WAAKmD,cAAL,CAAoBnD,KAApB;AACH,KArBM,MAqBA,IAAIF,IAAI,KAAK,MAAb,EAAqB;AACxB;AACA,UAAIsD,GAAG,GAAGzE,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;AAAA,UACIyE,QAAQ,GAAG,oFACTtD,OADS,GACC,aAFhB;AAGAqD,MAAAA,GAAG,CAACE,SAAJ,GAAgBD,QAAhB,CALwB,CAOxB;;AACA,WAAKlH,YAAL,CAAkBoH,WAAlB,CAA8B;AAC1BF,QAAAA,QAAQ,EAAED,GADgB;AAE1BpD,QAAAA,KAAK,EAAEA,KAFmB;AAG1BE,QAAAA,CAAC,EAAE,CAHuB;AAI1BC,QAAAA,CAAC,EAAE,CAJuB;AAK1BqD,QAAAA,QAAQ,EAAE;AALgB,OAA9B;;AAOA,WAAKrH,YAAL,CAAkBsH,UAAlB,CAA6B;AACzBtB,QAAAA,EAAE,EAAE,KAAKhG,YAAL,CAAkBuH,SAAlB,EADqB;AAEzBX,QAAAA,UAAU,EAAE,KAAKY,SAAL,CAAe,OAAf,EAAwB,GAAxB,CAFa;AAGzBvC,QAAAA,QAAQ,EAAE,MAHe;AAIzBwC,QAAAA,SAAS,EAAE,MAJc;AAKzBC,QAAAA,UAAU,EAAE,KALa;AAMzBC,QAAAA,KAAK,EAAE;AANkB,OAA7B,EAfwB,CAwBxB;;;AACA,UAAIC,UAAU,GAAGpF,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjB;AACAmF,MAAAA,UAAU,CAACC,KAAX,CAAiBC,QAAjB,GAA4B,UAA5B;AACAtF,MAAAA,QAAQ,CAACuF,cAAT,CAAwB,cAAxB,EAAwClF,WAAxC,CAAoD+E,UAApD;AACAA,MAAAA,UAAU,CAAC/E,WAAX,CAAuBoE,GAAvB;;AACA,WAAKe,aAAL,CAAmB,eAAnB,EAAoC,KAAKhI,YAAL,CAAkBuH,SAAlB,EAApC;;AACAN,MAAAA,GAAG,CAACjE,MAAJ;AACA4E,MAAAA,UAAU,CAAC5E,MAAX;;AAEA,UAAIiF,MAAM,GAAG,KAAKjI,YAAL,CAAkBkI,QAAlB,CAA2B,KAAKlI,YAAL,CAAkBuH,SAAlB,EAA3B,CAAb;;AACAU,MAAAA,MAAM,CAAC7B,EAAP,CAAU,UAAV,EAAsB,MAAM;AACxB,aAAK+B,WAAL,CAAiBF,MAAjB;AACH,OAFD;AAGAA,MAAAA,MAAM,CAAC7B,EAAP,CAAU,SAAV,EAAqB,MAAM;AACvB,aAAKE,sBAAL,CAA4B2B,MAA5B;AACH,OAFD;;AAGA,WAAKE,WAAL,CAAiBF,MAAjB;AACH,KAzCM,MAyCA,IAAItE,IAAI,KAAK,UAAb,EAAyB;AAC5B,UAAIoD,OAAO,GAAG,CAAd;;AACA,cAAOnD,OAAP;AACI,aAAK,eAAL;AACImD,UAAAA,OAAO,GAAG,IAAI9H,YAAJ,CAAiB;AACvBmJ,YAAAA,QAAQ,EAAE,KAAK7G,YAAL,CAAkBC,OADL;AAEvB6G,YAAAA,QAAQ,EAAE,KAAK9G,YAAL,CAAkBE,SAFL;AAGvBoC,YAAAA,KAAK,EAAEA,KAHgB;AAIvByE,YAAAA,MAAM,EAAE,GAJe;AAKvBC,YAAAA,OAAO,EAAE,EALc;AAMvBC,YAAAA,MAAM,EAAE,KAAKhI,WANU;AAOvBiI,YAAAA,OAAO,EAAE,KAAKlI;AAPS,WAAjB,CAAV;AASA;;AACJ,aAAK,kBAAL;AACIwG,UAAAA,OAAO,GAAG,IAAI/H,eAAJ,CAAoB;AAC1B+E,YAAAA,CAAC,EAAE,CADuB;AAE1BC,YAAAA,CAAC,EAAE,CAFuB;AAG1B1E,YAAAA,KAAK,EAAE,GAHmB;AAI1BD,YAAAA,MAAM,EAAE,GAJkB;AAK1BqJ,YAAAA,YAAY,EAAE,CALY;AAM1BjF,YAAAA,IAAI,EAAE,KAAKlC,YAAL,CAAkBC,OANE;AAO1BqC,YAAAA,KAAK,EAAEA;AAPmB,WAApB,CAAV;AASA;;AACJ,aAAK,gBAAL;AACIkD,UAAAA,OAAO,GAAG,IAAI7H,aAAJ,CAAkB2E,KAAlB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,KAAKtC,YAAL,CAAkBC,OAArD,EAA8D,CAA9D,EAAiE,CAAjE,CAAV;AACA;;AACJ;AACI;AA3BR;;AA6BA,WAAKvB,gBAAL,CAAsB6G,UAAtB,CAAiC;AAC7BnD,QAAAA,IAAI,EAAE,QADuB;AAE7BoD,QAAAA,OAAO,EAAEA,OAFoB;AAG7BlD,QAAAA,KAAK,EAAEA;AAHsB,OAAjC;;AAKAA,MAAAA,KAAK,CAACuC,EAAN,CAAS,UAAT,EAAqB,MAAM;AACvB,aAAKY,cAAL,CAAoBnD,KAApB;AACH,OAFD;AAGAA,MAAAA,KAAK,CAACuC,EAAN,CAAS,SAAT,EAAoB,MAAM;AACtB,aAAKE,sBAAL,CAA4BzC,KAA5B;AACH,OAFD;;AAGA,WAAKmD,cAAL,CAAoBnD,KAApB;AACH;;AACD,SAAKjD,KAAL,CAAW+H,SAAX;AACH;;AAEDC,EAAAA,0BAA0B,CAACC,KAAK,GAAG,EAAT,EAAa7C,EAAE,GAAG,EAAlB,EAC1B;AACI6C,IAAAA,KAAK,CAACvG,IAAN,GAAa,0BAA0B0D,EAAvC;AACA,WAAO,IAAI/H,KAAK,CAAC6F,KAAV,CAAgB+E,KAAhB,CAAP;AACH;AAED;AACJ;AACA;;;AACI/G,EAAAA,oBAAoB,GACpB;AACI,QAAIgH,SAAS,GAAG,KAAKrI,MAAL,CAAYsI,IAAZ,CAAkBC,IAAD,IAAU;AACvC,aAAOA,IAAI,CAACC,OAAL,CAAa,YAAb,KAA8BD,IAAI,CAACC,OAAL,CAAa,cAAb,CAArC;AACH,KAFe,CAAhB;;AAGAH,IAAAA,SAAS,CAAClD,OAAV,CAAkBsB,QAAQ,IAAI;AAAEA,MAAAA,QAAQ,CAACgC,GAAT,CAAa,UAAb;AAA2B,KAA3D;AACH;AAED;AACJ;AACA;;;AACInH,EAAAA,qBAAqB,GACrB;AACI,QAAI+G,SAAS,GAAG,KAAKrI,MAAL,CAAYsI,IAAZ,CAAkBC,IAAD,IAAU;AACvC,aAAOA,IAAI,CAACC,OAAL,CAAa,YAAb,KAA8BD,IAAI,CAACC,OAAL,CAAa,OAAb,CAArC;AACH,KAFe,CAAhB;;AAGAH,IAAAA,SAAS,CAAClD,OAAV,CAAkBuD,SAAS,IAAI;AAAEA,MAAAA,SAAS,CAACD,GAAV,CAAc,UAAd;AAA4B,KAA7D;AACH;;AAEDlH,EAAAA,uBAAuB,GACvB;AACI,QAAI8G,SAAS,GAAG,KAAKrI,MAAL,CAAYsI,IAAZ,CAAkBC,IAAD,IAAU;AACvC,aAAOA,IAAI,CAACC,OAAL,CAAa,SAAb,CAAP;AACH,KAFe,CAAhB;;AAGAH,IAAAA,SAAS,CAAClD,OAAV,CAAkB/B,KAAK,IAAI;AAAEA,MAAAA,KAAK,CAACqF,GAAN,CAAU,UAAV;AAAwB,KAArD;AACH;;AAEDE,EAAAA,YAAY,CAAC;AAACrF,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAO1E,IAAAA,KAAP;AAAcD,IAAAA,MAAd;AAAsBgK,IAAAA,GAAtB;AAA2BxF,IAAAA;AAA3B,GAAD,EACZ;AACI,QAAIyF,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AAAA,QAAyBC,WAAW,GAAG,IAAIvL,KAAK,CAACsL,KAAV,EAAvC;AAAA,QACIE,UAAU,GAAG,IAAIxL,KAAK,CAAC6F,KAAV,EADjB;;AAGAwF,IAAAA,KAAK,CAACI,MAAN,GAAe,MAAM;AACjBF,MAAAA,WAAW,CAAChG,QAAZ,CAAqB;AACjBO,QAAAA,CAAC,EAAEA,CADc;AAEjBC,QAAAA,CAAC,EAAEA,CAFc;AAGjB3E,QAAAA,MAAM,EAAEA,MAHS;AAIjBC,QAAAA,KAAK,EAAEA,KAJU;AAKjBgK,QAAAA,KAAK,EAAEA,KALU;AAMjBK,QAAAA,OAAO,EAAE,CANQ;AAOjBC,QAAAA,MAAM,EAAE,OAPS;AAQjBC,QAAAA,WAAW,EAAE;AARI,OAArB;AAUAL,MAAAA,WAAW,CAACM,KAAZ;AACAN,MAAAA,WAAW,CAACO,OAAZ,CAAoB,CAChB9L,KAAK,CAAC+L,OAAN,CAAcC,QADE,EAEhBhM,KAAK,CAAC+L,OAAN,CAAcE,QAFE,EAGhBjM,KAAK,CAAC+L,OAAN,CAAcG,IAHE,CAApB;AAMAX,MAAAA,WAAW,CAACY,UAAZ,CAAuB,CAAvB;AACAZ,MAAAA,WAAW,CAACa,UAAZ,CAAuB,CAAvB;AACAb,MAAAA,WAAW,CAACc,QAAZ,CAAqB,CAArB;;AAEA,WAAK1J,KAAL,CAAW+H,SAAX;;AACAW,MAAAA,KAAK,CAACI,MAAN,GAAe,IAAf;AACH,KAxBD;;AA0BAJ,IAAAA,KAAK,CAACD,GAAN,GAAYA,GAAZ;AACAI,IAAAA,UAAU,CAAC/H,GAAX,CAAe8H,WAAf;AACA3F,IAAAA,KAAK,CAACnC,GAAN,CAAU+H,UAAV;;AACA,SAAKxJ,gBAAL,CAAsB6G,UAAtB,CAAiC;AAC7BnD,MAAAA,IAAI,EAAE,OADuB;AAE7BoD,MAAAA,OAAO,EAAEyC,WAFoB;AAG7B3F,MAAAA,KAAK,EAAE4F;AAHsB,KAAjC;AAKH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIjC,EAAAA,SAAS,CAACzC,IAAD,EAAOwF,MAAM,GAAG,CAAhB,EACT;AACI,QAAIxF,IAAI,KAAK,OAAT,IAAoBwF,MAAM,KAAK,GAAnC,EAAwC,OAAO,WAAP,CAAxC,KACK,IAAIxF,IAAI,KAAK,oBAAb,EAAmC;AACpC,cAAQwF,MAAR;AACI,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV;AAAS,iBAAO,YAAP;AARb;AAUH,KAXI,MAWE,IAAIxF,IAAI,KAAK,YAAb,EAA2B,OAAO,gBAAP,CAA3B,KACF,IAAIA,IAAI,KAAK,WAAb,EAA0B,OAAO,WAAP,CAA1B,KACA,IAAIA,IAAI,KAAK,QAAb,EAAuB;AACxB,cAAOwF,MAAP;AACI,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV,aAAK,GAAL;AAAU,iBAAO,YAAP;;AACV;AAAS,iBAAO,YAAP;AAPb;AASH;AACJ;AAED;AACJ;AACA;;;AACI5I,EAAAA,eAAe,GACf;AACI,SAAKb,IAAL,GAAY,IAAI7C,KAAK,CAACuM,IAAV,CAAe;AACvBzG,MAAAA,CAAC,EAAE,CADoB;AAEvBC,MAAAA,CAAC,EAAE,CAFoB;AAGvB1E,MAAAA,KAAK,EAAE,KAAKmB,MAAL,CAAYnB,KAAZ,EAHgB;AAIvBD,MAAAA,MAAM,EAAE,KAAKoB,MAAL,CAAYpB,MAAZ,EAJe;AAKvBoE,MAAAA,IAAI,EAAE,OALiB;AAMvBmG,MAAAA,MAAM,EAAE;AANe,KAAf,CAAZ;;AAQA,SAAKhJ,KAAL,CAAWc,GAAX,CAAe,KAAKZ,IAApB;;AACA,SAAKA,IAAL,CAAU2J,YAAV;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,aAAa,CAAClE,IAAD,EAAOvB,QAAP,EAAiB2B,UAAjB,EACb;AACI,QAAI+D,MAAM,GAAGnI,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACA,QAAImI,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAV;AAEAD,IAAAA,GAAG,CAAC7F,IAAJ,GAAWE,QAAQ,GAAG,KAAX,GAAmB2B,UAA9B;AACA,QAAIqB,MAAM,GAAG2C,GAAG,CAACE,WAAJ,CAAgBtE,IAAhB,EAAsBlH,KAAnC;AACAqL,IAAAA,MAAM,CAAC3H,MAAP;AAEA,WAAOiF,MAAP;AACH;AACD;AACJ;AACA;AACA;;;AACI8C,EAAAA,aAAa,CAACzL,KAAD,EAAQ0L,MAAR,EACb;AACI,WAAOA,MAAM,GAAI1L,KAAK,GAAG,CAAzB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACI2L,EAAAA,cAAc,GACd;AACI,SAAKC,WAAL;;AACA,SAAKC,kBAAL;;AACA,SAAKC,iBAAL;;AACA,SAAKC,oBAAL,GAJJ,CAKI;;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIH,EAAAA,WAAW,GACX;AACI,QAAItD,UAAU,GAAGpF,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjB;AACAmF,IAAAA,UAAU,CAACC,KAAX,CAAiBC,QAAjB,GAA4B,UAA5B;AACAtF,IAAAA,QAAQ,CAACuF,cAAT,CAAwB,cAAxB,EAAwClF,WAAxC,CAAoD+E,UAApD;;AAEA,SAAK,IAAI0D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKtL,YAAL,CAAkBuL,OAAlB,EAApB,EAAiDD,CAAC,EAAlD,EAAsD;AAClD1D,MAAAA,UAAU,CAAC/E,WAAX,CAAuB,KAAK7C,YAAL,CAAkBwL,WAAlB,CAA8BF,CAA9B,CAAvB;;AACA,WAAKtD,aAAL,CAAmB,eAAnB,EAAoCsD,CAApC;;AACA,WAAKtL,YAAL,CAAkBwL,WAAlB,CAA8BF,CAA9B,EAAiCtI,MAAjC;AACH;;AACD4E,IAAAA,UAAU,CAAC5E,MAAX;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIgF,EAAAA,aAAa,CAACyD,KAAD,EAAQC,KAAR,EACb;AACI,QAAI9H,OAAO,GAAGpB,QAAQ,CAACmJ,aAAT,CAAuBF,KAAvB,CAAd,CADJ,CAEI;;AACAvN,IAAAA,WAAW,CAAC0F,OAAD,EAAU;AACjBgI,MAAAA,OAAO,EAAE,KADQ;AAEjBC,MAAAA,eAAe,EAAE,IAFA;AAGjBC,MAAAA,OAAO,EAAE,CAAEC,MAAM,CAACD,OAHD,CAIjB;;AAJiB,KAAV,CAAX,CAKGE,IALH,CAKS1C,KAAD,IAAW;AACf;AACA,WAAKtJ,YAAL,CAAkBkI,QAAlB,CAA2BwD,KAA3B,EAAkCpC,KAAlC,CAAwCA,KAAxC;;AACA,WAAK1I,KAAL,CAAW+H,SAAX;AACH,KATD,EASGsD,KATH,CASS,MAAM;AACX,UAAIrE,UAAU,GAAGpF,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjB;AACAmF,MAAAA,UAAU,CAACC,KAAX,CAAiBC,QAAjB,GAA4B,UAA5B;AACAtF,MAAAA,QAAQ,CAACuF,cAAT,CAAwB,cAAxB,EAAwClF,WAAxC,CAAoD+E,UAApD;AAEAA,MAAAA,UAAU,CAAC/E,WAAX,CAAuB,KAAK7C,YAAL,CAAkBwL,WAAlB,CAA8BE,KAA9B,CAAvB;;AACA,WAAK1D,aAAL,CAAmB,eAAnB,EAAoC0D,KAApC;;AACA,WAAK1L,YAAL,CAAkBwL,WAAlB,CAA8BE,KAA9B,EAAqC1I,MAArC;;AACA4E,MAAAA,UAAU,CAAC5E,MAAX;AACH,KAlBD;AAmBA;AACR;AACA;AACA;AACK;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIoI,EAAAA,iBAAiB,GACjB;AACI,QAAItC,SAAS,GAAG,KAAKrI,MAAL,CAAYsI,IAAZ,CAAkBC,IAAD,IAAU;AACvC,aAAOA,IAAI,CAACC,OAAL,CAAa,YAAb,KAA8BD,IAAI,CAACC,OAAL,CAAa,cAAb,CAArC;AACH,KAFe,CAAhB;;AAIAH,IAAAA,SAAS,CAAClD,OAAV,CAAmBsB,QAAD,IAAc;AAC5BA,MAAAA,QAAQ,CAACd,EAAT,CAAY,UAAZ,EAAwB,MAAM;AAC1B,aAAK+B,WAAL,CAAiBjB,QAAjB;AACH,OAFD;AAIAA,MAAAA,QAAQ,CAACd,EAAT,CAAY,SAAZ,EAAuB,MAAM;AACzB,aAAKE,sBAAL,CAA4BY,QAA5B;AACH,OAFD;AAGH,KARD;AASH;;AAEDiB,EAAAA,WAAW,CAACjB,QAAD,EACX;AACIA,IAAAA,QAAQ,CAACgF,OAAT,CAAiB,WAAjB,EAA8B,IAA9B;;AAEA,SAAKhM,GAAL,CAASE,KAAT,CAAe,CAAC8G,QAAD,CAAf;;AACA,SAAKhH,GAAL,CAASiM,SAAT;;AACA,SAAKvL,KAAL,CAAW+H,SAAX;;AAEA,SAAKxH,kBAAL,GAA0B+F,QAAQ,CAACkF,OAAT,CAAiB,IAAjB,CAA1B;AACA,SAAKhL,mBAAL,GAA2B,KAAKD,kBAAhC;;AAEA,SAAKH,aAAL,CAAmB,KAAKhB,YAAL,CAAkBqM,cAAlB,CAAiC,KAAKlL,kBAAtC,CAAnB;;AACA,SAAKJ,cAAL,CAAoB,aAApB;;AAEAuL,IAAAA,UAAU,CAAC,MAAM;AACb,WAAK7L,MAAL,CAAY2F,EAAZ,CAAe,OAAf,EAAwBmG,kBAAxB;AACH,KAFS,CAAV;;AAIA,QAAIA,kBAAkB,GAAIC,CAAD,IAAO;AAC5B,UAAIA,CAAC,CAACC,MAAF,KAAavF,QAAjB,EAA2B;AACvB,aAAK/F,kBAAL,GAA0B,CAAC,CAA3B;;AACA,aAAKJ,cAAL,CAAoB,MAApB;;AACA,aAAKb,GAAL,CAASE,KAAT,CAAe,EAAf;;AACA8G,QAAAA,QAAQ,CAACgF,OAAT,CAAiB,WAAjB,EAA8B,KAA9B;;AACA,aAAKtL,KAAL,CAAW+H,SAAX;;AACA,aAAKlI,MAAL,CAAYyI,GAAZ,CAAgB,OAAhB,EAAyBqD,kBAAzB;AACH;AACJ,KATD;AAUH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,iBAAiB,CAACxF,QAAD,EACjB;AACI,QAAIA,QAAQ,CAACoC,KAAT,KAAmBzJ,SAAnB,IAAgCqH,QAAQ,CAACA,QAAT,KAAsBrH,SAAtD,IACAqH,QAAQ,CAACrD,KAAT,KAAmBhE,SADnB,IACgCqH,QAAQ,CAACyF,OAAT,KAAqB9M,SADrD,IAEAqH,QAAQ,KAAK,CAFjB,EAEoB;AAChB;AACH;;AACD,SAAKlH,YAAL,CAAkB4M,cAAlB,CAAiC;AAC7BlB,MAAAA,KAAK,EAAE,KAAKtK,mBADiB;AAE7B8F,MAAAA,QAAQ,EAAEA,QAAQ,CAACA,QAFU;AAG7BrD,MAAAA,KAAK,EAAEqD,QAAQ,CAACrD,KAHa;AAI7ByF,MAAAA,KAAK,EAAEpC,QAAQ,CAACoC,KAJa;AAK7BqD,MAAAA,OAAO,EAAEzF,QAAQ,CAACyF;AALW,KAAjC;;AAOA,SAAKvL,mBAAL,GAA2B,CAAC,CAA5B;;AACA,SAAKR,KAAL,CAAW+H,SAAX;AACH;;AAEDkE,EAAAA,MAAM,GACN;AACI;AACA,QAAI,KAAKxL,mBAAL,KAA6B,CAAC,CAAlC,EAAqC;AACjC,WAAKnB,GAAL,CAASE,KAAT,CAAe,EAAf;;AACA,WAAKQ,KAAL,CAAW+H,SAAX;;AACA,WAAK5I,aAAL,CAAmB+M,iBAAnB,CAAqC,KAAKzL,mBAA1C;;AACA,WAAKA,mBAAL,GAA2B,CAAC,CAA5B;AACH,KALD,MAKO,IAAI,KAAKF,kBAAL,KAA4B,CAAC,CAAjC,EAAoC;AACvC,WAAKjB,GAAL,CAASE,KAAT,CAAe,EAAf;;AACA,WAAKQ,KAAL,CAAW+H,SAAX;;AACA,WAAK3I,YAAL,CAAkB8M,iBAAlB,CAAoC,KAAK3L,kBAAzC;;AACA,WAAKA,kBAAL,GAA0B,KAAKC,mBAAL,GAA2B,CAAC,CAAtD;AACH,KALM,MAKA,IAAI,KAAKE,qBAAL,KAA+B,CAAC,CAApC,EAAuC;AAC1C,WAAKpB,GAAL,CAASE,KAAT,CAAe,EAAf;;AACA,WAAKQ,KAAL,CAAW+H,SAAX;;AACA,WAAK1I,gBAAL,CAAsB6M,iBAAtB,CAAwC,KAAKxL,qBAA7C;;AACA,WAAKA,qBAAL,GAA6B,CAAC,CAA9B;AACH;AACJ;;AAEDyL,EAAAA,qBAAqB,CAACxJ,QAAD,EACrB;AACI,QAAIA,QAAQ,KAAK,CAAb,IAAkB,KAAKlC,mBAAL,KAA6B,CAAC,CAApD,EAAuD;;AACvD,SAAKtB,aAAL,CAAmBgN,qBAAnB,CAAyC,KAAK1L,mBAA9C,EAAmEkC,QAAnE;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIyJ,EAAAA,eAAe,CAACC,SAAD,EACf;AACI,QAAIA,SAAS,KAAK,CAAd,IAAmB,KAAK5L,mBAAL,KAA6B,CAAC,CAArD,EAAwD;;AACxD,QAAI6L,IAAI,GAAG,KAAKnN,aAAL,CAAmBsM,cAAnB,CAAkC,KAAKhL,mBAAvC,CAAX;AAAA,QACIiB,IAAI,GAAG4K,IAAI,CAACrJ,KAAL,CAAWuI,OAAX,CAAmB,MAAnB,CADX;;AAEA,QAAI9J,IAAI,KAAK,yBAAb,EAAwC;AACpC;AACA;AACA;AACA;AACA,UAAI2K,SAAS,CAACvI,SAAV,KAAwB,CAAxB,IAA6BuI,SAAS,CAACtI,WAAV,KAA0B,CAA3D,EAA8D;AAC9D,UAAID,SAAS,GAAGuI,SAAS,CAACvI,SAA1B;AAAA,UAAqCC,WAAW,GAAGsI,SAAS,CAACtI,WAA7D;AACAuI,MAAAA,IAAI,CAACjJ,KAAL,CAAWkJ,UAAX,CAAsBxG,QAAQ,CAACjC,SAAD,CAA9B,EAA2CiC,QAAQ,CAAChC,WAAD,CAAnD;AACH,KARD,MAQO;AACH;AACA;AACA;AACA;AACAuI,MAAAA,IAAI,CAACjJ,KAAL,CAAWkJ,UAAX,CAAsBF,SAAtB;AACH;;AAED,SAAKG,iBAAL,CAAuBF,IAAvB;AACH;;AAEDG,EAAAA,mBAAmB,CAAC9J,QAAD,EACnB;AACI,QAAIA,QAAQ,KAAK,CAAb,IAAkB,KAAKlC,mBAAL,KAA6B,CAAC,CAApD,EAAuD;;AACvD,QAAI6L,IAAI,GAAG,KAAKnN,aAAL,CAAmBsM,cAAnB,CAAkC,KAAKhL,mBAAvC,CAAX;;AACA6L,IAAAA,IAAI,CAACjJ,KAAL,CAAWoJ,mBAAX,CAA+B9J,QAA/B;;AACA,SAAK6J,iBAAL,CAAuBF,IAAvB;AACH;;AAEDI,EAAAA,qBAAqB,CAAC/J,QAAD,EACrB;AACI,QAAIA,QAAQ,KAAK,CAAb,IAAkB,KAAKjC,qBAAL,KAA+B,CAAC,CAAtD,EAAyD;;AACzD,SAAKrB,gBAAL,CAAsBqN,qBAAtB,CAA4C;AACxCtH,MAAAA,EAAE,EAAE,KAAK1E,qBAD+B;AAExCiC,MAAAA,QAAQ,EAACA;AAF+B,KAA5C;;AAIA,SAAKrD,GAAL,CAASqN,WAAT;;AACA,SAAK3M,KAAL,CAAW+H,SAAX;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIyE,EAAAA,iBAAiB,CAACI,WAAD,EACjB;AACI,QAAIC,IAAI,GAAGD,WAAW,CAACvJ,KAAvB;;AACA,SAAK,IAAIqH,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIkC,WAAW,CAACE,aAAjC,EAAgDpC,CAAC,EAAjD,EAAqD;AACjDkC,MAAAA,WAAW,CAACG,UAAZ,CAAuBrC,CAAvB,EAA0BsC,eAA1B,CAA0CH,IAA1C;AACAA,MAAAA,IAAI,GAAGD,WAAW,CAACG,UAAZ,CAAuBrC,CAAvB,CAAP;AACH;;AACDmC,IAAAA,IAAI,CAACtH,WAAL;;AACA,SAAKjG,GAAL,CAASqN,WAAT;;AACA,SAAK3M,KAAL,CAAW+H,SAAX;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIwC,EAAAA,kBAAkB,GAClB;AACI,QAAIrC,SAAS,GAAG,KAAKrI,MAAL,CAAYsI,IAAZ,CAAkBC,IAAD,IAAU;AACvC,aAAOA,IAAI,CAACC,OAAL,CAAa,YAAb,KAA8BD,IAAI,CAACC,OAAL,CAAa,OAAb,CAArC;AACH,KAFe,CAAhB;;AAGAH,IAAAA,SAAS,CAAClD,OAAV,CAAmB3B,KAAD,IAAW;AACzB;AACZ;AACA;AACYA,MAAAA,KAAK,CAACmC,EAAN,CAAS,UAAT,EAAqB,MAAM;AACvB,aAAKC,YAAL,CAAkBpC,KAAlB;AACH,OAFD;AAIAA,MAAAA,KAAK,CAACmC,EAAN,CAAS,SAAT,EAAoB,MAAM;AACtB,aAAKE,sBAAL,CAA4BrC,KAA5B;AACH,OAFD;AAGH,KAXD;AAYH;;AAGDoC,EAAAA,YAAY,CAACpC,KAAD,EACZ;AACI,SAAK5C,mBAAL,GAA2BsF,QAAQ,CAAC1C,KAAK,CAACmI,OAAN,CAAc,IAAd,CAAD,CAAnC;;AACQ,SAAKlM,GAAL,CAASE,KAAT,CAAe,CAAC6D,KAAD,CAAf;;AACA,SAAK/D,GAAL,CAASiM,SAAT;;AACA,SAAKvL,KAAL,CAAW+H,SAAX;;AACA1E,IAAAA,KAAK,CAACiI,OAAN,CAAc,WAAd,EAA2B,IAA3B;;AAEA,QAAI2B,aAAa,GAAG,KAAK9N,aAAL,CAAmBsM,cAAnB,CAAkC,KAAKhL,mBAAvC,EAA4D4C,KAAhF;AAAA,QACI6J,SAAS,GAAG,KAAK/N,aAAL,CAAmBgO,yBAAnB,CAA6C,KAAK1M,mBAAlD,CADhB;;AAEA,SAAKJ,cAAL,CAAoB4M,aAAa,CAACG,OAAd,EAApB,EAA6CH,aAAa,CAACI,gBAAd,EAA7C,EAA+EH,SAA/E;;AAEA,QAAI7J,KAAK,CAACmI,OAAN,CAAc,MAAd,MAA0B,yBAA9B,EAAyD;AACrD,WAAKrL,cAAL,CAAoB,eAApB;AACH,KAFD,MAEO,IAAIkD,KAAK,CAACmI,OAAN,CAAc,MAAd,MAA0B,sBAA9B,EAAsD;AACzD,WAAKrL,cAAL,CAAoB,YAApB;AACH,KAFM,MAEA,IAAIkD,KAAK,CAACmI,OAAN,CAAc,MAAd,MAA0B,sBAA9B,EAAsD;AACzD,WAAKrL,cAAL,CAAoB,YAApB;AACH,KAFM,MAEA,IAAIkD,KAAK,CAACmI,OAAN,CAAc,MAAd,MAA0B,0BAA9B,EAA0D;AAC7D,WAAKrL,cAAL,CAAoB,oBAApB;AACH,KAFM,MAEA,IAAIkD,KAAK,CAACmI,OAAN,CAAc,MAAd,MAA0B,uBAA9B,EAAuD;AAC1D,WAAKrL,cAAL,CAAoB,aAApB;AACH,KAFM,MAEA,IAAIkD,KAAK,CAACmI,OAAN,CAAc,MAAd,MAA0B,uBAA9B,EAAuD;AAC1D,WAAKrL,cAAL,CAAoB,iBAApB;AACH,KAFM,MAEA,IAAIkD,KAAK,CAACmI,OAAN,CAAc,MAAd,MAA0B,wBAA9B,EAAwD;AAC3D,WAAKrL,cAAL,CAAoB,cAApB;AACH;;AAEDuL,IAAAA,UAAU,CAAC,MAAM;AACb,WAAK7L,MAAL,CAAY2F,EAAZ,CAAe,OAAf,EAAwBmG,kBAAxB;AACH,KAFS,CAAV;;AAIA,QAAIA,kBAAkB,GAAIC,CAAD,IAAO;AAC5B,UAAIA,CAAC,CAACC,MAAF,KAAaxI,KAAjB,EAAwB;AACpB,aAAK5C,mBAAL,GAA2B,CAAC,CAA5B;;AACA,aAAKN,cAAL,CAAoB,MAApB;;AACA,aAAKb,GAAL,CAASE,KAAT,CAAe,EAAf;;AACA6D,QAAAA,KAAK,CAACiI,OAAN,CAAc,WAAd,EAA2B,KAA3B;;AACA,aAAKtL,KAAL,CAAW+H,SAAX;;AACA,aAAKlI,MAAL,CAAYyI,GAAZ,CAAgB,OAAhB,EAAyBqD,kBAAzB;AACH;AACJ,KATD;AAUX;;AAEDlB,EAAAA,oBAAoB,GACpB;AACI,QAAIvC,SAAS,GAAG,KAAKrI,MAAL,CAAYsI,IAAZ,CAAkBC,IAAD,IAAU;AACvC,aAAOA,IAAI,CAACC,OAAL,CAAa,SAAb,CAAP;AACH,KAFe,CAAhB;;AAIAH,IAAAA,SAAS,CAAClD,OAAV,CAAmB/B,KAAD,IAAW;AACzBA,MAAAA,KAAK,CAACuC,EAAN,CAAS,UAAT,EAAqB,MAAM;AACvB,aAAKY,cAAL,CAAoBnD,KAApB;AACH,OAFD;AAIAA,MAAAA,KAAK,CAACuC,EAAN,CAAS,SAAT,EAAoB,MAAM;AACtB,aAAKE,sBAAL,CAA4BzC,KAA5B;AACH,OAFD;AAGH,KARD;AASH;;AAEDmD,EAAAA,cAAc,CAACnD,KAAD,EACd;AACI,SAAKvC,qBAAL,GAA6BuC,KAAK,CAACuI,OAAN,CAAc,IAAd,CAA7B;;AACA,QAAIzI,IAAI,GAAG,KAAK1D,gBAAL,CAAsBiO,OAAtB,CAA8B,KAAK5M,qBAAnC,CAAX;;AACA,SAAKpB,GAAL,CAASE,KAAT,CAAe,CAACyD,KAAD,CAAf;;AACA,SAAK3D,GAAL,CAASiM,SAAT;;AACA,SAAKvL,KAAL,CAAW+H,SAAX;;AACA9E,IAAAA,KAAK,CAACqI,OAAN,CAAc,WAAd,EAA2B,IAA3B;;AAEA,SAAKnL,cAAL,CAAoB4C,IAAI,GAAG,SAA3B;;AAEA,SAAKzC,gBAAL,CACI,KAAKjB,gBAAL,CAAsBkO,WAAtB,CAAkC,KAAK7M,qBAAvC,CADJ;;AAIAgL,IAAAA,UAAU,CAAC,MAAM;AACb,WAAK7L,MAAL,CAAY2F,EAAZ,CAAe,OAAf,EAAwBmG,kBAAxB;AACH,KAFS,CAAV;;AAIA,QAAIA,kBAAkB,GAAIC,CAAD,IAAO;AAC5B,UAAIA,CAAC,CAACC,MAAF,KAAa5I,KAAjB,EAAwB;AACpB,aAAKvC,qBAAL,GAA6B,CAAC,CAA9B;;AACA,aAAKpB,GAAL,CAASE,KAAT,CAAe,EAAf;;AACAyD,QAAAA,KAAK,CAACqI,OAAN,CAAc,WAAd,EAA2B,KAA3B;;AACA,aAAKtL,KAAL,CAAW+H,SAAX;;AACA,aAAK5H,cAAL,CAAoB,MAApB;;AACA,aAAKN,MAAL,CAAYyI,GAAZ,CAAgB,OAAhB,EAAyBqD,kBAAzB;AACH;AACJ,KATD;AAUH;;AAEDjG,EAAAA,sBAAsB,CAAC4G,IAAD,EACtB;AACI,QAAIpE,SAAS,GAAG,KAAKrI,MAAL,CAAYsI,IAAZ,CAAkBC,IAAD,IAAU;AACvC,aAAOA,IAAI,CAACC,OAAL,CAAa,YAAb,KAA8BD,IAAI,CAACC,OAAL,CAAa,WAAb,CAArC;AACH,KAFe,CAAhB;AAAA,QAGImF,MAAM,GAAG,KAAKC,iBAAL,CAAuBnB,IAAvB,CAHb;;AAKApE,IAAAA,SAAS,GAAGA,SAAS,CAACwF,MAAV,CAAiBzI,CAAC,IAAIuI,MAAM,KAAKvI,CAAjC,CAAZ;AAEAiD,IAAAA,SAAS,CAAClD,OAAV,CAAkB/B,KAAK,IAAI;AACvB,UAAI5F,KAAK,CAACsQ,IAAN,CAAWC,gBAAX,CAA4B3K,KAAK,CAAC4K,aAAN,EAA5B,EAAmDvB,IAAI,CAACuB,aAAL,EAAnD,CAAJ,EAA8E;AAC1E,YAAIC,MAAM,GAAGxB,IAAI,CAACyB,mBAAL,EAAb;AACAzB,QAAAA,IAAI,CAAC0B,MAAL,CAAY/K,KAAZ;AACAqJ,QAAAA,IAAI,CAAC2B,gBAAL,CAAsB;AAClB9K,UAAAA,CAAC,EAAE2K,MAAM,CAAC3K,CADQ;AAElBC,UAAAA,CAAC,EAAE0K,MAAM,CAAC1K;AAFQ,SAAtB;AAIH;AACJ,KATD;AAUH;;AAEDqK,EAAAA,iBAAiB,CAACnB,IAAD,EACjB;AACI,QAAIkB,MAAM,GAAGlB,IAAI,CAAC4B,SAAL,EAAb;;AACA,WAAOV,MAAM,CAACW,QAAP,KAAoB,CAApB,IAAyB,CAACX,MAAM,CAACnF,OAAP,CAAe,YAAf,CAAjC,EAA+D;AAC3DmF,MAAAA,MAAM,GAAGA,MAAM,CAACU,SAAP,EAAT;AACH;;AACD,WAAOV,MAAP;AACH;;AAEDY,EAAAA,2BAA2B,GAC3B;AACI,SAAKpO,KAAL,CAAWc,GAAX,CAAe,KAAKuN,mBAApB;;AACA,SAAKC,sBAAL;;AACA,SAAKC,qBAAL;;AACA,SAAKC,oBAAL;;AACA,SAAKC,yBAAL;AACH;;AAEDH,EAAAA,sBAAsB,GACtB;AACI,SAAKzO,MAAL,CAAY2F,EAAZ,CAAe,sBAAf,EAAuCoG,CAAC,IAAI;AACxC;AACA,WAAK8C,YAAL,GAAoB,IAApB;AAEA,WAAKC,QAAL,GAAgB,KAAK9O,MAAL,CAAY+O,kBAAZ,GAAiCzL,CAAjD;AACA,WAAK0L,QAAL,GAAgB,KAAKF,QAArB;AACA,WAAKG,QAAL,GAAgB,KAAKjP,MAAL,CAAY+O,kBAAZ,GAAiCxL,CAAjD;AACA,WAAK2L,QAAL,GAAgB,KAAKD,QAArB;;AAEA,WAAKT,mBAAL,CAAyBW,OAAzB,CAAiC,IAAjC;;AACA,WAAKX,mBAAL,CAAyB3P,KAAzB,CAA+B,CAA/B;;AACA,WAAK2P,mBAAL,CAAyB5P,MAAzB,CAAgC,CAAhC;;AACA,WAAKuB,KAAL,CAAW+H,SAAX;AACH,KAbD;AAcH;;AAEDwG,EAAAA,qBAAqB,GACrB;AACI,SAAK1O,MAAL,CAAY2F,EAAZ,CAAe,qBAAf,EAAsC,MAAM;AACxC,UAAI,CAAC,KAAK6I,mBAAL,CAAyBW,OAAzB,EAAL,EAAyC;AAEzC,WAAKH,QAAL,GAAgB,KAAKhP,MAAL,CAAY+O,kBAAZ,GAAiCzL,CAAjD;AACA,WAAK4L,QAAL,GAAgB,KAAKlP,MAAL,CAAY+O,kBAAZ,GAAiCxL,CAAjD;;AAEA,WAAKiL,mBAAL,CAAyBzL,QAAzB,CAAkC;AAC9BO,QAAAA,CAAC,EAAE8L,IAAI,CAACC,GAAL,CAAS,KAAKP,QAAd,EAAwB,KAAKE,QAA7B,CAD2B;AAE9BzL,QAAAA,CAAC,EAAE6L,IAAI,CAACC,GAAL,CAAS,KAAKJ,QAAd,EAAwB,KAAKC,QAA7B,CAF2B;AAG9BrQ,QAAAA,KAAK,EAAEuQ,IAAI,CAACE,GAAL,CAAS,KAAKN,QAAL,GAAgB,KAAKF,QAA9B,CAHuB;AAI9BlQ,QAAAA,MAAM,EAAEwQ,IAAI,CAACE,GAAL,CAAS,KAAKJ,QAAL,GAAgB,KAAKD,QAA9B;AAJsB,OAAlC;;AAOA,WAAK9O,KAAL,CAAW+H,SAAX;AACH,KAdD;AAeH;;AAEDyG,EAAAA,oBAAoB,GACpB;AACI,SAAK3O,MAAL,CAAY2F,EAAZ,CAAe,kBAAf,EAAmC,MAAM;AACrC,UAAI,CAAC,KAAK6I,mBAAL,CAAyBW,OAAzB,EAAL,EAAyC,OADJ,CAErC;;AACA,UAAII,KAAK,GAAG,KAAKvP,MAAL,CAAYsI,IAAZ,CAAiB,aAAjB,EAAgCkH,OAAhC,EAAZ;;AACA,UAAIC,GAAG,GAAG,KAAKjB,mBAAL,CAAyBR,aAAzB,EAAV;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEY,UAAI0B,QAAQ,GAAGH,KAAK,CAAC1B,MAAN,CAAcpB,IAAD,IACxBjP,KAAK,CAACsQ,IAAN,CAAWC,gBAAX,CAA4B0B,GAA5B,EAAiChD,IAAI,CAACuB,aAAL,EAAjC,CADW,CAAf;AAGA2B,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAEA,WAAKjQ,GAAL,CAASE,KAAT,CAAe+P,QAAf;;AACA,WAAKjQ,GAAL,CAASiM,SAAT;;AACA,WAAKvL,KAAL,CAAW+H,SAAX;;AAEA2D,MAAAA,UAAU,CAAC,MAAM;AACb,aAAK2C,mBAAL,CAAyBW,OAAzB,CAAiC,KAAjC;;AACA,aAAKhP,KAAL,CAAW+H,SAAX;;AACA,aAAK2H,YAAL,GAAoB,IAApB;AACA,aAAKhB,YAAL,GAAoB,KAApB;AACH,OALS,CAAV;AAMH,KAtCD;AAuCH;;AAEDD,EAAAA,yBAAyB,GACzB;AACI,SAAK5O,MAAL,CAAY2F,EAAZ,CAAe,WAAf,EAA4BoG,CAAC,IAAI;AAC7B,UAAI,KAAKyC,mBAAL,CAAyBW,OAAzB,EAAJ,EAAwC;;AACxC,UAAI,KAAKU,YAAT,EAAuB;AACnB,aAAKC,SAAL,CAAe3K,OAAf,CAAuBoD,IAAI,IAAI;AAC3BA,UAAAA,IAAI,CAACkD,OAAL,CAAa,WAAb,EAA0B,KAA1B;AACH,SAFD;;AAIA,aAAKhM,GAAL,CAASE,KAAT,CAAe,EAAf;;AACA,aAAKQ,KAAL,CAAW+H,SAAX;;AACA,aAAK2H,YAAL,GAAoB,KAApB;AACA;AACH;AACJ,KAZD;AAaH;;AAllCL;;AAqlCA,SAASnR,YAAT","sourcesContent":["// Cullen, Riley\n// AInfographic.js\n// October 26, 2020 \n\nimport Konva from 'konva';\nimport html2canvas from 'html2canvas';\nimport { ChartHandler, GraphicsHandler, TextHandler } from '../Handlers/index';\nimport { BasicBarChart, StackedBarChart } from '../Charts/BarChart/index';\nimport { IconBarChart } from '../Charts/IconBarChart/index';\nimport { GenerateIconDataArray, WaffleChart } from '../Charts/WaffleChart';\nimport { LineChart, LineXAxisDecorator, LineYAxisDecorator } from '../Charts/LineChart';\nimport { DonutChart, PieChart } from '../Charts/PieChart';\nimport { RectangleHeader, RibbonHeader } from '../Headers';\nimport { MessageBubble } from '../ToolTips';\n\nclass AInfographic \n{\n    /**\n     * @summary     An abstract class the provide structure and common functionality\n     *              to the Infographic type.\n     * @description See summary.\n     * \n     * @requires D3.js\n     * @requires Konva.js\n     * \n     * @source _AddTextSelection() uses code from https://konvajs.org/docs/sandbox/Editable_Text.html\n     * @source Selecting mutliple elements demo uses code from https://konvajs.org/docs/select_and_transform/Basic_demo.html#page-title\n     * @source _DrawSVG code taken from https://konvajs.org/docs/sandbox/SVG_On_Canvas.html\n     * @source Download code taken from https://konvajs.org/docs/data_and_serialization/High-Quality-Export.html\n     * \n     * @param {double} height The height of the canvas element\n     * @param {double} width  The width of the canvas element\n     */\n    constructor(height, width, editorHandler, textCallback, chartCallback, graphicCallback)\n    {\n        if (AInfographic === this.constructor) {\n            throw new TypeError('Abstract class \"AInfographic\" cannot be instantiated');\n        }\n\n        if (this.CreateInfographic === undefined) {\n            throw new TypeError('Types extending \"AInfographic\" must implement CreateInfographic()');\n        }\n\n        if (this.Draw === undefined) {\n            throw new TypeError('Types extending \"AInfographic\" must implement Draw()');\n        }\n\n        this._chartHandler = new ChartHandler();\n        this._textHandler = new TextHandler();\n        this._graphicsHandler = new GraphicsHandler();\n\n        this._tr = new Konva.Transformer({\n            nodes: [],\n            resizeEnabled: false,\n            rotateEnabled: false,\n        });\n\n        this._chartHeight = height;\n        this._chartWidth = width;\n        this._stage = new Konva.Stage({\n            container: 'canvas-container',\n            width: this._chartWidth,\n            height: this._chartHeight,\n        });\n\n        /*this._selectionRectangle = new Konva.Rect({\n            fill: 'rgba(0, 0, 255, 0.5)',\n            visible: false,\n        });\n        this._hasSelected = false;\n        this._isSelecting = false;\n        this._oldNodes = [];\n        this._mouseX1 = 0, this._mouseX2 = 0, this._mouseY1 = 0, this._mouseY2 = 0;*/\n\n        this._main = new Konva.Layer();\n        this._bkg = 0;\n        // this._UIAdder = new UIAdder(this._chartWidth, this._chartHeight);\n\n        this._editorHandler = editorHandler;\n        this._textCallback = textCallback;\n        this._chartCallback = chartCallback;\n        this._graphicCallback = graphicCallback;\n\n        this._selectedTextIndex = -1;\n        this._selectedTextHelper = -1;\n        this._selectedChartIndex = -1;\n        this._selectedGraphicIndex = -1;\n\n        this._colorScheme = {\n            primary: '#999',\n            secondary: '#000',\n        }\n\n        this._stage.add(this._main);\n\n        this._main.add(this._tr);\n\n        this._AddStageBorder();\n    }\n\n    /**\n     * @summary     Returns chart's dimensions to caller.\n     * @description Returns the chart's width and height in the form of a JSON\n     *              object to the caller.\n     * @returns A JSON object containing the chart's width and height.\n     */\n    GetDimensions()\n    {\n        return {\n            width: this._chartWidth,\n            height: this._chartHeight,\n        };\n    }\n\n    /**\n     * @summary     Manages memory for infographic type.\n     * @description A function that is responsible for freeing memory that would \n     *              otherwise cause memory leaks. \n     */\n    Clean()\n    {\n        // Remove chart/text listeners\n        this._RemoveTextListeners();\n        this._RemoveChartListeners();\n        this._RemoveGraphicListeners();\n\n        // Remove all the elements from this._stage\n        this._stage.destroy();\n        this._stage = 0;\n    }\n\n    ClearSelection()\n    {\n        this._tr.nodes([]);\n        this._selectedChartIndex = -1;\n        this._selectedGraphicIndex = -1;\n        this._selectedTextIndex = this._selectedTextHelper = -1;\n    }\n\n    Download()\n    {\n        // function from https://stackoverflow.com/a/15832662/512042\n        function downloadURI(uri, name) {\n            var link = document.createElement('a');\n            link.download = name;\n            link.href = uri;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            link.remove();\n        }\n        var dataURL = this._stage.toDataURL({pixelRatio: 5})\n        downloadURI(dataURL, 'Infographic.png');\n    }\n\n    UpdateLayering(layerAction)\n    {\n        if (this._selectedChartIndex !== -1) {\n            this._chartHandler.UpdateLayering(this._selectedChartIndex, layerAction);\n        } else if (this._selectedGraphicIndex !== -1) {\n            this._graphicsHandler.UpdateLayering(this._selectedGraphicIndex, layerAction);\n        } else if (this._selectedTextIndex !== -1) {\n            this._textHandler.UpdateLayering(this._selectedTextIndex, layerAction);\n        }\n    }\n\n    UpdateBackground(settings)\n    {\n        if (settings === 0) return;\n        this._bkg.setAttrs({\n            fill: settings.fill,\n        });\n    }\n\n    InsertElement({type, element})\n    {\n        let group = new Konva.Group({\n            x: this._chartWidth / 2,\n            y: this._chartHeight / 2,\n        });\n        this._main.add(group);\n        if (type === 'chart') {\n            let chart = 0, \n                decoratorList = [];\n            switch(element) {\n                case 'Bar':\n                    chart = new BasicBarChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 10,\n                                color: this._colorScheme.primary,\n                            },\n                            {\n                                category: 'B',\n                                value: 30,\n                                color: this._colorScheme.primary\n                            }\n                        ],\n                        group: group,\n                        width: 100,\n                        height: 100,\n                        padding: 0.2,\n                    });\n                    break;\n                case 'Stacked':\n                    chart = new StackedBarChart({\n                        data: [\n                            {\n                                category: 'A',\n                                subcategory: 'one',\n                                value: 10,\n                                color: this._colorScheme.primary,\n                            },\n                            {\n                                category: 'A',\n                                subcategory: 'two',\n                                value: 20,\n                                color: this._colorScheme.secondary,\n                            }\n                        ],\n                        group: group,\n                        width: 100,\n                        height: 100, \n                        padding: 0.2,\n                    });\n                    break;\n                case 'Icon':\n                    chart = new IconBarChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 15,\n                                color: this._colorScheme.primary\n                            },\n                            {\n                                category: 'B',\n                                value: 30,\n                                color: this._colorScheme.primary,\n                            }\n                        ],\n                        group: group,\n                        width: 100,\n                        height: 100,\n                        padding: 50,\n                        remainderColor: this._colorScheme.secondary\n                    });\n                    break;\n                case 'Waffle':\n                    chart = new WaffleChart({\n                        numerator: 1,\n                        denominator: 3,\n                        group: group,\n                        presetA: GenerateIconDataArray({\n                            icon: '\\uf004',\n                            color: this._colorScheme.primary,\n                            offset: 85,\n                            font: '\"Font Awesome 5 Free\"'\n                        }),\n                        presetB: GenerateIconDataArray({\n                            icon: '\\uf004',\n                            color: this._colorScheme.secondary,\n                            offset: 85,\n                            font: '\"Font Awesome 5 Free\"'\n                        }),\n                        fontSize: 80,\n                        isDynamicResize: false,\n                    });\n                    break;\n                case 'Line':\n                    chart = new LineChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 10,\n                            },\n                            {\n                                category: 'B',\n                                value: 20,\n                            }\n                        ],\n                        group: group,\n                        chartWidth: 100,\n                        chartHeight: 100,\n                        lineWidth: 1,\n                        pointRadius: 3,\n                        lineColor: this._colorScheme.primary,\n                        pointColor: this._colorScheme.secondary,\n                    });\n                    decoratorList[0] = new LineXAxisDecorator({\n                        chart: chart,\n                    });\n                    decoratorList[1] = new LineYAxisDecorator({\n                        chart: decoratorList[0],\n                    });\n                    break;\n                case 'Pie':\n                    chart = new PieChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 10,\n                                color: this._colorScheme.primary,\n                            },\n                            {\n                                category: 'B',\n                                value: 90,\n                                color: this._colorScheme.secondary,\n                            }\n                        ],\n                        group: group,\n                        radius: 50,\n                    });\n                    break;\n                case 'Donut':\n                    chart = new DonutChart({\n                        data: [\n                            {\n                                category: 'A',\n                                value: 20,\n                                color: this._colorScheme.primary,\n                            },\n                            {\n                                category: 'B',\n                                value: 80,\n                                color: this._colorScheme.secondary\n                            }\n                        ],\n                        group: group,\n                        radius: 50,\n                        innerRadius: 35,\n                    });\n                    break;\n                default:\n                    break;\n            }\n            if (chart !== 0) {\n                this._chartHandler.AddChart({\n                    chart: chart,\n                    group: group,\n                    type: element,\n                });\n                decoratorList.forEach(d => {\n                    this._chartHandler.AddDecorator({\n                        decorator: d, \n                        id: this._chartHandler.GetCurrChartID()\n                    });\n                });\n\n                if (decoratorList.length === 0) chart.CreateChart();\n                else decoratorList[decoratorList.length - 1].CreateChart();\n\n                group.on('dblclick', () => {\n                    this._ChartHelper(group);\n                });\n                group.on('dragend', () => {\n                    this._SwitchContainerOnDrag(group);\n                });\n                this._ChartHelper(group);\n            }\n        } else if (type === 'icon') {\n            let icon = new Konva.Text({\n                text: String.fromCharCode(parseInt(element, 16)),\n                fontFamily: '\"Font Awesome 5 Free\"',\n                fontStyle: '900',\n                fill: this._colorScheme.primary,\n                fontSize: 100,\n            });\n            this._graphicsHandler.AddGraphic({\n                type: type,\n                graphic: icon,\n                group: group,\n            });\n\n            group.on('dblclick', () => {\n                this._GraphicHelper(group);\n            });\n            group.on('dragend', () => {\n                this._SwitchContainerOnDrag(group);\n            });\n            this._GraphicHelper(group);\n        } else if (type === 'text') {\n            // Set up text\n            let div = document.createElement('div'),\n                textElem = '<p><span style=\"line-height: 1.2; font-size: 20px; font-family: museo, serif;\">' \n                + element + '</span></p>';\n            div.innerHTML = textElem;\n\n            // Set up text handler \n            this._textHandler.AddTextElem({\n                textElem: div,\n                group: group,\n                x: 0,\n                y: 0,\n                rotateBy: 0,\n            });\n            this._textHandler.SetCSSInfo({\n                id: this._textHandler.GetCurrID(),\n                fontFamily: this._quillMap('museo', 900),\n                fontSize: '20px',\n                textColor: '#000',\n                lineHeight: '1.2',\n                align: 'center',\n            });\n\n            // Render the text \n            var helperElem = document.createElement('div');\n            helperElem.style.position = 'absolute';\n            document.getElementById('renderHelper').appendChild(helperElem);\n            helperElem.appendChild(div);\n            this._HTMLToCanvas('.EditableText', this._textHandler.GetCurrID());\n            div.remove();\n            helperElem.remove();\n\n            let helper = this._textHandler.GetImage(this._textHandler.GetCurrID());\n            helper.on('dblclick', () => {\n                this._TextHelper(helper);\n            });\n            helper.on('dragend', () => {\n                this._SwitchContainerOnDrag(helper);\n            });\n            this._TextHelper(helper);\n        } else if (type === 'bkg-elem') {\n            let graphic = 0;\n            switch(element) {\n                case 'ribbon-header':\n                    graphic = new RibbonHeader({\n                        colorOne: this._colorScheme.primary,\n                        colorTwo: this._colorScheme.secondary,\n                        group: group,\n                        hWidth: 300,\n                        hHeight: 25,\n                        iWidth: this._chartWidth,\n                        iHeight: this._chartHeight,\n                    });\n                    break;\n                case 'rectangle-header':\n                    graphic = new RectangleHeader({\n                        x: 0,\n                        y: 0,\n                        width: 300,\n                        height: 200,\n                        cornerRadius: 0,\n                        fill: this._colorScheme.primary,\n                        group: group,\n                    });\n                    break;\n                case 'message-bubble':\n                    graphic = new MessageBubble(group, 200, 100, this._colorScheme.primary, 0, 0);\n                    break;\n                default:\n                    break;\n            }\n            this._graphicsHandler.AddGraphic({\n                type: 'header',\n                graphic: graphic,\n                group: group,\n            });\n            group.on('dblclick', () => {\n                this._GraphicHelper(group);\n            });\n            group.on('dragend', () => {\n                this._SwitchContainerOnDrag(group);\n            });\n            this._GraphicHelper(group);\n        }\n        this._main.batchDraw();\n    }\n\n    _CreateSwitchableContainer(attrs = {}, id = '')\n    {\n        attrs.name = 'Switchable Container ' + id;\n        return new Konva.Group(attrs);\n    }\n\n    /**\n     * @summary Removes the event listeners from each text node.\n     */\n    _RemoveTextListeners()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('EditableText');\n        });\n        selection.forEach(textElem => { textElem.off('dblclick'); })\n    }\n\n    /**\n     * @summary Removes the event listeners from each chart node.\n     */\n    _RemoveChartListeners()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('Chart');\n        });\n        selection.forEach(chartElem => { chartElem.off('dblclick'); })\n    }\n\n    _RemoveGraphicListeners()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Graphic');\n        });\n        selection.forEach(group => { group.off('dblclick'); });\n    }\n\n    _CreateImage({x, y, width, height, src, group})\n    {\n        let image = new Image(), imageHelper = new Konva.Image(),\n            imageGroup = new Konva.Group();\n\n        image.onload = () => {\n            imageHelper.setAttrs({\n                x: x, \n                y: y,\n                height: height,\n                width: width,\n                image: image,\n                opacity: 1,\n                stroke: 'black',\n                strokeWidth: 0\n            });\n            imageHelper.cache();\n            imageHelper.filters([\n                Konva.Filters.Contrast,\n                Konva.Filters.Brighten,\n                Konva.Filters.Blur,\n            ]);\n\n            imageHelper.brightness(0);\n            imageHelper.blurRadius(0);\n            imageHelper.contrast(0);\n\n            this._main.batchDraw();\n            image.onload = null;\n        };\n\n        image.src = src;\n        imageGroup.add(imageHelper);\n        group.add(imageGroup);\n        this._graphicsHandler.AddGraphic({\n            type: 'image',\n            graphic: imageHelper,\n            group: imageGroup,\n        });\n    }\n\n    /**\n     * @summary     A function that takes in a font and a font weight and maps it\n     *              to the proper quill code.\n     * \n     * @param {string} font   The font associated with a quill code.\n     * @param {int}    weight The weight associated with a quill code. \n     */\n    _quillMap(font, weight = 0)\n    {\n        if (font === 'museo' && weight === 900) return '900-museo';\n        else if (font === 'canada-type-gibson') {\n            switch (weight) {\n                case 100: return '100-canada';\n                case 200: return '200-canada';\n                case 400: return '400-canada';\n                case 500: return '500-canada';\n                case 600: return '600-canada';\n                case 700: return '700-canada';\n                case 900: return '900-canada';\n                default: return '100-canada';\n            }\n        } else if (font === 'Montserrat') return '200-Montserrat';\n        else if (font === 'Open Sans') return 'Open-Sans';\n        else if (font === 'Roboto') {\n            switch(weight) {\n                case 100: return '100-Roboto';\n                case 300: return '300-Roboto';\n                case 400: return '400-Roboto';\n                case 500: return '500-Roboto';\n                case 700: return '700-Roboto';\n                case 900: return '900-Roboto';\n                default: return '100-Roboto';\n            }\n        }\n    }\n\n    /**\n     * @summary     Adds a black border around the edges of the canvas element.\n     */\n    _AddStageBorder()\n    {\n        this._bkg = new Konva.Rect({\n            x: 0,\n            y: 0,\n            width: this._stage.width(),\n            height: this._stage.height(),\n            fill: 'white',\n            stroke: 'black',\n        });\n        this._main.add(this._bkg);\n        this._bkg.moveToBottom();\n    }\n\n    /**\n     * @summary     Returns the width of a text element given the text's font.\n     * @description Using canvas' measureText function, _GetTextWidth returns the\n     *              width in pixels of a given piece of text.\n     * \n     * @param {string} text       The text we want to determine the width of.\n     * @param {double} fontSize   The font size of the text we want to find the width of.\n     * @param {string} fontFamily The font family of the text we want to analyze.\n     */\n    _GetTextWidth(text, fontSize, fontFamily)\n    {\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n\n        ctx.font = fontSize + 'px ' + fontFamily;\n        var helper = ctx.measureText(text).width;\n        canvas.remove();\n\n        return helper;\n    }\n    /**\n     * @param {double} width  The width of the element we are centering.\n     * @param {double} center The x-coordinate we want to center about.\n     */\n    _CenterXAbout(width, center)\n    {\n        return center - (width / 2);\n    }\n\n    /**\n     * @summary     Calls additional functions to complete the infographic.\n     * @description Renders all of the text elements and adds the capability to \n     *              edit graphs and text elements.\n     */\n    _FinalizeInfog()\n    {\n        this._RenderText();\n        this._AddGraphSelection();\n        this._AddTextSelection();\n        this._AddGraphicSelection();\n        // this._AddMultipleElementSelector();\n    }\n\n    /**\n     * @summary     Renders all of the text elements.\n     * @description Iterates through all of the elements in textHandler and converts\n     *              them from DOM elements to Konva.Image elements.\n     */\n    _RenderText()\n    {\n        var helperElem = document.createElement('div');\n        helperElem.style.position = 'absolute';\n        document.getElementById('renderHelper').appendChild(helperElem);\n\n        for (var i = 0; i < this._textHandler.GetSize(); i++) {\n            helperElem.appendChild(this._textHandler.GetTextElem(i));\n            this._HTMLToCanvas('.EditableText', i);\n            this._textHandler.GetTextElem(i).remove();\n        }\n        helperElem.remove();\n    }\n\n    /**\n     * @summary     Converts DOM elements on the page to Konva.Image elements\n     * @description Uses the html2canvas module to convert DOM elements located \n     *              within the body into Konva.Image elements.\n     * \n     * @param {int} index The index of the text element we want to convert.\n     */\n    _HTMLToCanvas(query, index)\n    {\n        var element = document.querySelector(query);\n        // var comp = window.getComputedStyle(element, null);\n        html2canvas(element, {\n            logging: false,\n            backgroundColor: null,\n            scrollY: -(window.scrollY),\n            // width: comp.width.replace('px', ''),\n        }).then((image) => {\n            // console.log('image width: ' + image.width)\n            this._textHandler.GetImage(index).image(image);\n            this._main.batchDraw();\n        }).catch(() => {\n            var helperElem = document.createElement('div');\n            helperElem.style.position = 'absolute';\n            document.getElementById('renderHelper').appendChild(helperElem);\n\n            helperElem.appendChild(this._textHandler.GetTextElem(index));\n            this._HTMLToCanvas('.EditableText', index);\n            this._textHandler.GetTextElem(index).remove();\n            helperElem.remove();\n        });\n        /*console.log('width: ' + comp.width);\n        console.log('height: ' + comp.height);\n        console.log('x: ' + comp.x);\n        console.log('y: ' + comp.y)*/\n    }\n\n    /**\n     * @summary     Adds the capability to select and edit text.\n     * @description Iterates through all of the elements in the text handler and\n     *              adds an event listener that triggers when the text element\n     *              is double clicked.\n     */\n    _AddTextSelection()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('EditableText');\n        });\n\n        selection.forEach((textElem) => {\n            textElem.on('dblclick', () => {\n                this._TextHelper(textElem);\n            });\n\n            textElem.on('dragend', () => {\n                this._SwitchContainerOnDrag(textElem);\n            });\n        });\n    }\n\n    _TextHelper(textElem)\n    {\n        textElem.setAttr('draggable', true);\n\n        this._tr.nodes([textElem]);\n        this._tr.moveToTop();\n        this._main.batchDraw();\n\n        this._selectedTextIndex = textElem.getAttr('id');\n        this._selectedTextHelper = this._selectedTextIndex;\n\n        this._textCallback(this._textHandler.GetHandlerElem(this._selectedTextIndex));\n        this._editorHandler('text-editor');\n\n        setTimeout(() => {\n            this._stage.on('click', HandleOutsideClick);\n        });\n\n        var HandleOutsideClick = (e) => {\n            if (e.target !== textElem) {\n                this._selectedTextIndex = -1;\n                this._editorHandler('none');\n                this._tr.nodes([]);\n                textElem.setAttr('draggable', false);\n                this._main.batchDraw();\n                this._stage.off('click', HandleOutsideClick);\n            }\n        };\n    }\n\n    /**\n     * @summary     Updates current handler element.\n     * @description Updates the text handler element located at _selectedTextIndex\n     *              with data from the parameterized textElem variable.\n     * \n     * @param {JSON} textElem A JSON object containing the updated textElem information.\n     */\n    UpdateTextHandler(textElem)\n    {\n        if (textElem.image === undefined || textElem.textElem === undefined || \n            textElem.group === undefined || textElem.spanCSS === undefined || \n            textElem === 0) {\n            return;\n        } \n        this._textHandler.UpdateTextElem({\n            index: this._selectedTextHelper,\n            textElem: textElem.textElem,\n            group: textElem.group,\n            image: textElem.image,\n            spanCSS: textElem.spanCSS,\n        });\n        this._selectedTextHelper = -1;\n        this._main.batchDraw();\n    }\n\n    Remove()\n    {\n        // TODO remove entries from handler\n        if (this._selectedChartIndex !== -1) {\n            this._tr.nodes([]);\n            this._main.batchDraw();\n            this._chartHandler.RemoveHandlerElem(this._selectedChartIndex);\n            this._selectedChartIndex = -1;\n        } else if (this._selectedTextIndex !== -1) {\n            this._tr.nodes([]);\n            this._main.batchDraw();\n            this._textHandler.RemoveHandlerElem(this._selectedTextIndex);\n            this._selectedTextIndex = this._selectedTextHelper = -1;\n        } else if (this._selectedGraphicIndex !== -1) {\n            this._tr.nodes([]);\n            this._main.batchDraw();\n            this._graphicsHandler.RemoveHandlerElem(this._selectedGraphicIndex);\n            this._selectedGraphicIndex = -1;\n        }\n    }\n\n    UpdateChartDecorators(settings)\n    {\n        if (settings === 0 || this._selectedChartIndex === -1) return;\n        this._chartHandler.UpdateChartDecorators(this._selectedChartIndex, settings);\n    }\n\n    /**\n     * @summary     Updates the selected chart.\n     * @description Updates the chart (and its associated data) at index \n     *              _selectedChartIndex.\n     * @param {misc} chartData The structure of this variable depends on the \n     *                         type of chart we are dealing with.\n     */\n    UpdateChartData(chartData)\n    {\n        if (chartData === 0 || this._selectedChartIndex === -1) return;\n        var elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex),\n            name = elem.group.getAttr('name');\n        if (name === 'Selectable Chart Waffle') {\n            // We assume that the data will be formatted as follows\n            // data = {\n            //    numerator: {num}, denominator: {num}\n            // }\n            if (chartData.numerator === 0 || chartData.denominator === 0) return;\n            var numerator = chartData.numerator, denominator = chartData.denominator;\n            elem.chart.UpdateData(parseInt(numerator), parseInt(denominator));\n        } else {\n            // We assume that the data will be formated as follows\n            // data = [\n            //    { category: {string}, value: {float}, color: {string}}, ...   \n            // ]\n            elem.chart.UpdateData(chartData);\n        } \n\n        this._UpdateDecorators(elem);\n    }\n\n    UpdateChartSettings(settings)\n    {\n        if (settings === 0 || this._selectedChartIndex === -1) return;\n        let elem = this._chartHandler.GetHandlerElem(this._selectedChartIndex);\n        elem.chart.UpdateChartSettings(settings);\n        this._UpdateDecorators(elem);\n    }\n\n    UpdateGraphicSettings(settings)\n    {\n        if (settings === 0 || this._selectedGraphicIndex === -1) return;\n        this._graphicsHandler.UpdateGraphicSettings({\n            id: this._selectedGraphicIndex, \n            settings:settings\n        });\n        this._tr.forceUpdate();\n        this._main.batchDraw();\n    }\n\n    /**\n     * @summary     Updates decorators.\n     * @description Iterates though all the decorators in handlerElem and updates\n     *              them.\n     * \n     * @param {JSON} handlerElem \n     */\n    _UpdateDecorators(handlerElem)\n    {\n        var prev = handlerElem.chart;\n        for (var i = 0; i <= handlerElem.decoratorSize; i++) {\n            handlerElem.decorators[i].UpdateDecorator(prev);\n            prev = handlerElem.decorators[i];\n        }\n        prev.CreateChart();\n        this._tr.forceUpdate();\n        this._main.batchDraw();\n    }\n\n    /**\n     * @summary     Adds the capability to select and edit graphs.\n     * @description Iterates through all of the elements in the graph handler and\n     *              adds an event listener when they are double clicked on.\n     */\n    _AddGraphSelection()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Selectable') && node.hasName('Chart');\n        });\n        selection.forEach((chart) => {\n            /**\n             * Adds ability to select and edit graphs.\n             */\n            chart.on('dblclick', () => {\n                this._ChartHelper(chart);\n            });\n\n            chart.on('dragend', () => {\n                this._SwitchContainerOnDrag(chart);\n            });\n        });\n    }\n\n\n    _ChartHelper(chart)\n    {\n        this._selectedChartIndex = parseInt(chart.getAttr('id'));\n                this._tr.nodes([chart]);\n                this._tr.moveToTop();\n                this._main.batchDraw();\n                chart.setAttr('draggable', true);\n\n                let selectedChart = this._chartHandler.GetHandlerElem(this._selectedChartIndex).chart,\n                    dSettings = this._chartHandler.GetDecoratorSettingsArray(this._selectedChartIndex);\n                this._chartCallback(selectedChart.GetData(), selectedChart.GetChartSettings(), dSettings);\n\n                if (chart.getAttr('name') === 'Selectable Chart Waffle') {\n                    this._editorHandler('waffle-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Pie') {\n                    this._editorHandler('pie-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Bar') {\n                    this._editorHandler('bar-editor')\n                } else if (chart.getAttr('name') === 'Selectable Chart Stacked') {\n                    this._editorHandler('stacked-bar-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Line') {\n                    this._editorHandler('line-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Icon') {\n                    this._editorHandler('icon-bar-editor');\n                } else if (chart.getAttr('name') === 'Selectable Chart Donut') {\n                    this._editorHandler('donut-editor');\n                }\n\n                setTimeout(() => {\n                    this._stage.on('click', HandleOutsideClick);\n                });\n\n                var HandleOutsideClick = (e) => {\n                    if (e.target !== chart) {\n                        this._selectedChartIndex = -1;\n                        this._editorHandler('none');\n                        this._tr.nodes([]);\n                        chart.setAttr('draggable', false);\n                        this._main.batchDraw();\n                        this._stage.off('click', HandleOutsideClick);\n                    }\n                };\n    }\n\n    _AddGraphicSelection()\n    {\n        var selection = this._stage.find((node) => {\n            return node.hasName('Graphic');\n        });\n\n        selection.forEach((group) => {\n            group.on('dblclick', () => {\n                this._GraphicHelper(group);\n            });\n\n            group.on('dragend', () => {\n                this._SwitchContainerOnDrag(group);\n            });\n        });\n    }\n\n    _GraphicHelper(group)\n    {\n        this._selectedGraphicIndex = group.getAttr('id');\n        let type = this._graphicsHandler.GetType(this._selectedGraphicIndex);\n        this._tr.nodes([group]);\n        this._tr.moveToTop();\n        this._main.batchDraw();\n        group.setAttr('draggable', true);\n\n        this._editorHandler(type + '-editor');\n\n        this._graphicCallback(\n            this._graphicsHandler.GetSettings(this._selectedGraphicIndex)\n        );\n\n        setTimeout(() => {\n            this._stage.on('click', HandleOutsideClick);\n        });\n\n        var HandleOutsideClick = (e) => {\n            if (e.target !== group) {\n                this._selectedGraphicIndex = -1;\n                this._tr.nodes([]);\n                group.setAttr('draggable', false);\n                this._main.batchDraw();\n                this._editorHandler('none');\n                this._stage.off('click', HandleOutsideClick);\n            }\n        };\n    }\n\n    _SwitchContainerOnDrag(elem)\n    {\n        let selection = this._stage.find((node) => {\n            return node.hasName('Switchable') && node.hasName('Container');\n        }),\n            parent = this._FindTopContainer(elem);\n        \n        selection = selection.filter(d => parent !== d)\n    \n        selection.forEach(group => {\n            if (Konva.Util.haveIntersection(group.getClientRect(), elem.getClientRect())) {\n                let absPos = elem.getAbsolutePosition();\n                elem.moveTo(group);\n                elem.absolutePosition({\n                    x: absPos.x,\n                    y: absPos.y\n                });\n            }\n        });\n    }\n\n    _FindTopContainer(elem)\n    {\n        let parent = elem.getParent();\n        while (parent.getDepth() > 2 && !parent.hasName('Switchable')) {\n            parent = parent.getParent();\n        }\n        return parent;\n    }\n\n    _AddMultipleElementSelector()\n    {\n        this._main.add(this._selectionRectangle);\n        this._MultipleSelectorStart();\n        this._MultipleSelectorMove();\n        this._MultipleSelectorEnd();\n        this._MultipleSelectorDeselect();\n    }\n\n    _MultipleSelectorStart()\n    {\n        this._stage.on('mousedown touchstart', e => {\n            //if (e.target !== this._stage) return;\n            this._isSelecting = true;\n\n            this._mouseX1 = this._stage.getPointerPosition().x;\n            this._mouseX2 = this._mouseX1;\n            this._mouseY1 = this._stage.getPointerPosition().y;\n            this._mouseY2 = this._mouseY1;\n\n            this._selectionRectangle.visible(true);\n            this._selectionRectangle.width(0);\n            this._selectionRectangle.height(0);\n            this._main.batchDraw();\n        });\n    }\n\n    _MultipleSelectorMove()\n    {\n        this._stage.on('mousemove touchmove', () => {\n            if (!this._selectionRectangle.visible()) return;\n\n            this._mouseX2 = this._stage.getPointerPosition().x;\n            this._mouseY2 = this._stage.getPointerPosition().y;\n\n            this._selectionRectangle.setAttrs({\n                x: Math.min(this._mouseX1, this._mouseX2),\n                y: Math.min(this._mouseY1, this._mouseY2),\n                width: Math.abs(this._mouseX2 - this._mouseX1),\n                height: Math.abs(this._mouseY2 - this._mouseY1),\n            });\n\n            this._main.batchDraw();\n        });\n    }\n\n    _MultipleSelectorEnd()\n    {\n        this._stage.on('mouseup touchend', () => {\n            if (!this._selectionRectangle.visible()) return;\n            // selection code \n            var elems = this._stage.find('.Selectable').toArray();\n            var box = this._selectionRectangle.getClientRect();\n            /*var selected = elems.filter((element) => {\n                if (Konva.Util.haveIntersection(box, element.getClientRect())) {\n                    alert('h')\n                    return element;\n                }\n                var x = element.getClientRect().x,\n                    y = element.getClientRect().y;\n                if (x >= box.x &&\n                    x <= box.x + box.width &&\n                    y >= box.y &&\n                    y <= box.y + box.height)\n                {\n                    element.setAttr('draggable', true);\n                    this._oldNodes.push(element);\n                    return element;\n                }\n            });*/\n\n            var selected = elems.filter((elem) =>\n                Konva.Util.haveIntersection(box, elem.getClientRect())\n            );\n            console.log(selected)\n\n            this._tr.nodes(selected);\n            this._tr.moveToTop();\n            this._main.batchDraw();\n\n            setTimeout(() => {\n                this._selectionRectangle.visible(false);\n                this._main.batchDraw();\n                this._hasSelected = true;\n                this._isSelecting = false;\n            });\n        });\n    }\n\n    _MultipleSelectorDeselect()\n    {\n        this._stage.on('click tap', e => {\n            if (this._selectionRectangle.visible()) return;\n            if (this._hasSelected) {\n                this._oldNodes.forEach(node => {\n                    node.setAttr('draggable', false);\n                });\n                \n                this._tr.nodes([]);\n                this._main.batchDraw();\n                this._hasSelected = false;\n                return;\n            }\n        });\n    }\n}\n\nexport { AInfographic };"]},"metadata":{},"sourceType":"module"}