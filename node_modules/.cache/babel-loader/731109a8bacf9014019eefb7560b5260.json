{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/IconBarEditor.js\";\nimport React from 'react';\nimport { Editor, Menu, BarChartInputFields, LabeledColorPicker, LabeledTextField, LabeledCheckbox, FontSelector, LabeledDropdown } from './Components/index';\nimport '../../../css/React/Editors/ChartEditor.css';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass IconBarEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this._defaultFont = {\n      fontFamily: 'Times New Roman, Times, serif',\n      fontSize: 10,\n      textColor: '#000'\n    };\n    this._settingsManager = new SettingsManager({\n      cSettings: this.props.cSettings,\n      dSettings: this.props.dSettings,\n      setChartSettings: settings => {\n        this.props.setChartSettings(settings);\n      },\n      setDecoratorSettings: settings => {\n        this.props.setDecoratorSettings(settings);\n      }\n    });\n    this._defaultSettings = {\n      dataValue: {\n        font: this._defaultFont,\n        display: {\n          percentage: false,\n          category: false,\n          isMiddle: true\n        },\n        backgroundColor: {\n          stroke: '#000',\n          fill: '#fff'\n        }\n      },\n      category: {\n        font: this._defaultFont,\n        location: {\n          isWithinBArs: this._isWithinBars,\n          isTop: this._isTop\n        }\n      }\n    };\n  }\n\n  render() {\n    console.log(this.props.dSettings);\n    let chartDataContent = [/*#__PURE__*/_jsxDEV(BarChartInputFields, {\n      chartData: this.props.chartData,\n      setChartData: (d, i) => {\n        this.props.setChartData(d, i);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)];\n    let content = {\n      chartSettings: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Chart Data\",\n        isOpen: true,\n        content: chartDataContent,\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'chart-data', false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Icon Settings\",\n        isOpen: false,\n        content: this._GetIconContent(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'icon-settings', false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)],\n      designOptions: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Data Labels\",\n        isOpen: false,\n        content: this._GetDataLabelsContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.dataValue === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'dataValue', {\n              dataValue: this._defaultSettings.dataValue\n            });\n          }\n        }\n      }, 'data-labels', false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Category Labels\",\n        isOpen: false,\n        content: this._GetCategoryLabelsContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.category === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'category', {\n              category: this._defaultSettings.category\n            });\n          }\n        }\n      }, 'category-labels', false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        content: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n  _SetChartSettings(category, key, value) {\n    this._settingsManager.SetChartSettings(category, key, value);\n  }\n\n  _CheckboxHandler(checkboxValue, key, decoratorSettings) {\n    this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n  }\n\n  _UpdateDecoratorSettings(decorator, category, key, value) {\n    this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n  }\n\n  _GetIconContent() {\n    let iconSettings = this.props.cSettings.iconSettings;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n        label: \"Icon Color\",\n        color: iconSettings.iconColor,\n        onChange: value => {\n          this._SetChartSettings('iconSettings', 'iconColor', value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Icon Size:\",\n        index: \"icon-size\",\n        initialValue: iconSettings.iconSize,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('iconSettings', 'iconSize', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Padding\",\n        index: \"padding\",\n        initialValue: iconSettings.padding,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('iconSettings', 'padding', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetDataLabelsContent() {\n    let settings = this.props.dSettings.dataValue === undefined ? this._defaultSettings.dataValue : this.props.dSettings.dataValue;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Display Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledCheckbox, {\n          label: \"Display Category:\",\n          initialValue: settings.display.category,\n          onClick: d => {\n            this._UpdateDecoratorSettings('dataValue', 'display', 'category', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledCheckbox, {\n          label: \"Display Percentage:\",\n          initialValue: settings.display.percentage,\n          onClick: d => {\n            this._UpdateDecoratorSettings('dataValue', 'display', 'percentage', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledDropdown, {\n          label: \"Location:\",\n          options: ['Middle', 'Top'],\n          selected: settings.display.isMiddle ? 'Middle' : 'Top',\n          onChange: value => {\n            let location = false;\n            if (value === 'Middle') location = true;\n\n            this._UpdateDecoratorSettings('dataValue', 'display', 'isMiddle', location);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Background Box:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n          label: \"Border Color:\",\n          color: settings.backgroundColor.stroke,\n          onChange: value => {\n            this._UpdateDecoratorSettings('dataValue', 'backgroundColor', 'stroke', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n          label: \"Fill Color:\",\n          color: settings.backgroundColor.fill,\n          onChange: value => {\n            this._UpdateDecoratorSettings('dataValue', 'backgroundColor', 'fill', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: settings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('dataValue', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('dataValue', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('dataValue', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetCategoryLabelsContent() {\n    let settings = this.props.dSettings.category === undefined ? this._defaultSettings.category : this.props.dSettings.category;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Location Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledDropdown, {\n          label: \"Location:\",\n          options: ['Top', 'Bottom'],\n          selected: settings.location.isTop === true ? 'Top' : 'Bottom',\n          onChange: value => {\n            let location = false;\n            if (value === 'Top') location = true;\n\n            this._UpdateDecoratorSettings('category', 'location', 'isTop', location);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledCheckbox, {\n          label: \"Display inside bars:\",\n          initialVale: settings.location.isWithinBars,\n          onClick: d => {\n            this._UpdateDecoratorSettings('category', 'location', 'isWithinBars', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: settings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('category', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('category', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('category', 'font', 'textColor', d);\n          }\n        }, 'icon-category-labels', false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)];\n  }\n\n}\n\nexport { IconBarEditor };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/IconBarEditor.js"],"names":["React","Editor","Menu","BarChartInputFields","LabeledColorPicker","LabeledTextField","LabeledCheckbox","FontSelector","LabeledDropdown","SettingsManager","IconBarEditor","Component","constructor","props","_defaultFont","fontFamily","fontSize","textColor","_settingsManager","cSettings","dSettings","setChartSettings","settings","setDecoratorSettings","_defaultSettings","dataValue","font","display","percentage","category","isMiddle","backgroundColor","stroke","fill","location","isWithinBArs","_isWithinBars","isTop","_isTop","render","console","log","chartDataContent","chartData","d","i","setChartData","content","chartSettings","displayCheckbox","_GetIconContent","designOptions","_GetDataLabelsContent","isChecked","undefined","checkboxHandler","_CheckboxHandler","_GetCategoryLabelsContent","_SetChartSettings","key","value","SetChartSettings","checkboxValue","decoratorSettings","DecoratorToggle","_UpdateDecoratorSettings","decorator","UpdateDecoratorSettings","iconSettings","iconColor","iconSize","padding","parseFloat","isWithinBars"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Editor, Menu, BarChartInputFields, LabeledColorPicker, LabeledTextField,\n    LabeledCheckbox, FontSelector, LabeledDropdown } from './Components/index';\n\nimport '../../../css/React/Editors/ChartEditor.css';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\n\nclass IconBarEditor extends React.Component \n{\n    constructor(props)\n    {\n        super(props);\n        this._defaultFont = {\n            fontFamily: 'Times New Roman, Times, serif',\n            fontSize: 10,\n            textColor: '#000'\n        };\n\n        this._settingsManager = new SettingsManager({\n            cSettings: this.props.cSettings,\n            dSettings: this.props.dSettings,\n            setChartSettings: (settings) => { this.props.setChartSettings(settings); },\n            setDecoratorSettings: (settings) => { this.props.setDecoratorSettings(settings); }\n        });\n\n        this._defaultSettings = {\n            dataValue: {\n                font: this._defaultFont,\n                display: {\n                    percentage: false,\n                    category: false,\n                    isMiddle: true\n                }, \n                backgroundColor: {\n                    stroke: '#000',\n                    fill: '#fff',\n                }\n            },\n            category: {\n                font: this._defaultFont,\n                location: {\n                    isWithinBArs: this._isWithinBars,\n                    isTop: this._isTop,\n                }\n            }\n        }\n    }\n\n    render()\n    {\n        console.log(this.props.dSettings);\n        let chartDataContent = [\n            <BarChartInputFields \n                chartData={this.props.chartData} \n                setChartData={(d, i) => { this.props.setChartData(d, i); }}/>,\n        ];\n        let content = {\n            chartSettings: [\n                <Menu\n                    key='chart-data' \n                    name='Chart Data'\n                    isOpen={true}\n                    content={chartDataContent}\n                    checkbox={{\n                        displayCheckbox: false\n                    }}/>,\n                <Menu \n                    key='icon-settings'\n                    name='Icon Settings'\n                    isOpen={false}\n                    content={this._GetIconContent()}\n                    checkbox={{\n                        displayCheckbox: false\n                    }} />\n            ],\n            designOptions: [\n                <Menu \n                    key='data-labels'\n                    name='Data Labels'\n                    isOpen={false}\n                    content={this._GetDataLabelsContent()}\n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.dataValue === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'dataValue', {dataValue: this._defaultSettings.dataValue})\n                        }\n                    }} />,\n                <Menu \n                    key='category-labels'\n                    name='Category Labels'\n                    isOpen={false}\n                    content={this._GetCategoryLabelsContent()} \n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.category === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'category', {category: this._defaultSettings.category})\n                        }\n                    }} />\n            ]\n        }\n\n        return (\n            <div>\n                <Editor content={content}/>\n            </div>\n        )\n    }\n\n    _SetChartSettings(category, key, value)\n    {\n        this._settingsManager.SetChartSettings(category, key, value);\n    }\n\n    _CheckboxHandler(checkboxValue, key, decoratorSettings)\n    {\n        this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n    }\n\n    _UpdateDecoratorSettings(decorator, category, key, value)\n    {\n        this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n    }\n\n    _GetIconContent()\n    {\n        let iconSettings = this.props.cSettings.iconSettings;\n        return [\n            <div className='center'>\n                <LabeledColorPicker\n                    label='Icon Color'\n                    color={iconSettings.iconColor}\n                    onChange={(value) => { this._SetChartSettings('iconSettings', 'iconColor', value); }}\n                />\n                <LabeledTextField \n                    label='Icon Size:'\n                    index='icon-size'\n                    initialValue={iconSettings.iconSize}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('iconSettings', 'iconSize', d); }}\n                />\n                <LabeledTextField \n                    label='Padding'\n                    index='padding'\n                    initialValue={iconSettings.padding}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('iconSettings', 'padding', d); }}\n                />\n            </div>\n        ]\n    }\n\n    _GetDataLabelsContent()\n    {\n        let settings = (this.props.dSettings.dataValue === undefined) ? \n            this._defaultSettings.dataValue : this.props.dSettings.dataValue;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Display Settings:</h5>\n                    <LabeledCheckbox \n                        label='Display Category:'\n                        initialValue={settings.display.category}\n                        onClick={(d) => { \n                            this._UpdateDecoratorSettings('dataValue', 'display', 'category', d);\n                        }}\n                    />\n                    <LabeledCheckbox \n                        label='Display Percentage:'\n                        initialValue={settings.display.percentage}\n                        onClick={(d) => { \n                            this._UpdateDecoratorSettings('dataValue', 'display', 'percentage', d);\n                        }}\n                    />\n                    <LabeledDropdown \n                        label='Location:'\n                        options={['Middle', 'Top']}\n                        selected={(settings.display.isMiddle ? 'Middle' : 'Top')}\n                        onChange={(value) => {\n                            let location = false;\n                            if (value === 'Middle') location = true;\n                            this._UpdateDecoratorSettings('dataValue', 'display', 'isMiddle', location);\n                         }}\n                    />\n                </div>\n                <div>\n                    <h5>Background Box:</h5>\n                    <LabeledColorPicker \n                        label='Border Color:'\n                        color={settings.backgroundColor.stroke}\n                        onChange={(value) => { \n                            this._UpdateDecoratorSettings('dataValue', 'backgroundColor', 'stroke', value)\n                        }}\n                    />\n                    <LabeledColorPicker \n                        label='Fill Color:'\n                        color={settings.backgroundColor.fill}\n                        onChange={(value) => { \n                            this._UpdateDecoratorSettings('dataValue', 'backgroundColor', 'fill', value);\n                        }}\n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        initialFont={settings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('dataValue', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('dataValue', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('dataValue', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n\n    _GetCategoryLabelsContent()\n    {\n        let settings = (this.props.dSettings.category === undefined) ? \n            this._defaultSettings.category : this.props.dSettings.category;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Location Settings:</h5>\n                    <LabeledDropdown \n                        label='Location:'\n                        options={['Top', 'Bottom']}\n                        selected={(settings.location.isTop === true) ? 'Top' : 'Bottom'}\n                        onChange={(value) => { \n                            let location = false;\n                            if (value === 'Top') location = true;\n                            this._UpdateDecoratorSettings('category', 'location', 'isTop', location);\n                        }}\n                    />\n                    <LabeledCheckbox \n                        label='Display inside bars:'\n                        initialVale={settings.location.isWithinBars}\n                        onClick={(d) => { \n                            this._UpdateDecoratorSettings('category', 'location', 'isWithinBars', d);\n                        }}\n                    /> \n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        key='icon-category-labels'\n                        initialFont={settings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('category', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('category', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('category', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n}\n\nexport { IconBarEditor };"]},"metadata":{},"sourceType":"module"}