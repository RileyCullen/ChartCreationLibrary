{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/LineEditor.js\";\nimport React from 'react';\nimport { Editor, Menu, LabeledTextField, LabeledColorPicker, FontSelector, LabeledDropdown, LineChartInputFields } from './Components/index';\nimport '../../../css/React/Editors/ChartEditor.css';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LineEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this._defaultFont = {\n      fontFamily: 'Times New Roman, Times, serif',\n      fontSize: 10,\n      textColor: '#000'\n    };\n    this._settingsManager = new SettingsManager({\n      cSettings: this.props.cSettings,\n      dSettings: this.props.dSettings,\n      setChartSettings: settings => {\n        this.props.setChartSettings(settings);\n      },\n      setDecoratorSettings: settings => {\n        this.props.setDecoratorSettings(settings);\n      }\n    });\n    this._defaultSettings = {\n      xAxis: {\n        font: this._defaultFont,\n        axis: {\n          label: '',\n          color: '#000',\n          axisStrokeWidth: 1,\n          axisTickWidth: 0.5\n        }\n      },\n      yAxis: {\n        font: this._defaultFont,\n        axis: {\n          label: '',\n          color: '#000',\n          lineStrokeWidth: 1,\n          tickStrokeWidth: 0.5\n        }\n      },\n      dataValue: {\n        font: this._defaultFont,\n        location: {\n          location: 'Bottom'\n        }\n      }\n    };\n  }\n\n  render() {\n    let content = {\n      chartSettings: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Chart Data\",\n        isOpen: true,\n        content: [/*#__PURE__*/_jsxDEV(LineChartInputFields, {\n          chartData: this.props.chartData,\n          setChartData: data => {\n            this.props.setChartData(data);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)],\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'chart-data', false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Size Settings\",\n        isOpen: false,\n        content: this._GetSizeContent(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'size-settings', false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Color Settings\",\n        isOpen: false,\n        content: this._GetColorContent(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'color-settings', false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Spacing Settings\",\n        isOpen: false,\n        content: this._GetSpacingContent(),\n        checkbox: {\n          displayCheckbox: false\n        }\n      }, 'spacing-settings', false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)],\n      designOptions: [/*#__PURE__*/_jsxDEV(Menu, {\n        name: \"X-Axis\",\n        isOpen: false,\n        content: this._GetXAxisContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.xAxis === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'xAxis', {\n              xAxis: this._defaultSettings.xAxis\n            });\n          }\n        }\n      }, 'x-axis', false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Y-Axis\",\n        isOpen: false,\n        content: this._GetYAxisContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.yAxis === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'yAxis', {\n              yAxis: this._defaultSettings.yAxis\n            });\n          }\n        }\n      }, 'y-axis', false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        name: \"Data Labels\",\n        isOpen: false,\n        content: this._GetDataLabelContent(),\n        checkbox: {\n          displayCheckbox: true,\n          isChecked: !(this.props.dSettings.dataValue === undefined),\n          checkboxHandler: d => {\n            this._CheckboxHandler(d, 'dataValue', {\n              dataValue: this._defaultSettings.dataValue\n            });\n          }\n        }\n      }, 'data-labels', false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        content: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  }\n\n  _SetChartSettings(category, key, value) {\n    this._settingsManager.SetChartSettings(category, key, value);\n  }\n\n  _CheckboxHandler(checkboxValue, key, decoratorSettings) {\n    this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n  }\n\n  _UpdateDecoratorSettings(decorator, category, key, value) {\n    this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n  }\n\n  _GetSizeContent() {\n    let sizeSettings = this.props.cSettings.size;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Chart Width:\",\n        index: \"c-width\",\n        initialValue: sizeSettings.chartWidth,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('size', 'chartWidth', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Chart Height:\",\n        index: \"c-height\",\n        initialValue: sizeSettings.chartHeight,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('size', 'chartHeight', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Line Width:\",\n        index: \"l-width\",\n        initialValue: sizeSettings.lineWidth,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('size', 'lineWidth', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Point Radius:\",\n        index: \"p-radius\",\n        initialValue: sizeSettings.pointRadius,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('size', 'pointRadius', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetColorContent() {\n    let colorSettings = this.props.cSettings.color;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n        label: \"Line Color:\",\n        color: colorSettings.lineColor,\n        onChange: value => {\n          this._SetChartSettings('color', 'lineColor', value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n        label: \"Point Color:\",\n        color: colorSettings.pointColor,\n        onChange: value => {\n          this._SetChartSettings('color', 'pointColor', value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetSpacingContent() {\n    let spacingSettings = this.props.cSettings.spacing;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Space between chart and y-axis:\",\n        index: \"x-offset\",\n        initialValue: spacingSettings.internalOffsetX,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetChartSettings('spacing', 'internalOffsetX', d);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetXAxisContent() {\n    let settings = this.props.dSettings.xAxis === undefined ? this._defaultSettings.xAxis : this.props.dSettings.xAxis;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Axis Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Label:\",\n          index: 'x-label',\n          initialValue: settings.axis.label,\n          rows: 1,\n          cols: 20,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('xAxis', 'axis', 'label', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Axis Width:\",\n          index: 'x-stroke',\n          initialValue: settings.axis.axisStrokeWidth,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('xAxis', 'axis', 'axisStrokeWidth', parseFloat(d));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Tick Width:\",\n          index: 'x-tick',\n          initialValue: settings.axis.axisTickWidth,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('xAxis', 'axis', 'axisTickWidth', parseFloat(d));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n          label: \"Axis Color: \",\n          color: settings.axis.color,\n          onChange: value => {\n            this._UpdateDecoratorSettings('xAxis', 'axis', 'color', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: settings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('xAxis', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('xAxis', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('xAxis', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetYAxisContent() {\n    let settings = this.props.dSettings.yAxis === undefined ? this._defaultSettings.yAxis : this.props.dSettings.yAxis;\n    console.log(settings);\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Axis Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Label:\",\n          index: 'y-label',\n          initialValue: settings.axis.label,\n          rows: 1,\n          cols: 20,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('yAxis', 'axis', 'label', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Axis Width:\",\n          index: 'y-stroke',\n          initialValue: settings.axis.lineStrokeWidth,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('yAxis', 'axis', 'lineStrokeWidth', parseFloat(d));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledTextField, {\n          label: \"Tick Width:\",\n          index: 'y-tick',\n          initialValue: settings.axis.tickStrokeWidth,\n          rows: 1,\n          cols: 5,\n          onChange: (d, i) => {\n            this._UpdateDecoratorSettings('yAxis', 'axis', 'tickStrokeWidth', parseFloat(d));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n          label: \"Axis Color: \",\n          color: settings.axis.color,\n          onChange: value => {\n            this._UpdateDecoratorSettings('yAxis', 'axis', 'color', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: settings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('yAxis', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('yAxis', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('yAxis', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetDataLabelContent() {\n    let settings = this.props.dSettings.dataValue === undefined ? this._defaultSettings.dataValue : this.props.dSettings.dataValue;\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(LabeledDropdown, {\n          label: \"Location:\",\n          options: ['Bottom', 'Top', 'Left', 'Right'],\n          selected: settings.location.location,\n          onChange: value => {\n            this._UpdateDecoratorSettings('dataValue', 'location', 'location', value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Font Settings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FontSelector, {\n          initialFont: settings.font,\n          updateFontFamily: d => {\n            this._UpdateDecoratorSettings('dataValue', 'font', 'fontFamily', d);\n          },\n          updateFontSize: d => {\n            this._UpdateDecoratorSettings('dataValue', 'font', 'fontSize', parseFloat(d));\n          },\n          updateTextColor: d => {\n            this._UpdateDecoratorSettings('dataValue', 'font', 'textColor', d);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }, this)];\n  }\n\n}\n\nexport { LineEditor };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/LineEditor.js"],"names":["React","Editor","Menu","LabeledTextField","LabeledColorPicker","FontSelector","LabeledDropdown","LineChartInputFields","SettingsManager","LineEditor","Component","constructor","props","_defaultFont","fontFamily","fontSize","textColor","_settingsManager","cSettings","dSettings","setChartSettings","settings","setDecoratorSettings","_defaultSettings","xAxis","font","axis","label","color","axisStrokeWidth","axisTickWidth","yAxis","lineStrokeWidth","tickStrokeWidth","dataValue","location","render","content","chartSettings","chartData","data","setChartData","displayCheckbox","_GetSizeContent","_GetColorContent","_GetSpacingContent","designOptions","_GetXAxisContent","isChecked","undefined","checkboxHandler","d","_CheckboxHandler","_GetYAxisContent","_GetDataLabelContent","_SetChartSettings","category","key","value","SetChartSettings","checkboxValue","decoratorSettings","DecoratorToggle","_UpdateDecoratorSettings","decorator","UpdateDecoratorSettings","sizeSettings","size","chartWidth","i","chartHeight","lineWidth","pointRadius","colorSettings","lineColor","pointColor","spacingSettings","spacing","internalOffsetX","parseFloat","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Editor, Menu, LabeledTextField, LabeledColorPicker, FontSelector, LabeledDropdown, LineChartInputFields } from './Components/index';\n\nimport '../../../css/React/Editors/ChartEditor.css';\nimport { SettingsManager } from '../../Helpers/SettingsManager';\n\nclass LineEditor extends React.Component \n{\n    constructor(props)\n    {\n        super(props);\n        this._defaultFont = {\n            fontFamily: 'Times New Roman, Times, serif',\n            fontSize: 10,\n            textColor: '#000'\n        };\n\n        this._settingsManager = new SettingsManager({\n            cSettings: this.props.cSettings,\n            dSettings: this.props.dSettings,\n            setChartSettings: (settings) => { this.props.setChartSettings(settings); },\n            setDecoratorSettings: (settings) => { this.props.setDecoratorSettings(settings); }\n        });\n\n        this._defaultSettings = {\n            xAxis: {\n                font: this._defaultFont,\n                axis: {\n                    label: '',\n                    color: '#000',\n                    axisStrokeWidth: 1,\n                    axisTickWidth: 0.5\n                }\n            },\n            yAxis: {\n                font: this._defaultFont,\n                axis: {\n                    label: '',\n                    color: '#000',\n                    lineStrokeWidth: 1,\n                    tickStrokeWidth: 0.5\n                }\n            },\n            dataValue: {\n                font: this._defaultFont,\n                location: {location: 'Bottom'},\n            }\n        }\n    }\n\n    render()\n    {\n        let content = {\n            chartSettings: [\n                <Menu \n                    key='chart-data'\n                    name='Chart Data'\n                    isOpen={true}\n                    content={[\n                        <LineChartInputFields \n                            chartData={this.props.chartData}\n                            setChartData={(data) => { this.props.setChartData(data); }}\n                        />\n                    ]}\n                    checkbox={{\n                        displayCheckbox: false\n                    }}/>,\n                <Menu \n                    key='size-settings'\n                    name='Size Settings'\n                    isOpen={false}\n                    content={this._GetSizeContent()}\n                    checkbox={{\n                        displayCheckbox: false\n                    }} />,\n                <Menu \n                    key='color-settings'\n                    name='Color Settings'\n                    isOpen={false}\n                    content={this._GetColorContent()}\n                    checkbox={{\n                        displayCheckbox: false\n                    }} />,\n                <Menu \n                    key='spacing-settings'\n                    name='Spacing Settings'\n                    isOpen={false}\n                    content={this._GetSpacingContent()}\n                    checkbox={{\n                        displayCheckbox: false\n                    }} />\n            ],\n            designOptions: [\n                <Menu \n                    key='x-axis'\n                    name='X-Axis'\n                    isOpen={false}\n                    content={this._GetXAxisContent()}\n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.xAxis === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'xAxis', { xAxis: this._defaultSettings.xAxis })\n                        }\n                    }} />,\n                <Menu \n                    key='y-axis'\n                    name='Y-Axis'\n                    isOpen={false}\n                    content={this._GetYAxisContent()} \n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.yAxis === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'yAxis', { yAxis: this._defaultSettings.yAxis }) \n                        }\n                    }} />,\n                <Menu \n                    key='data-labels'\n                    name='Data Labels'\n                    isOpen={false}\n                    content={this._GetDataLabelContent()} \n                    checkbox={{\n                        displayCheckbox: true,\n                        isChecked: !(this.props.dSettings.dataValue === undefined),\n                        checkboxHandler: (d) => { \n                            this._CheckboxHandler(d, 'dataValue', { dataValue: this._defaultSettings.dataValue })\n                        }\n                    }} />,\n            ]\n        }\n\n        return (\n            <div>\n                <Editor content={content} />\n            </div>\n        )\n    }\n\n    _SetChartSettings(category, key, value)\n    {\n        this._settingsManager.SetChartSettings(category, key, value);\n    }\n\n    _CheckboxHandler(checkboxValue, key, decoratorSettings)\n    {\n        this._settingsManager.DecoratorToggle(checkboxValue, key, decoratorSettings);\n    }\n\n    _UpdateDecoratorSettings(decorator, category, key, value)\n    {\n        this._settingsManager.UpdateDecoratorSettings(decorator, category, key, value);\n    }\n\n    _GetSizeContent()\n    {\n        let sizeSettings = this.props.cSettings.size;\n        return [\n            <div className='center'>\n                <LabeledTextField \n                    label='Chart Width:'\n                    index='c-width'\n                    initialValue={sizeSettings.chartWidth}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('size', 'chartWidth', d); }}\n                />\n                <LabeledTextField \n                    label='Chart Height:'\n                    index='c-height'\n                    initialValue={sizeSettings.chartHeight}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('size', 'chartHeight', d); }}\n                />\n                <LabeledTextField \n                    label='Line Width:'\n                    index='l-width'\n                    initialValue={sizeSettings.lineWidth}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('size', 'lineWidth', d); }}\n                />\n                <LabeledTextField \n                    label='Point Radius:'\n                    index='p-radius'\n                    initialValue={sizeSettings.pointRadius}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('size', 'pointRadius', d); }}\n                />\n            </div>\n        ];\n    }\n\n    _GetColorContent()\n    {\n        let colorSettings = this.props.cSettings.color;\n        return [\n            <div className='center'>\n                <LabeledColorPicker \n                    label='Line Color:'\n                    color={colorSettings.lineColor}\n                    onChange={(value) => { this._SetChartSettings('color', 'lineColor', value); }}\n                />\n                <LabeledColorPicker \n                    label='Point Color:'\n                    color={colorSettings.pointColor}\n                    onChange={(value) => { this._SetChartSettings('color', 'pointColor', value); }}\n                />\n            </div>\n        ];\n    }\n\n    _GetSpacingContent() \n    {\n        let spacingSettings = this.props.cSettings.spacing;\n        return [\n            <div className='center'>\n                <LabeledTextField \n                    label='Space between chart and y-axis:'\n                    index='x-offset'\n                    initialValue={spacingSettings.internalOffsetX}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { this._SetChartSettings('spacing', 'internalOffsetX', d); }}\n                />\n            </div>\n        ];\n    }\n\n    _GetXAxisContent()\n    {\n        let settings = (this.props.dSettings.xAxis === undefined) ? \n            this._defaultSettings.xAxis : this.props.dSettings.xAxis;\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Axis Settings</h5>\n                    <LabeledTextField \n                        label='Label:'\n                        index={'x-label'}\n                        initialValue={settings.axis.label}\n                        rows={1}\n                        cols={20}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('xAxis', 'axis', 'label', d);\n                        }}\n                    />\n                    <LabeledTextField \n                        label='Axis Width:'\n                        index={'x-stroke'}\n                        initialValue={settings.axis.axisStrokeWidth}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('xAxis', 'axis', 'axisStrokeWidth', parseFloat(d));\n                        }} \n                    />\n                    <LabeledTextField \n                        label='Tick Width:'\n                        index={'x-tick'}\n                        initialValue={settings.axis.axisTickWidth}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('xAxis', 'axis', 'axisTickWidth', parseFloat(d));\n                        }} \n                    />\n                    <LabeledColorPicker \n                        label='Axis Color: '\n                        color={settings.axis.color}\n                        onChange={(value) => { \n                            this._UpdateDecoratorSettings('xAxis', 'axis', 'color', value);\n                        }} \n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector \n                        initialFont={settings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('xAxis', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('xAxis', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('xAxis', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n\n\n    _GetYAxisContent()\n    {\n        let settings = (this.props.dSettings.yAxis === undefined) ? \n            this._defaultSettings.yAxis : this.props.dSettings.yAxis;\n            console.log(settings);\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Axis Settings</h5>\n                    <LabeledTextField \n                        label='Label:'\n                        index={'y-label'}\n                        initialValue={settings.axis.label}\n                        rows={1}\n                        cols={20}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('yAxis', 'axis', 'label', d);\n                        }}\n                    />\n                    <LabeledTextField \n                        label='Axis Width:'\n                        index={'y-stroke'}\n                        initialValue={settings.axis.lineStrokeWidth}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => { \n                            this._UpdateDecoratorSettings('yAxis', 'axis', 'lineStrokeWidth', parseFloat(d));\n                        }} \n                    />\n                    <LabeledTextField \n                        label='Tick Width:'\n                        index={'y-tick'}\n                        initialValue={settings.axis.tickStrokeWidth}\n                        rows={1}\n                        cols={5}\n                        onChange={(d, i) => {\n                            this._UpdateDecoratorSettings('yAxis', 'axis', 'tickStrokeWidth', parseFloat(d));\n                        }} \n                    />\n                    <LabeledColorPicker \n                        label='Axis Color: '\n                        color={settings.axis.color}\n                        onChange={(value) => { \n                            this._UpdateDecoratorSettings('yAxis', 'axis', 'color', value);\n                        }} \n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector\n                        initialFont={settings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('yAxis', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('yAxis', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('yAxis', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n    _GetDataLabelContent()\n    {\n        let settings = (this.props.dSettings.dataValue === undefined) ? \n            this._defaultSettings.dataValue : this.props.dSettings.dataValue;\n\n        return [\n            <div className='center'>\n                <div>\n                    <h5>Location:</h5>\n                    <LabeledDropdown \n                        label='Location:'\n                        options={['Bottom', 'Top', 'Left', 'Right']}\n                        selected={settings.location.location}\n                        onChange={(value) => { \n                            this._UpdateDecoratorSettings('dataValue', 'location', 'location', value);\n                        }}\n                    />\n                </div>\n                <div>\n                    <h5>Font Settings:</h5>\n                    <FontSelector\n                        initialFont={settings.font}\n                        updateFontFamily={(d) => { \n                            this._UpdateDecoratorSettings('dataValue', 'font', 'fontFamily', d);\n                        }}\n                        updateFontSize={(d) => {\n                            this._UpdateDecoratorSettings('dataValue', 'font', 'fontSize', parseFloat(d));\n                        }}\n                        updateTextColor={(d) => {\n                            this._UpdateDecoratorSettings('dataValue', 'font', 'textColor', d);\n                        }}\n                    />\n                </div>\n            </div>\n        ];\n    }\n}\n\nexport { LineEditor };"]},"metadata":{},"sourceType":"module"}