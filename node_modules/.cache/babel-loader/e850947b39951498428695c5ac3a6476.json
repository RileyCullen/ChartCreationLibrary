{"ast":null,"code":"// Cullen, Riley\n// CategoryLabelDecorator.js\n// November 2, 2020\nimport { ABarChartDecorator } from \"./ABarChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass CategoryLabelDecorator extends ABarChartDecorator {\n  /**\n   * @summary     Adds category labels to the parameterized bar chart.\n   * @description Draws unique category labels based on the this._data array\n   *              to the canvas using Konva.js. \n   * \n   *              Notethat each bar chart has two elements. Categories \n   *              describe entire bars while subcategories describe the individual\n   *              elements in a bar. In stacked bar charts, these two notions are \n   *              different while in regular bar charts they are the same.\n   * \n   * @requires ABarChartDecorator.js\n   * @see ABarChartDecorator.js\n   * \n   * @param {Bar Chart}  chart        The chart we want to decorate\n   * @param {Boolean}    isWithinBars Determines if category label is within the bars\n   *                                  or if it is outside of the bars\n   * @param {Boolean}    isTop        Determines if the label is located at the\n   *                                  top or bottom\n   * @param {JSON Array} font         The font of the label. Note that font is\n   *                                  a JSON object with the following format:\n   *                  \n   *                                  {\n   *                                      'fontSize': (number),\n   *                                      'fontFamily': (string),\n   *                                      'textColor': (string),\n   *                                  }\n   * @param {string}     icon         The icon we passed to IconBarChart. Note\n   *                                  that this parameter is only necessary \n   *                                  when using CategoryLabel with IconBarChart.\n   * @param {double}     iconSize     The size of the icon. Again, this is only\n   *                                  necessary when using CategoryLabel with\n   *                                  IconBarChart.\n   */\n  constructor({\n    chart,\n    isWithinBars = true,\n    isTop = true,\n    font = {\n      fontSize: 10,\n      fontFamily: 'Times New Roman, Times, serif',\n      textColor: 'black'\n    }\n  }) {\n    super(chart);\n    this._isWithinBars = isWithinBars;\n    this._isTop = isTop;\n    this._keys = this.GetGroups();\n    this._font = Lodash.cloneDeep(font);\n  }\n  /**\n   * @summary     Creates bar chart and adds category labels.\n   * @description Calls _chart's CreateBarChart method and then creates\n   *              the labels by calling _CreateLabels.\n   */\n\n\n  CreateChart() {\n    this._chart.CreateChart();\n\n    this._CreateLabels();\n  }\n\n  UpdateDecorator(chart) {\n    super.UpdateDecorator(chart);\n    this._keys = this.GetGroups();\n  }\n\n  GetDecoratorSettings() {\n    return {\n      categoryLabel: {\n        font: this._font,\n        location: {\n          isTop: this._isTop,\n          isWithinBars: this._isWithinBars\n        }\n      }\n    };\n  }\n  /**\n   * @summary     Creates the category labels for the Basic, Percentage, and\n   *              Stacked BarChart types.\n   * @description Dynamically positions the category labels within the Konva.Group.\n   */\n\n\n  _CreateLabels() {\n    var iter = this._keys.values();\n\n    var helper = new Konva.Group();\n\n    var textHeight = this._GetFontSize('M', this._font);\n\n    for (var i = iter.next().value; i != null; i = iter.next().value) {\n      var width = this._GetFontSize(i, this._font);\n\n      var height = this._GetBarHeight(i);\n\n      var x = this._xScale(i) + this._xScale.bandwidth() / 2 - width / 2;\n      var y = this._isTop ? this._chartHeight - height + textHeight / 2 : this._chartHeight - 1.5 * textHeight;\n\n      if (!this._isWithinBars) {\n        y = this._isTop ? y - 2 * textHeight : y + 2 * textHeight;\n      }\n\n      var text = new Konva.Text({\n        text: i,\n        x: x,\n        y: y,\n        fontSize: this._font.fontSize,\n        fontFamily: this._font.fontFamily,\n        fill: this._font.textColor\n      });\n      text.rotate(-this._rotateBy);\n\n      if (this._rotateBy === 90) {\n        if (this._isWithinBars && !this._isTop || this._isWithinBars && this._isTop) {\n          text.setAttr('y', text.getAttr('y') + width);\n        }\n      }\n\n      helper.add(text);\n    }\n\n    helper.rotate(this._rotateBy);\n\n    this._group.add(helper);\n  }\n  /**\n   * @summary     Gets the bar height for the given category.\n   * @description Iterates through all of the data and finds the cummulative\n   *              heights of all the bars for that particular category\n   * \n   * @param {String} category : The category we want to calculate the bar height on.\n   * \n   * @returns {int} Function returns the bar height.\n   */\n\n\n  _GetBarHeight(category) {\n    var barHeight = 0;\n\n    this._data.forEach(d => {\n      if (d.category === category) barHeight += this._chartHeight - this._yScale(d.value);\n    });\n\n    return barHeight;\n  }\n\n}\n\nexport { CategoryLabelDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/BarChart/Decorators/CategoryLabelDecorator.js"],"names":["ABarChartDecorator","Konva","Lodash","CategoryLabelDecorator","constructor","chart","isWithinBars","isTop","font","fontSize","fontFamily","textColor","_isWithinBars","_isTop","_keys","GetGroups","_font","cloneDeep","CreateChart","_chart","_CreateLabels","UpdateDecorator","GetDecoratorSettings","categoryLabel","location","iter","values","helper","Group","textHeight","_GetFontSize","i","next","value","width","height","_GetBarHeight","x","_xScale","bandwidth","y","_chartHeight","text","Text","fill","rotate","_rotateBy","setAttr","getAttr","add","_group","category","barHeight","_data","forEach","d","_yScale"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// CategoryLabelDecorator.js\n// November 2, 2020\n\nimport { ABarChartDecorator } from \"./ABarChartDecorator\";\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass CategoryLabelDecorator extends ABarChartDecorator\n{\n    /**\n     * @summary     Adds category labels to the parameterized bar chart.\n     * @description Draws unique category labels based on the this._data array\n     *              to the canvas using Konva.js. \n     * \n     *              Notethat each bar chart has two elements. Categories \n     *              describe entire bars while subcategories describe the individual\n     *              elements in a bar. In stacked bar charts, these two notions are \n     *              different while in regular bar charts they are the same.\n     * \n     * @requires ABarChartDecorator.js\n     * @see ABarChartDecorator.js\n     * \n     * @param {Bar Chart}  chart        The chart we want to decorate\n     * @param {Boolean}    isWithinBars Determines if category label is within the bars\n     *                                  or if it is outside of the bars\n     * @param {Boolean}    isTop        Determines if the label is located at the\n     *                                  top or bottom\n     * @param {JSON Array} font         The font of the label. Note that font is\n     *                                  a JSON object with the following format:\n     *                  \n     *                                  {\n     *                                      'fontSize': (number),\n     *                                      'fontFamily': (string),\n     *                                      'textColor': (string),\n     *                                  }\n     * @param {string}     icon         The icon we passed to IconBarChart. Note\n     *                                  that this parameter is only necessary \n     *                                  when using CategoryLabel with IconBarChart.\n     * @param {double}     iconSize     The size of the icon. Again, this is only\n     *                                  necessary when using CategoryLabel with\n     *                                  IconBarChart.\n     */\n    constructor({\n        chart, \n        isWithinBars = true, \n        isTop = true, \n        font = { \n            fontSize : 10, \n            fontFamily : 'Times New Roman, Times, serif', \n            textColor : 'black'\n        },\n\n    })\n    {\n        super(chart);\n        \n        this._isWithinBars = isWithinBars;\n        this._isTop = isTop;\n        this._keys = this.GetGroups();\n        this._font = Lodash.cloneDeep(font);\n    }\n\n    /**\n     * @summary     Creates bar chart and adds category labels.\n     * @description Calls _chart's CreateBarChart method and then creates\n     *              the labels by calling _CreateLabels.\n     */\n    CreateChart()\n    {\n        this._chart.CreateChart();\n        this._CreateLabels();\n    }\n\n    UpdateDecorator(chart)\n    {\n        super.UpdateDecorator(chart);\n        this._keys = this.GetGroups();\n    }\n\n    GetDecoratorSettings()\n    {\n        return {\n            categoryLabel: {\n                font: this._font,\n                location: {\n                    isTop: this._isTop,\n                    isWithinBars: this._isWithinBars,\n                }\n            }\n        }\n    }\n\n    /**\n     * @summary     Creates the category labels for the Basic, Percentage, and\n     *              Stacked BarChart types.\n     * @description Dynamically positions the category labels within the Konva.Group.\n     */\n    _CreateLabels()\n    {\n        var iter = this._keys.values();\n        var helper = new Konva.Group();\n        var textHeight = this._GetFontSize('M', this._font);\n        for (var i = iter.next().value; i != null; i = iter.next().value) {\n            var width = this._GetFontSize(i, this._font);\n            var height = this._GetBarHeight(i);\n            var x = (this._xScale(i) + this._xScale.bandwidth() / 2) - (width / 2)\n            var y = (this._isTop) ? this._chartHeight - height + textHeight / 2: this._chartHeight - 1.5 * textHeight;\n\n            if (!this._isWithinBars) {\n                y = (this._isTop) ? y - 2 * textHeight : y + 2 * textHeight;\n            }\n\n            var text = new Konva.Text({\n                text: i,\n                x: x,\n                y: y,\n                fontSize: this._font.fontSize,\n                fontFamily: this._font.fontFamily,\n                fill: this._font.textColor,\n            });\n            text.rotate(-this._rotateBy);\n\n            if (this._rotateBy === 90) {\n                if ((this._isWithinBars && !this._isTop) || (this._isWithinBars && this._isTop)) {\n                    text.setAttr('y', text.getAttr('y') + width);\n                }\n            }\n\n            helper.add(text);\n        }\n        helper.rotate(this._rotateBy);\n        this._group.add(helper);\n    }\n\n    /**\n     * @summary     Gets the bar height for the given category.\n     * @description Iterates through all of the data and finds the cummulative\n     *              heights of all the bars for that particular category\n     * \n     * @param {String} category : The category we want to calculate the bar height on.\n     * \n     * @returns {int} Function returns the bar height.\n     */\n    _GetBarHeight(category)\n    {\n        var barHeight = 0;\n        this._data.forEach(d => {\n            if (d.category === category) barHeight += (this._chartHeight - this._yScale(d.value));\n        });\n        return barHeight;\n    }\n}\n\nexport { CategoryLabelDecorator };"]},"metadata":{},"sourceType":"module"}