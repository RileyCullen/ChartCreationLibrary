{"ast":null,"code":"class SettingsManager {\n  constructor({\n    cSettings,\n    dSettings,\n    setChartSettings,\n    setDecoratorSettings\n  }) {\n    this._cSettings = cSettings;\n    this._dSettings = dSettings;\n    this._setChartSettings = setChartSettings;\n    this._setDecoratorSettings = setDecoratorSettings;\n  }\n\n  SetChartSettings(category, key, value) {\n    let settings = this._cSettings;\n    settings[category][key] = value;\n\n    this._setChartSettings(settings);\n  }\n\n  UpdateDecoratorSettings(decorator, category, key, value) {\n    let settings = this._dSettings;\n    settings[decorator][category][key] = value;\n\n    this._setDecoratorSettings(settings);\n  }\n\n  DecoratorToggle(checkboxValue, key, decoratorSettings = 0) {\n    if (checkboxValue === true) {\n      this._setDecoratorSettings(this.AddDecorator(decoratorSettings));\n    } else {\n      this.RemoveDecorator(key);\n\n      this._setDecoratorSettings(this._dSettings);\n    }\n  }\n\n  AddDecorator(decoratorSettings) {\n    let settings = {};\n    Object.keys(this._dSettings).forEach(key => settings[key] = this._dSettings[key]);\n    Object.keys(decoratorSettings).forEach(key => settings[key] = decoratorSettings[key]);\n    this._dSettings = settings;\n    return settings;\n  }\n\n  RemoveDecorator(key) {\n    delete this._dSettings[key];\n  }\n\n}\n\nexport { SettingsManager };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/Helpers/SettingsManager.js"],"names":["SettingsManager","constructor","cSettings","dSettings","setChartSettings","setDecoratorSettings","_cSettings","_dSettings","_setChartSettings","_setDecoratorSettings","SetChartSettings","category","key","value","settings","UpdateDecoratorSettings","decorator","DecoratorToggle","checkboxValue","decoratorSettings","AddDecorator","RemoveDecorator","Object","keys","forEach"],"mappings":"AAAA,MAAMA,eAAN,CACA;AACIC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,gBAAxB;AAA0CC,IAAAA;AAA1C,GAAD,EACX;AACI,SAAKC,UAAL,GAAkBJ,SAAlB;AACA,SAAKK,UAAL,GAAkBJ,SAAlB;AACA,SAAKK,iBAAL,GAAyBJ,gBAAzB;AACA,SAAKK,qBAAL,GAA6BJ,oBAA7B;AACH;;AAEDK,EAAAA,gBAAgB,CAACC,QAAD,EAAWC,GAAX,EAAgBC,KAAhB,EAChB;AACI,QAAIC,QAAQ,GAAG,KAAKR,UAApB;AACAQ,IAAAA,QAAQ,CAACH,QAAD,CAAR,CAAmBC,GAAnB,IAA0BC,KAA1B;;AACA,SAAKL,iBAAL,CAAuBM,QAAvB;AACH;;AAEDC,EAAAA,uBAAuB,CAACC,SAAD,EAAYL,QAAZ,EAAsBC,GAAtB,EAA2BC,KAA3B,EACvB;AACI,QAAIC,QAAQ,GAAG,KAAKP,UAApB;AACAO,IAAAA,QAAQ,CAACE,SAAD,CAAR,CAAoBL,QAApB,EAA8BC,GAA9B,IAAqCC,KAArC;;AACA,SAAKJ,qBAAL,CAA2BK,QAA3B;AACH;;AAEDG,EAAAA,eAAe,CAACC,aAAD,EAAgBN,GAAhB,EAAqBO,iBAAiB,GAAG,CAAzC,EACf;AACI,QAAID,aAAa,KAAK,IAAtB,EAA4B;AACxB,WAAKT,qBAAL,CAA2B,KAAKW,YAAL,CAAkBD,iBAAlB,CAA3B;AACH,KAFD,MAEO;AACH,WAAKE,eAAL,CAAqBT,GAArB;;AACA,WAAKH,qBAAL,CAA2B,KAAKF,UAAhC;AACH;AACJ;;AAEDa,EAAAA,YAAY,CAACD,iBAAD,EACZ;AACI,QAAIL,QAAQ,GAAG,EAAf;AACAQ,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKhB,UAAjB,EACKiB,OADL,CACaZ,GAAG,IAAIE,QAAQ,CAACF,GAAD,CAAR,GAAgB,KAAKL,UAAL,CAAgBK,GAAhB,CADpC;AAEAU,IAAAA,MAAM,CAACC,IAAP,CAAYJ,iBAAZ,EACKK,OADL,CACaZ,GAAG,IAAIE,QAAQ,CAACF,GAAD,CAAR,GAAgBO,iBAAiB,CAACP,GAAD,CADrD;AAEA,SAAKL,UAAL,GAAkBO,QAAlB;AACA,WAAOA,QAAP;AACH;;AAEDO,EAAAA,eAAe,CAACT,GAAD,EACf;AACI,WAAO,KAAKL,UAAL,CAAgBK,GAAhB,CAAP;AACH;;AA/CL;;AAkDA,SAASZ,eAAT","sourcesContent":["class SettingsManager \n{\n    constructor({ cSettings, dSettings, setChartSettings, setDecoratorSettings})\n    {\n        this._cSettings = cSettings;\n        this._dSettings = dSettings;\n        this._setChartSettings = setChartSettings;\n        this._setDecoratorSettings = setDecoratorSettings;\n    }\n\n    SetChartSettings(category, key, value)\n    {\n        let settings = this._cSettings;\n        settings[category][key] = value;\n        this._setChartSettings(settings);\n    }\n\n    UpdateDecoratorSettings(decorator, category, key, value)\n    {\n        let settings = this._dSettings;\n        settings[decorator][category][key] = value;\n        this._setDecoratorSettings(settings);\n    }\n\n    DecoratorToggle(checkboxValue, key, decoratorSettings = 0)\n    {\n        if (checkboxValue === true) {\n            this._setDecoratorSettings(this.AddDecorator(decoratorSettings));\n        } else {\n            this.RemoveDecorator(key);\n            this._setDecoratorSettings(this._dSettings);\n        }\n    }\n\n    AddDecorator(decoratorSettings)\n    {\n        let settings = {};\n        Object.keys(this._dSettings)\n            .forEach(key => settings[key] = this._dSettings[key]);\n        Object.keys(decoratorSettings)\n            .forEach(key => settings[key] = decoratorSettings[key]);\n        this._dSettings = settings;\n        return settings;\n    }\n\n    RemoveDecorator(key)\n    {\n        delete this._dSettings[key];\n    }\n}\n\nexport { SettingsManager };"]},"metadata":{},"sourceType":"module"}