{"ast":null,"code":"import { AIconBar } from '../AIconBar';\n\nclass AIconBarDecorator extends AIconBar {\n  constructor(chart) {\n    super({\n      data: chart._data,\n      group: chart._group,\n      width: chart._chartWidth,\n      height: chart._chartHeight,\n      padding: chart._padding,\n      angleOffset: chart._angleOffset,\n      icon: chart._icon,\n      remainderColor: chart._remainderColor,\n      iconSize: chart._iconSize,\n      dynamicFont: chart._dynamicFont\n    });\n\n    if (this.constructor === AIconBarDecorator) {\n      throw new TypeError('Abstract class \"ABarChartDecorator\" cannot be instantiated');\n    }\n\n    this._chart = chart;\n    this._yScale = chart._yScale;\n  }\n  /**\n   * @summary     Updates the decorator with a new data array.\n   * @description Updates the data, chart, and yScale associated with this\n   *              particular decorator.\n   * \n   * @param {BarChart} chart The bar chart we want to base our update on.\n   */\n\n\n  UpdateDecorator(chart) {\n    this._data = chart._data;\n    this._chart = chart;\n    this._yScale = chart._yScale;\n    this._xScale = chart._xScale;\n    this._iconSize = parseFloat(chart._iconSize);\n    this._padding = parseFloat(chart._padding);\n  }\n  /**\n   * @summary     Returns the width of a given piece of text in pixels.\n   * @description Uses the canvas measureText function to determine the width\n   *              of a particular piece of text given a specific font. \n   * \n   * @param {String} text      The text we want to measure.\n   * @param {JSON Object} font The font of the text we want to measure. \n   * \n   * NOTE: This is an old method. _GetTextWidth/_GetTextHeight should be used instead.\n   */\n\n\n  _GetFontSize(text, font) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = font.fontSize + 'px ' + font.fontFamily;\n    var helper = ctx.measureText(text).width;\n    canvas.remove();\n    return helper;\n  }\n\n  _GetTextWidth(text, font) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    document.getElementById('body').appendChild(canvas);\n    ctx.font = font.fontSize + 'px ' + font.fontFamily;\n    var textMetrics = ctx.measureText(text);\n    var width = Math.abs(textMetrics.actualBoundingBoxLeft - textMetrics.actualBoundingBoxRight);\n    canvas.remove();\n    return width;\n  }\n\n  _GetIconWidth(icon, iconSize) {\n    var font = {\n      fontSize: '900 ' + iconSize,\n      fontFamily: '\"Font Awesome 5 Free\"'\n    };\n    return this._GetTextWidth(icon, font);\n  }\n\n  _GetTextHeight(text, font) {\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    ctx.font = font.fontSize + 'px ' + font.fontFamily;\n    var textMetrics = ctx.measureText(text);\n    var height = Math.abs(textMetrics.actualBoundingBoxAscent) - Math.abs(textMetrics.actualBoundingBoxDescent);\n    canvas.remove();\n    return height;\n  }\n\n  _GetIconHeight(icon, iconSize) {\n    var font = {\n      fontSize: '900 ' + iconSize,\n      fontFamily: '\"Font Awesome 5 Free\"'\n    };\n    return this._GetTextHeight(icon, font);\n  }\n\n}\n\nexport { AIconBarDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/IconBarChart/Decorators/AIconBarDecorator.js"],"names":["AIconBar","AIconBarDecorator","constructor","chart","data","_data","group","_group","width","_chartWidth","height","_chartHeight","padding","_padding","angleOffset","_angleOffset","icon","_icon","remainderColor","_remainderColor","iconSize","_iconSize","dynamicFont","_dynamicFont","TypeError","_chart","_yScale","UpdateDecorator","_xScale","parseFloat","_GetFontSize","text","font","canvas","document","createElement","ctx","getContext","fontSize","fontFamily","helper","measureText","remove","_GetTextWidth","getElementById","appendChild","textMetrics","Math","abs","actualBoundingBoxLeft","actualBoundingBoxRight","_GetIconWidth","_GetTextHeight","actualBoundingBoxAscent","actualBoundingBoxDescent","_GetIconHeight"],"mappings":"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","sourcesContent":["import { AIconBar } from '../AIconBar';\n\nclass AIconBarDecorator extends AIconBar\n{\n    constructor(chart)\n    {\n        super({\n            data: chart._data,\n            group: chart._group,\n            width: chart._chartWidth,\n            height: chart._chartHeight,\n            padding: chart._padding,\n            angleOffset: chart._angleOffset,\n            icon: chart._icon,\n            remainderColor: chart._remainderColor,\n            iconSize: chart._iconSize,\n            dynamicFont: chart._dynamicFont,\n        });\n\n        if (this.constructor === AIconBarDecorator) {\n            throw new TypeError('Abstract class \"ABarChartDecorator\" cannot be instantiated');\n        }\n\n        this._chart = chart;\n        this._yScale = chart._yScale;\n    }\n\n    /**\n     * @summary     Updates the decorator with a new data array.\n     * @description Updates the data, chart, and yScale associated with this\n     *              particular decorator.\n     * \n     * @param {BarChart} chart The bar chart we want to base our update on.\n     */\n     UpdateDecorator(chart)\n     {\n         this._data = chart._data;\n         this._chart = chart;\n         this._yScale = chart._yScale;\n         this._xScale = chart._xScale;\n\n         this._iconSize = parseFloat(chart._iconSize);\n         this._padding = parseFloat(chart._padding);\n     }\n \n     /**\n      * @summary     Returns the width of a given piece of text in pixels.\n      * @description Uses the canvas measureText function to determine the width\n      *              of a particular piece of text given a specific font. \n      * \n      * @param {String} text      The text we want to measure.\n      * @param {JSON Object} font The font of the text we want to measure. \n      * \n      * NOTE: This is an old method. _GetTextWidth/_GetTextHeight should be used instead.\n      */\n     _GetFontSize(text, font)\n     {\n         var canvas = document.createElement('canvas');\n         var ctx = canvas.getContext('2d');\n \n         ctx.font = font.fontSize + 'px ' + font.fontFamily;\n         var helper = ctx.measureText(text).width;\n         canvas.remove();\n \n         return helper;\n     }\n \n     _GetTextWidth(text, font)\n     {\n         var canvas = document.createElement('canvas');\n         var ctx    = canvas.getContext('2d');\n \n         document.getElementById('body').appendChild(canvas)\n \n         ctx.font = font.fontSize + 'px ' + font.fontFamily;\n         var textMetrics = ctx.measureText(text);\n         var width = Math.abs(textMetrics.actualBoundingBoxLeft \n             - textMetrics.actualBoundingBoxRight);\n \n         canvas.remove();\n \n         return width; \n     }\n \n     _GetIconWidth(icon, iconSize)\n     {\n         var font = {\n             fontSize: '900 ' + iconSize,\n             fontFamily: '\"Font Awesome 5 Free\"',\n         }\n         return this._GetTextWidth(icon, font);\n     }\n \n     _GetTextHeight(text, font)\n     {\n         var canvas = document.createElement('canvas');\n         var ctx    = canvas.getContext('2d');\n \n         ctx.font = font.fontSize + 'px ' + font.fontFamily;\n         var textMetrics = ctx.measureText(text);\n         var height = Math.abs(textMetrics.actualBoundingBoxAscent) - \n             Math.abs(textMetrics.actualBoundingBoxDescent);\n         \n         canvas.remove();\n \n         return height;\n     }\n \n     _GetIconHeight(icon, iconSize)\n     {\n         var font = {\n             fontSize: '900 ' + iconSize,\n             fontFamily: '\"Font Awesome 5 Free\"',\n         }\n         return this._GetTextHeight(icon, font);\n     }\n}\n\nexport { AIconBarDecorator };"]},"metadata":{},"sourceType":"module"}