{"ast":null,"code":"// Cullen, Riley\n// RibbonHeader.js\n// November 16, 2020\nimport Konva from 'konva';\n\nclass RibbonHeader {\n  /**\n   * @summary     Creates a ribbon like icon.\n   * @description Creates a ribbon like icon by creating three rounded rectangles.\n   * \n   * @requires Konva.js\n   * \n   * @param {String}      colorOne The color of the large, central rectangle.\n   * @param {String}      colorTwo The color of the two smaller rectangles.\n   * @param {Konva.Group} group    The group we add the ribbon to.\n   * @param {Double}      hWidth   The width of the ribbon.\n   * @param {Double}      hHeight  The height of the ribbon.\n   * @param {Double}      iWidth   The width of the infographic.\n   * @param {Double}      iHeight  The height of the infographic.\n   */\n  constructor({\n    colorOne,\n    colorTwo,\n    group,\n    hWidth,\n    hHeight,\n    iWidth,\n    iHeight\n  }) {\n    this._x = 0;\n    this._y = 0;\n    this._colorOne = colorOne;\n    this._colorTwo = colorTwo;\n    this._group = group;\n    this._width = hWidth;\n    this._height = hHeight;\n    this._infogWidth = iWidth;\n    this._infogHeight = iHeight;\n  }\n  /**\n   * @summary Creates the ribbon.\n   */\n\n\n  CreateHeader() {\n    this._CreateMainRect();\n\n    this._CreateSideRects();\n  }\n  /**\n   * @see ArrowHeader.js for summary and description.\n   */\n\n\n  Remove() {\n    this._group.destroy();\n  }\n\n  UpdateHeader(settings) {\n    /**\n     * For this function, we assume settings is structured like the JSON\n     * returned from GetSettings\n     */\n    this._width = parseFloat(settings.size.width);\n    this._height = parseFloat(settings.size.height);\n    this._colorOne = settings.display.primaryColor.value;\n    this._colorTwo = settings.display.secondaryColor.value;\n\n    this._group.destroyChildren();\n  }\n\n  GetSettings() {\n    return {\n      size: {\n        width: this._width,\n        height: this._height\n      },\n      display: {\n        primaryColor: {\n          type: 'color-picker',\n          name: 'Primary Color:',\n          value: this._colorOne\n        },\n        secondaryColor: {\n          type: 'color-picker',\n          name: 'Secondary Color:',\n          value: this._colorTwo\n        }\n      }\n    };\n  }\n\n  GetAttrs() {\n    return {\n      colorOne: this._colorOne,\n      colorTwo: this._colorTwo,\n      group: this._group,\n      hWidth: this._hWidth,\n      hHeight: this._hHeight,\n      iWidth: this._infogWidth,\n      iHeight: this._infogHeight\n    };\n  }\n  /**\n   * @summary     Creates the main, central rectangle in the ribbon.\n   * @description Adds a Konva.Rect to the group. The position of the Rect is\n   *              dynamically calculated based on the width of the ribbon.\n   */\n\n\n  _CreateMainRect() {\n    this._group.add(new Konva.Rect({\n      x: this._infogWidth / 2 - this._width / 2,\n      y: 0,\n      fill: this._colorOne,\n      width: this._width,\n      height: this._height,\n      cornerRadius: 5\n    }));\n  }\n  /**\n   * @summary     Creates the two smaller side rectangles.\n   * @description Dynamically calculates the x positions of the two smaller \n   *              rectangles so that they are roughly half way down. These\n   *              values are then passed to _CreateMiniRect() which actually \n   *              creates the Konva.Rect's.\n   */\n\n\n  _CreateSideRects() {\n    var leftX = this._infogWidth / 2 - this._width / 2 - 3 / 4 * this._height / 2,\n        rightX = this._infogWidth / 2 + this._width / 2 - 3 / 4 * this._height / 2;\n\n    this._CreateMiniRect(leftX);\n\n    this._CreateMiniRect(rightX);\n  }\n  /**\n   * @summary     Creates a smaller rectangles to the side of the main rectangle.\n   * @description Adds a Konva.Rect's to the group. This is done by dynamically\n   *              calculating the x position so that it is roughly one half of the\n   *              way down.\n   * \n   * @param {Double} x The x position of the rectangle.\n   */\n\n\n  _CreateMiniRect(x) {\n    var tmp = new Konva.Rect({\n      x: x,\n      y: this._height / 4,\n      fill: this._colorTwo,\n      width: 3 / 4 * this._height,\n      height: this._height,\n      cornerRadius: 5\n    });\n\n    this._group.add(tmp);\n\n    tmp.moveToBottom();\n  }\n\n}\n\nexport { RibbonHeader };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Headers/RibbonHeader.js"],"names":["Konva","RibbonHeader","constructor","colorOne","colorTwo","group","hWidth","hHeight","iWidth","iHeight","_x","_y","_colorOne","_colorTwo","_group","_width","_height","_infogWidth","_infogHeight","CreateHeader","_CreateMainRect","_CreateSideRects","Remove","destroy","UpdateHeader","settings","parseFloat","size","width","height","display","primaryColor","value","secondaryColor","destroyChildren","GetSettings","type","name","GetAttrs","_hWidth","_hHeight","add","Rect","x","y","fill","cornerRadius","leftX","rightX","_CreateMiniRect","tmp","moveToBottom"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// RibbonHeader.js\n// November 16, 2020\n\nimport Konva from 'konva';\n\nclass RibbonHeader \n{\n    /**\n     * @summary     Creates a ribbon like icon.\n     * @description Creates a ribbon like icon by creating three rounded rectangles.\n     * \n     * @requires Konva.js\n     * \n     * @param {String}      colorOne The color of the large, central rectangle.\n     * @param {String}      colorTwo The color of the two smaller rectangles.\n     * @param {Konva.Group} group    The group we add the ribbon to.\n     * @param {Double}      hWidth   The width of the ribbon.\n     * @param {Double}      hHeight  The height of the ribbon.\n     * @param {Double}      iWidth   The width of the infographic.\n     * @param {Double}      iHeight  The height of the infographic.\n     */\n    constructor({colorOne, colorTwo, group, hWidth, hHeight, iWidth, iHeight})\n    {\n        this._x = 0;\n        this._y = 0;\n        this._colorOne = colorOne;\n        this._colorTwo = colorTwo;\n        this._group = group;\n        this._width = hWidth;\n        this._height = hHeight;\n        this._infogWidth = iWidth;\n        this._infogHeight = iHeight;\n    }\n\n    /**\n     * @summary Creates the ribbon.\n     */\n    CreateHeader()\n    {\n        this._CreateMainRect();\n        this._CreateSideRects();\n    }\n\n    /**\n     * @see ArrowHeader.js for summary and description.\n     */    \n    Remove()\n    {\n        this._group.destroy();\n    }\n\n    UpdateHeader(settings)\n    {\n        /**\n         * For this function, we assume settings is structured like the JSON\n         * returned from GetSettings\n         */\n        this._width = parseFloat(settings.size.width);\n        this._height = parseFloat(settings.size.height);\n\n        this._colorOne = settings.display.primaryColor.value;\n        this._colorTwo = settings.display.secondaryColor.value;\n\n        this._group.destroyChildren();\n    }\n\n    GetSettings()\n    {\n        return {\n            size: {\n                width: this._width,\n                height: this._height,\n            },\n            display: {\n                primaryColor: {\n                    type: 'color-picker',\n                    name: 'Primary Color:',\n                    value: this._colorOne,\n                },\n                secondaryColor: {\n                    type: 'color-picker',\n                    name: 'Secondary Color:',\n                    value: this._colorTwo\n                }\n            }\n        };\n    }\n\n    GetAttrs()\n    {\n        return {\n            colorOne: this._colorOne,\n            colorTwo: this._colorTwo,\n            group: this._group,\n            hWidth: this._hWidth,\n            hHeight: this._hHeight,\n            iWidth: this._infogWidth,\n            iHeight: this._infogHeight,\n        };\n    }\n\n    /**\n     * @summary     Creates the main, central rectangle in the ribbon.\n     * @description Adds a Konva.Rect to the group. The position of the Rect is\n     *              dynamically calculated based on the width of the ribbon.\n     */\n    _CreateMainRect()\n    {\n        this._group.add(new Konva.Rect({\n            x: (this._infogWidth / 2) - (this._width / 2),\n            y: 0,\n            fill: this._colorOne,\n            width: this._width,\n            height: this._height,\n            cornerRadius: 5\n        }));\n    }\n\n    /**\n     * @summary     Creates the two smaller side rectangles.\n     * @description Dynamically calculates the x positions of the two smaller \n     *              rectangles so that they are roughly half way down. These\n     *              values are then passed to _CreateMiniRect() which actually \n     *              creates the Konva.Rect's.\n     */\n    _CreateSideRects()\n    {\n        var leftX = ((this._infogWidth / 2) - (this._width / 2)) - ((3/4) * this._height / 2),\n            rightX = (this._infogWidth / 2) + (this._width / 2) - ((3/4) * this._height / 2);\n        this._CreateMiniRect(leftX);\n        this._CreateMiniRect(rightX); \n    }\n\n    /**\n     * @summary     Creates a smaller rectangles to the side of the main rectangle.\n     * @description Adds a Konva.Rect's to the group. This is done by dynamically\n     *              calculating the x position so that it is roughly one half of the\n     *              way down.\n     * \n     * @param {Double} x The x position of the rectangle.\n     */\n    _CreateMiniRect(x)\n    {\n        var tmp = new Konva.Rect({\n            x: x,\n            y: this._height / 4,\n            fill: this._colorTwo,\n            width: (3/4) * this._height,\n            height: this._height,\n            cornerRadius: 5,\n        });\n        this._group.add(tmp);\n        tmp.moveToBottom();\n    }\n}\n\nexport { RibbonHeader };"]},"metadata":{},"sourceType":"module"}