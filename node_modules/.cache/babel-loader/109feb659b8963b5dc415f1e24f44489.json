{"ast":null,"code":"// Cullen, Riley\n// ChartHandler.js\n// November 5, 2020\nimport { BuildBarChartDecoratorList, BuildIconBarChartDecoratorList, BuildLineChartDecoratorList, BuildPieChartDecoratorList, BuildWaffleChartDecoratorList } from '../Charts/DecoratorBuilder';\n\nclass ChartHandler {\n  /**\n   * @summary     A concrete class that handles the addition of various charts to\n   *              an infographic.\n   * @description A concrete class that abstracts handling of different charts,\n   *              decorators, and groups.\n   */\n  constructor() {\n    this._handler = [];\n    this._curr = -1;\n  }\n  /**\n   * @summary     Adds a chart to the handler.\n   * @description See summary. Also sets up other metadata sections of the handler\n   *              like binding the chart to a group as well as assigning it a unique\n   *              id and chart type for identification.\n   * \n   * @param {Chart}       chart The chart we are adding to the handler.\n   * @param {Konva.Group} group The group associated with the chart we added.\n   * @param {string}      type  The type of chart we are adding.\n   */\n\n\n  AddChart({\n    chart,\n    group,\n    type\n  }) {\n    this._curr++;\n    this._handler[this._curr] = {\n      'chart': chart,\n      'decorators': [],\n      'decoratorSize': -1,\n      'group': group\n    };\n    group.setAttr('id', this._curr);\n    group.setAttr('name', 'Selectable Chart ' + type);\n  }\n  /**\n   * @summary     Adds a decorator to the chart specified by id.\n   * @description See summary. \n   * \n   * @param {Chart Decorator} decorator The decorator we want to add.\n   * @param {int}             id        The id of the chart we want to add the decorator to.\n   */\n\n\n  AddDecorator({\n    decorator,\n    id\n  }) {\n    this._handler[id].decorators[++this._handler[id].decoratorSize] = decorator;\n  }\n  /**\n   * @summary Returns the index of the most recently added chart.\n   */\n\n\n  GetCurrChartID() {\n    return this._curr;\n  }\n  /**\n   * @summary Returns the index of the most recent decorator for the current chart.\n   */\n\n\n  GetCurrDecSize() {\n    return this._handler[this._curr].decoratorSize;\n  }\n  /**\n   * @summary Returns the chart specified at index id.\n   * \n   * @param {int} id The index of the chart we want to get.\n   */\n\n\n  GetChart(id) {\n    return this._handler[id].chart;\n  }\n  /**\n   * @summary Gets the decorator specified at chartID and decoratorID and returns it.\n   * \n   * @param {int} chartID     The chart of the decorator we want to return.\n   * @param {int} decoratorID The decorator we want to return.\n   */\n\n\n  GetDecorator({\n    chartID,\n    decoratorID\n  }) {\n    return this._handler[chartID].decorators[decoratorID];\n  }\n  /**\n   * @summary Returns the group of the current handler entry.\n   */\n\n\n  GetCurrentGroup() {\n    return this.GetGroup(this._curr);\n  }\n  /**\n   * @summary Returns the group of the element at id.\n   * \n   * @param {int} id The index of the handler element we want to access. \n   * \n   * @returns A Konva.Group object. \n   */\n\n\n  GetGroup(id) {\n    return this._handler[id].group;\n  }\n  /**\n   * @summary Returns the entire handler element at id to the caller.\n   * \n   * @param {int} id The index of the handler element we want to access.\n   * \n   * @returns A JSON object consisting of the handler at index id. \n   */\n\n\n  GetHandlerElem(id) {\n    return this._handler[id];\n  }\n\n  GetSettingsArray(id) {\n    return this._handler[id].chart.GetChartSettings();\n  }\n\n  GetDecoratorSettingsArray(id) {\n    let decoratorSettings = {};\n\n    this._handler[id].decorators.forEach(d => {\n      let obj = d.GetDecoratorSettings();\n      Object.keys(obj).forEach(key => decoratorSettings[key] = obj[key]);\n    });\n\n    return decoratorSettings;\n  }\n  /**\n   * @summary     Removes the handler element at index id.\n   * @description Calls chart's Remove function then removes the handler element\n   *              from the handler.\n   * \n   * @param {int} id The index of the handler element that will be removed.\n   */\n\n\n  RemoveHandlerElem(id) {\n    this._handler[id].chart.Remove();\n\n    this._handler.splice(id, 1);\n\n    this._curr--;\n\n    this._UpdateHandlerId();\n  }\n\n  UpdateChartDecorators(id, dSettings) {\n    let elem = this._handler[id],\n        name = elem.group.getAttr('name');\n\n    if (name === 'Selectable Chart Bar' || name === 'Selectable Chart Stacked') {\n      elem.decorators = BuildBarChartDecoratorList(elem.chart, dSettings);\n    } else if (name === 'Selectable Chart Pie' || name === 'Selectable Chart Donut') {\n      elem.decorators = BuildPieChartDecoratorList(elem.chart, dSettings);\n    } else if (name === 'Selectable Chart Waffle') {\n      elem.decorators = BuildWaffleChartDecoratorList(elem.chart, dSettings);\n    } else if (name === 'Selectable Chart Icon') {\n      elem.decorators = BuildIconBarChartDecoratorList(elem.chart, dSettings);\n    } else if (name === 'Selectable Chart Line') {\n      elem.decorators = BuildLineChartDecoratorList(elem.chart, dSettings);\n    }\n\n    elem.decoratorSize = elem.decorators.length - 1; // elem.decorators[elem.decoratorSize].CreateChart();\n  }\n\n  UpdateLayering(id, action) {\n    let group = this._handler[id].group;\n\n    switch (action) {\n      case 'move-to-back':\n        group.moveToBottom();\n        break;\n\n      case 'move-to-front':\n        group.moveToTop();\n        break;\n\n      case 'bring-forward':\n        group.moveUp();\n        break;\n\n      case 'send-backward':\n        group.moveDown();\n        break;\n\n      default:\n        break;\n    }\n  }\n  /**\n   * @summary     Updates the id assigned to the different chart elements in \n   *              the handler.\n   */\n\n\n  _UpdateHandlerId() {\n    this._handler.forEach((d, i) => {\n      d.group.setAttr('id', i);\n    });\n  }\n\n}\n\nexport { ChartHandler };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Handlers/ChartHandler.js"],"names":["BuildBarChartDecoratorList","BuildIconBarChartDecoratorList","BuildLineChartDecoratorList","BuildPieChartDecoratorList","BuildWaffleChartDecoratorList","ChartHandler","constructor","_handler","_curr","AddChart","chart","group","type","setAttr","AddDecorator","decorator","id","decorators","decoratorSize","GetCurrChartID","GetCurrDecSize","GetChart","GetDecorator","chartID","decoratorID","GetCurrentGroup","GetGroup","GetHandlerElem","GetSettingsArray","GetChartSettings","GetDecoratorSettingsArray","decoratorSettings","forEach","d","obj","GetDecoratorSettings","Object","keys","key","RemoveHandlerElem","Remove","splice","_UpdateHandlerId","UpdateChartDecorators","dSettings","elem","name","getAttr","length","UpdateLayering","action","moveToBottom","moveToTop","moveUp","moveDown","i"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// ChartHandler.js\n// November 5, 2020\n\nimport { BuildBarChartDecoratorList, BuildIconBarChartDecoratorList, \n    BuildLineChartDecoratorList, BuildPieChartDecoratorList, \n    BuildWaffleChartDecoratorList } from '../Charts/DecoratorBuilder';\n\nclass ChartHandler \n{\n    /**\n     * @summary     A concrete class that handles the addition of various charts to\n     *              an infographic.\n     * @description A concrete class that abstracts handling of different charts,\n     *              decorators, and groups.\n     */\n    constructor()\n    {\n        this._handler = [];\n        this._curr = -1;\n    }\n\n    /**\n     * @summary     Adds a chart to the handler.\n     * @description See summary. Also sets up other metadata sections of the handler\n     *              like binding the chart to a group as well as assigning it a unique\n     *              id and chart type for identification.\n     * \n     * @param {Chart}       chart The chart we are adding to the handler.\n     * @param {Konva.Group} group The group associated with the chart we added.\n     * @param {string}      type  The type of chart we are adding.\n     */\n    AddChart({chart, group, type})\n    {\n        this._curr++;\n        this._handler[this._curr] = {\n            'chart': chart,\n            'decorators': [],\n            'decoratorSize': -1,\n            'group': group,\n        };\n        group.setAttr('id', this._curr);\n        group.setAttr('name', 'Selectable Chart ' + type);\n    }\n\n    /**\n     * @summary     Adds a decorator to the chart specified by id.\n     * @description See summary. \n     * \n     * @param {Chart Decorator} decorator The decorator we want to add.\n     * @param {int}             id        The id of the chart we want to add the decorator to.\n     */\n    AddDecorator({decorator, id})\n    {\n        this._handler[id].decorators[++this._handler[id].decoratorSize] = decorator;\n    }\n\n    /**\n     * @summary Returns the index of the most recently added chart.\n     */\n    GetCurrChartID() { return this._curr; }\n\n    /**\n     * @summary Returns the index of the most recent decorator for the current chart.\n     */\n    GetCurrDecSize() { return this._handler[this._curr].decoratorSize; }\n\n    /**\n     * @summary Returns the chart specified at index id.\n     * \n     * @param {int} id The index of the chart we want to get.\n     */\n    GetChart(id) { return this._handler[id].chart; }\n\n    /**\n     * @summary Gets the decorator specified at chartID and decoratorID and returns it.\n     * \n     * @param {int} chartID     The chart of the decorator we want to return.\n     * @param {int} decoratorID The decorator we want to return.\n     */\n    GetDecorator({chartID, decoratorID}) { return this._handler[chartID].decorators[decoratorID]; }\n\n    /**\n     * @summary Returns the group of the current handler entry.\n     */\n    GetCurrentGroup() { return this.GetGroup(this._curr); }\n\n    /**\n     * @summary Returns the group of the element at id.\n     * \n     * @param {int} id The index of the handler element we want to access. \n     * \n     * @returns A Konva.Group object. \n     */\n    GetGroup(id) { return this._handler[id].group; }\n\n    /**\n     * @summary Returns the entire handler element at id to the caller.\n     * \n     * @param {int} id The index of the handler element we want to access.\n     * \n     * @returns A JSON object consisting of the handler at index id. \n     */\n    GetHandlerElem(id) { return this._handler[id]; }\n\n    GetSettingsArray(id)\n    {\n        return this._handler[id].chart.GetChartSettings();\n    }\n\n    GetDecoratorSettingsArray(id)\n    {\n        let decoratorSettings = {};\n        this._handler[id].decorators.forEach((d) => {\n            let obj = d.GetDecoratorSettings();\n            Object.keys(obj)\n                .forEach(key => decoratorSettings[key] = obj[key])\n        });\n        return decoratorSettings;\n    }\n\n    /**\n     * @summary     Removes the handler element at index id.\n     * @description Calls chart's Remove function then removes the handler element\n     *              from the handler.\n     * \n     * @param {int} id The index of the handler element that will be removed.\n     */\n    RemoveHandlerElem(id) \n    {\n        this._handler[id].chart.Remove();\n        this._handler.splice(id, 1);\n        this._curr--;\n        this._UpdateHandlerId(); \n    }\n\n    UpdateChartDecorators(id, dSettings)\n    {\n        let elem = this._handler[id],\n            name = elem.group.getAttr('name');\n        \n        if (name === 'Selectable Chart Bar' || name === 'Selectable Chart Stacked') {\n            elem.decorators = BuildBarChartDecoratorList(elem.chart, dSettings);\n        } else if (name === 'Selectable Chart Pie' || name === 'Selectable Chart Donut') {\n            elem.decorators = BuildPieChartDecoratorList(elem.chart, dSettings);\n        } else if (name === 'Selectable Chart Waffle') {\n            elem.decorators = BuildWaffleChartDecoratorList(elem.chart, dSettings);\n        } else if (name === 'Selectable Chart Icon') {\n            elem.decorators = BuildIconBarChartDecoratorList(elem.chart, dSettings);\n        } else if (name === 'Selectable Chart Line') {\n            elem.decorators = BuildLineChartDecoratorList(elem.chart, dSettings);\n        }\n        elem.decoratorSize = elem.decorators.length - 1;\n        // elem.decorators[elem.decoratorSize].CreateChart();\n    }\n\n    UpdateLayering(id, action)\n    {\n        let group = this._handler[id].group;\n        switch(action) {\n            case 'move-to-back':\n                group.moveToBottom();\n                break;\n            case 'move-to-front':\n                group.moveToTop();\n                break;\n            case 'bring-forward':\n                group.moveUp();\n                break;\n            case 'send-backward':\n                group.moveDown();\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * @summary     Updates the id assigned to the different chart elements in \n     *              the handler.\n     */\n    _UpdateHandlerId()\n    {\n        this._handler.forEach((d, i) => {\n            d.group.setAttr('id', i);\n        });\n    }\n}\n\nexport { ChartHandler }; "]},"metadata":{},"sourceType":"module"}