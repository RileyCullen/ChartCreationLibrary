{"ast":null,"code":"// Cullen, Riley\n// LineChart.js\n// May 13, 2021\nimport { ALineChart } from '../ALineChart';\nimport Konva from 'konva';\nimport * as d3 from 'd3';\n\nclass LineChart extends ALineChart {\n  /**\n   * @summary     A concrete, basic line chart type.\n   * @description A basic line chart type that utilizes D3's scaleTime function.\n   * \n   * @param {*} param1 See ALineChart.js for the meaning of each of the elements\n   *                   in the JSON object.\n   */\n  constructor({\n    data,\n    group,\n    chartWidth,\n    chartHeight,\n    lineWidth = 1,\n    pointRadius = 1,\n    pointColor = 'none',\n    lineColor = 'black',\n    internalOffsetX = 0,\n    internalOffsetY = 0\n  }) {\n    super({\n      data: data,\n      group: group,\n      chartWidth: chartWidth,\n      chartHeight: chartHeight,\n      lineWidth: lineWidth,\n      pointRadius: pointRadius,\n      lineColor: lineColor,\n      pointColor: pointColor,\n      internalOffsetX: internalOffsetX,\n      internalOffsetY: internalOffsetY\n    });\n  }\n  /**\n   * @summary     Creates a basic line chart.\n   * @description Creates a basic line chart by binding the entries in data \n   *              to custom DOM elements then using Konva.JS to draw the \n   *              chart on the canvas.\n   */\n\n\n  CreateChart() {\n    var virtualCanvas = document.createElement('custom');\n    var custom = d3.select(virtualCanvas);\n\n    this._BindData(custom);\n\n    var orderedPairList = this._CreateOrderedPairList(custom);\n\n    this._DrawGraph(custom, orderedPairList);\n  }\n  /**\n   * @summary     Binds the data entries in _data to custom DOM elements.\n   * @description Uses D3 to create custom DOM elements that we will bind the \n   *              data in _data to.\n   * \n   * @param {DOM element} custom The parent DOM element we will add all of the \n   *                             custom DOM elements to.\n   */\n\n\n  _BindData(custom) {\n    custom.selectAll('custom.point').data(this._data).enter().append('custom').attr('class', 'point').attr('x', d => {\n      return this._internalOffsetX + this._xScale(d.date);\n    }).attr('y', d => {\n      return -1 * this._internalOffsetY + this._yScale(d.value);\n    }).attr('pointColor', this._pointColor).attr('pointRadius', this._pointRadius);\n  }\n  /**\n   * @summary     Creates a list of ordered pairs from the data bound to the \n   *              DOM elements.\n   * @description Creates a list of ordered pairs that will be used to draw \n   *              the points and lines on the chart.\n   * \n   * @param {DOM Element} custom See _BindData.\n   * \n   * @returns The ordered pair list.\n   */\n\n\n  _CreateOrderedPairList(custom) {\n    var elements = custom.selectAll('custom.point');\n    var helperList = [];\n    elements.each(function (d, i) {\n      var node = d3.select(this);\n      helperList[i] = {\n        x: node.attr('x'),\n        y: node.attr('y')\n      };\n    });\n    var list = [];\n\n    for (var i = 0; i < helperList.length; i++) {\n      if (i !== 0) {\n        list[i - 1] = {\n          x1: helperList[i - 1].x,\n          y1: helperList[i - 1].y,\n          x2: helperList[i].x,\n          y2: helperList[i].y\n        };\n      }\n    }\n\n    return list;\n  }\n  /**\n   * @summary     Draws the chart on the canvas.\n   * @description Uses the custom DOM elements bound in custom to draw the \n   *              points and lines on canvas using Konva.JS.\n   * \n   * @param {DOM Element} custom See _BindData.\n   * @param {JSON Array}  list   A list of ordered pairs to help us draw the\n   *                             points and lines in the chart.\n   */\n\n\n  _DrawGraph(custom, list) {\n    var elements = custom.selectAll('custom.point');\n    var helper = new Konva.Group();\n    list.forEach(d => {\n      var line = new Konva.Line({\n        points: [d.x1, d.y1, d.x2, d.y2],\n        stroke: this._lineColor,\n        strokeWidth: parseFloat(this._lineWidth)\n      });\n      helper.add(line);\n    });\n    elements.each(function (d, i) {\n      var node = d3.select(this);\n      var point = new Konva.Circle({\n        radius: node.attr('pointRadius'),\n        fill: node.attr('pointColor'),\n        x: node.attr('x'),\n        y: node.attr('y')\n      });\n      helper.add(point);\n    });\n\n    this._group.add(helper);\n  }\n\n}\n\nexport { LineChart };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/LineChart/ConcreteCharts/LineChart.js"],"names":["ALineChart","Konva","d3","LineChart","constructor","data","group","chartWidth","chartHeight","lineWidth","pointRadius","pointColor","lineColor","internalOffsetX","internalOffsetY","CreateChart","virtualCanvas","document","createElement","custom","select","_BindData","orderedPairList","_CreateOrderedPairList","_DrawGraph","selectAll","_data","enter","append","attr","d","_internalOffsetX","_xScale","date","_internalOffsetY","_yScale","value","_pointColor","_pointRadius","elements","helperList","each","i","node","x","y","list","length","x1","y1","x2","y2","helper","Group","forEach","line","Line","points","stroke","_lineColor","strokeWidth","parseFloat","_lineWidth","add","point","Circle","radius","fill","_group"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// LineChart.js\n// May 13, 2021\n\nimport { ALineChart } from '../ALineChart';\nimport Konva from 'konva';\nimport * as d3 from 'd3';\n\nclass LineChart extends ALineChart \n{\n    /**\n     * @summary     A concrete, basic line chart type.\n     * @description A basic line chart type that utilizes D3's scaleTime function.\n     * \n     * @param {*} param1 See ALineChart.js for the meaning of each of the elements\n     *                   in the JSON object.\n     */\n    constructor({data, group, chartWidth, chartHeight, lineWidth = 1, \n        pointRadius = 1, pointColor = 'none', lineColor = 'black', internalOffsetX = 0,\n        internalOffsetY = 0,\n    })\n    {\n        super({ \n            data: data, \n            group: group,\n            chartWidth: chartWidth,\n            chartHeight: chartHeight,\n            lineWidth: lineWidth,\n            pointRadius: pointRadius,\n            lineColor: lineColor,\n            pointColor: pointColor, \n            internalOffsetX: internalOffsetX,\n            internalOffsetY: internalOffsetY,\n        });\n    }\n\n    /**\n     * @summary     Creates a basic line chart.\n     * @description Creates a basic line chart by binding the entries in data \n     *              to custom DOM elements then using Konva.JS to draw the \n     *              chart on the canvas.\n     */\n    CreateChart()\n    {\n        var virtualCanvas = document.createElement('custom');\n        var custom = d3.select(virtualCanvas);\n\n        this._BindData(custom);\n        var orderedPairList = this._CreateOrderedPairList(custom)\n        this._DrawGraph(custom, orderedPairList)\n    }\n\n    /**\n     * @summary     Binds the data entries in _data to custom DOM elements.\n     * @description Uses D3 to create custom DOM elements that we will bind the \n     *              data in _data to.\n     * \n     * @param {DOM element} custom The parent DOM element we will add all of the \n     *                             custom DOM elements to.\n     */\n    _BindData(custom)\n    {\n        custom.selectAll('custom.point')\n            .data(this._data)\n            .enter()\n            .append('custom')\n            .attr('class', 'point')\n            .attr('x', (d) => {\n                return this._internalOffsetX + this._xScale(d.date);\n            })\n            .attr('y', (d) => {\n                return -1 * this._internalOffsetY + this._yScale(d.value);\n            })\n            .attr('pointColor', this._pointColor)\n            .attr('pointRadius', this._pointRadius)\n    }\n\n    /**\n     * @summary     Creates a list of ordered pairs from the data bound to the \n     *              DOM elements.\n     * @description Creates a list of ordered pairs that will be used to draw \n     *              the points and lines on the chart.\n     * \n     * @param {DOM Element} custom See _BindData.\n     * \n     * @returns The ordered pair list.\n     */\n    _CreateOrderedPairList(custom)\n    {\n        var elements = custom.selectAll('custom.point');\n\n        var helperList = []\n        elements.each(function(d, i){\n            var node = d3.select(this);\n            helperList[i] = {\n                x: node.attr('x'),\n                y: node.attr('y'),\n            };\n        });\n\n        var list = [];\n        for (var i = 0; i < helperList.length; i++) {\n            if (i !== 0) {\n                list[i - 1] = {\n                    x1: helperList[i - 1].x,\n                    y1: helperList[i - 1].y,\n                    x2: helperList[i].x,\n                    y2: helperList[i].y,\n                }\n            }\n        }\n        \n        return list;\n    }\n\n    /**\n     * @summary     Draws the chart on the canvas.\n     * @description Uses the custom DOM elements bound in custom to draw the \n     *              points and lines on canvas using Konva.JS.\n     * \n     * @param {DOM Element} custom See _BindData.\n     * @param {JSON Array}  list   A list of ordered pairs to help us draw the\n     *                             points and lines in the chart.\n     */\n    _DrawGraph(custom, list)\n    {\n        var elements = custom.selectAll('custom.point');\n        var helper = new Konva.Group();\n\n        list.forEach(d => {\n            var line = new Konva.Line({\n                points: [d.x1, d.y1, d.x2, d.y2],\n                stroke: this._lineColor,\n                strokeWidth: parseFloat(this._lineWidth),\n            });\n            helper.add(line);\n        }); \n\n        elements.each(function(d, i){\n            var node = d3.select(this);\n            var point = new Konva.Circle({\n                radius: node.attr('pointRadius'),\n                fill: node.attr('pointColor'),\n                x: node.attr('x'),\n                y: node.attr('y'),\n            });\n            helper.add(point);\n        });\n\n        this._group.add(helper);\n    }\n}\n\nexport { LineChart };"]},"metadata":{},"sourceType":"module"}