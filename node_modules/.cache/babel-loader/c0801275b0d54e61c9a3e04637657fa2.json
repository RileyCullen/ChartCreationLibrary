{"ast":null,"code":"// Cullen, Riley\n// TextHandler.js\n// December 3, 2020\nimport Konva from 'konva';\n\nclass TextHandler {\n  /**\n   * @summary     A concrete class that manages all of the text elements within\n   *              an infographic.\n   * @description Groups all of the individual text elements into one place \n   *              so that operations on text are easier to perform.\n   */\n  constructor() {\n    this._handler = [];\n    this._curr = -1;\n  }\n  /**\n   * @summary     Adds a text element to the handler.\n   * @description Adds a handler element at this._curr to the handler. This \n   *              element includes: the text to be rendered, its associated \n   *              group, and the Konva.Image element that corresponds to the \n   *              text.\n   * \n   * @param {HTML Element} textElem The text we wish to render.\n   * @param {Konva.Group}  group    The group we want to add the rendered text\n   *                                to.\n   * @param {double}       x        The x position of the image within the group.\n   * @param {double}       y        The y position of the image within the group.\n   */\n\n\n  AddTextElem({\n    textElem,\n    group,\n    x = 0,\n    y = 0,\n    rotateby = 0\n  }) {\n    this._curr++;\n    this._handler[this._curr] = {\n      'textElem': textElem,\n      'group': group,\n      'image': this._CreateKonvaImage(this._curr, x, y),\n      'spanCSS': []\n    };\n    textElem.id = this._curr;\n    textElem.className = 'EditableText';\n\n    this._handler[this._curr].image.rotate(rotateby);\n\n    group.add(this._handler[this._curr].image);\n    group.setAttr('id', this._curr);\n  }\n\n  UpdateTextElem({\n    index,\n    textElem,\n    group,\n    image,\n    spanCSS\n  }) {\n    this._handler[index] = {\n      textElem: textElem,\n      group: group,\n      image: image,\n      spanCSS: spanCSS\n    };\n    console.log('after');\n    console.log(this._handler);\n  }\n\n  UpdateLayering(id, action) {\n    let group = this._handler[id].image;\n\n    switch (action) {\n      case 'move-to-back':\n        group.moveToBottom();\n        break;\n\n      case 'move-to-front':\n        group.moveToTop();\n        break;\n\n      case 'bring-forward':\n        group.moveUp();\n        break;\n\n      case 'send-backward':\n        group.moveDown();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  SetTextInfo({\n    id,\n    font,\n    size,\n    color\n  }) {\n    this._handler[id].textInfo.initialFont = font;\n    this._handler[id].textInfo.initialSize = size;\n    this._handler[id].textInfo.color = color;\n  }\n  /**\n   * @summary     Associates CSS attributes with the <span> elements in textElem.\n   * @description Stores the CSS attributes associated with the <span> elements\n   *              in textElem so that the QuillEditor can properly output the\n   *              text in the text editor. \n   * \n   * @param {Integer} id  The id of the handler element we want to access. \n   * @param {JSON} param1 A JSON object that holds the necessary CSS attributes.\n   */\n\n\n  SetCSSInfo({\n    id,\n    fontFamily = '900-museo',\n    fontSize = '10px',\n    textColor = 'black',\n    lineHeight = '1.0',\n    align = 'left'\n  }) {\n    this._handler[id].spanCSS.push({\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      textColor: textColor,\n      lineHeight: lineHeight,\n      align: align\n    });\n  }\n  /**\n   * @summary Accessor that returns the current index of the handler.\n   */\n\n\n  GetCurrID() {\n    return this._curr;\n  }\n  /**\n   * @summary Accessor that returns the current size of the handler.\n   */\n\n\n  GetSize() {\n    return this._curr + 1;\n  }\n  /**\n   * @summary Accessor that returns the text element at index id.\n   * @param {int} id The index of the text element we want to find. \n   */\n\n\n  GetTextElem(id) {\n    return this._handler[id].textElem;\n  }\n  /**\n   * @summary Accessor that returns the Konva.Group element at index id.\n   * @param {int} id The index of the text element we want to find. \n   */\n\n\n  GetGroup(id) {\n    return this._handler[id].group;\n  }\n  /**\n   * @summary Accessor that returns the Konva.Image element at index id.\n   * @param {int} id The index of the text element we want to find. \n   */\n\n\n  GetImage(id) {\n    return this._handler[id].image;\n  }\n  /**\n   * @summary Returns a copy of the handler element at id.\n   * \n   * @param {int} id The index of the handler element we want to access.\n   * \n   * @returns JSON object.\n   */\n\n\n  GetHandlerElem(id) {\n    return {\n      'textElem': this._handler[id].textElem,\n      'group': this._handler[id].group,\n      'image': this._handler[id].image,\n      'spanCSS': this._handler[id].spanCSS\n    };\n  }\n  /**\n   * @summary     Removes the handler element at index id.\n   * @description Calls image's destroy function then removes the handler element\n   *              from the handler.\n   * \n   * @param {int} id The index of the handler element that will be removed.\n   */\n\n\n  RemoveHandlerElem(id) {\n    this._handler[id].image.destroy();\n\n    this._handler.splice(id, 1);\n\n    this._curr--;\n\n    this._UpdateHandlerId();\n  }\n  /**\n   * \n   * @param {int}    index The index of the handler element we are adding this\n   *                       image to.\n   * @param {double} x     The x position of the image.\n   * @param {double} y     The y position of the image.\n   * \n   * @returns Konva.Image object\n   */\n\n\n  _CreateKonvaImage(index, x, y) {\n    return new Konva.Image({\n      scaleX: 1 / window.devicePixelRatio,\n      scaleY: 1 / window.devicePixelRatio,\n      x: x,\n      y: y,\n      name: 'Selectable EditableText',\n      id: index\n    });\n  }\n  /**\n   * @summary     Updates the id assigned to the different chart elements in \n   *              the handler.\n   */\n\n\n  _UpdateHandlerId() {\n    this._handler.forEach((d, i) => {\n      d.image.setAttr('id', i);\n    });\n  }\n\n}\n\nexport { TextHandler };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Handlers/TextHandler.js"],"names":["Konva","TextHandler","constructor","_handler","_curr","AddTextElem","textElem","group","x","y","rotateby","_CreateKonvaImage","id","className","image","rotate","add","setAttr","UpdateTextElem","index","spanCSS","console","log","UpdateLayering","action","moveToBottom","moveToTop","moveUp","moveDown","SetTextInfo","font","size","color","textInfo","initialFont","initialSize","SetCSSInfo","fontFamily","fontSize","textColor","lineHeight","align","push","GetCurrID","GetSize","GetTextElem","GetGroup","GetImage","GetHandlerElem","RemoveHandlerElem","destroy","splice","_UpdateHandlerId","Image","scaleX","window","devicePixelRatio","scaleY","name","forEach","d","i"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// TextHandler.js\n// December 3, 2020\n\nimport Konva from 'konva';\n\nclass TextHandler\n{\n    /**\n     * @summary     A concrete class that manages all of the text elements within\n     *              an infographic.\n     * @description Groups all of the individual text elements into one place \n     *              so that operations on text are easier to perform.\n     */\n    constructor()\n    {\n        this._handler = [];\n        this._curr = -1;\n    }\n\n    /**\n     * @summary     Adds a text element to the handler.\n     * @description Adds a handler element at this._curr to the handler. This \n     *              element includes: the text to be rendered, its associated \n     *              group, and the Konva.Image element that corresponds to the \n     *              text.\n     * \n     * @param {HTML Element} textElem The text we wish to render.\n     * @param {Konva.Group}  group    The group we want to add the rendered text\n     *                                to.\n     * @param {double}       x        The x position of the image within the group.\n     * @param {double}       y        The y position of the image within the group.\n     */\n    AddTextElem({textElem, group, x = 0, y = 0, rotateby = 0})\n    {\n        this._curr++;\n        this._handler[this._curr] = {\n            'textElem': textElem,\n            'group': group,\n            'image': this._CreateKonvaImage(this._curr, x, y),\n            'spanCSS': []\n        };\n        textElem.id = this._curr;\n        textElem.className = 'EditableText';\n        this._handler[this._curr].image.rotate(rotateby);\n        group.add(this._handler[this._curr].image);\n        group.setAttr('id', this._curr);\n    }\n\n    UpdateTextElem({index, textElem, group, image, spanCSS})\n    {\n        this._handler[index] = {\n            textElem: textElem,\n            group: group,\n            image: image,\n            spanCSS: spanCSS,\n        };\n        console.log('after')\n        console.log(this._handler);\n    }\n\n    UpdateLayering(id, action) \n    {\n        let group = this._handler[id].image;\n        switch(action) {\n            case 'move-to-back':\n                group.moveToBottom();\n                break;\n            case 'move-to-front':\n                group.moveToTop();\n                break;\n            case 'bring-forward':\n                group.moveUp();\n                break;\n            case 'send-backward':\n                group.moveDown();\n                break;\n            default:\n                break;\n        }\n    }\n\n    SetTextInfo({id, font, size, color})\n    {\n        this._handler[id].textInfo.initialFont = font;\n        this._handler[id].textInfo.initialSize = size;\n        this._handler[id].textInfo.color = color;\n    }\n\n    /**\n     * @summary     Associates CSS attributes with the <span> elements in textElem.\n     * @description Stores the CSS attributes associated with the <span> elements\n     *              in textElem so that the QuillEditor can properly output the\n     *              text in the text editor. \n     * \n     * @param {Integer} id  The id of the handler element we want to access. \n     * @param {JSON} param1 A JSON object that holds the necessary CSS attributes.\n     */\n    SetCSSInfo({id, fontFamily = '900-museo', fontSize = '10px', \n        textColor = 'black', lineHeight = '1.0', align='left'})\n    {\n        this._handler[id].spanCSS.push({\n            fontFamily: fontFamily,\n            fontSize: fontSize,\n            textColor: textColor,\n            lineHeight: lineHeight,\n            align: align,\n        });\n    }\n\n    /**\n     * @summary Accessor that returns the current index of the handler.\n     */\n    GetCurrID()     { return this._curr; }\n\n    /**\n     * @summary Accessor that returns the current size of the handler.\n     */\n    GetSize()       { return this._curr + 1; }\n\n    /**\n     * @summary Accessor that returns the text element at index id.\n     * @param {int} id The index of the text element we want to find. \n     */\n    GetTextElem(id) { return this._handler[id].textElem; }\n\n    /**\n     * @summary Accessor that returns the Konva.Group element at index id.\n     * @param {int} id The index of the text element we want to find. \n     */\n    GetGroup(id)    { return this._handler[id].group; } \n\n    /**\n     * @summary Accessor that returns the Konva.Image element at index id.\n     * @param {int} id The index of the text element we want to find. \n     */\n    GetImage(id)    { return this._handler[id].image; }\n\n    /**\n     * @summary Returns a copy of the handler element at id.\n     * \n     * @param {int} id The index of the handler element we want to access.\n     * \n     * @returns JSON object.\n     */\n    GetHandlerElem(id) { \n        return {\n            'textElem': this._handler[id].textElem,\n            'group': this._handler[id].group,\n            'image': this._handler[id].image,\n            'spanCSS': this._handler[id].spanCSS\n        };\n    }\n\n    /**\n     * @summary     Removes the handler element at index id.\n     * @description Calls image's destroy function then removes the handler element\n     *              from the handler.\n     * \n     * @param {int} id The index of the handler element that will be removed.\n     */\n    RemoveHandlerElem(id)\n    {\n        this._handler[id].image.destroy();\n        this._handler.splice(id, 1);\n        this._curr--;\n        this._UpdateHandlerId();\n    }\n\n    /**\n     * \n     * @param {int}    index The index of the handler element we are adding this\n     *                       image to.\n     * @param {double} x     The x position of the image.\n     * @param {double} y     The y position of the image.\n     * \n     * @returns Konva.Image object\n     */\n    _CreateKonvaImage(index, x, y)\n    {\n        return new Konva.Image({\n            scaleX: 1 / window.devicePixelRatio,\n            scaleY: 1 / window.devicePixelRatio,\n            x: x, \n            y: y,\n            name: 'Selectable EditableText',\n            id: index\n        });\n    }\n\n    /**\n     * @summary     Updates the id assigned to the different chart elements in \n     *              the handler.\n     */\n    _UpdateHandlerId()\n    {\n        this._handler.forEach((d, i) => {\n            d.image.setAttr('id', i); \n        });\n    }\n}\n\nexport { TextHandler };"]},"metadata":{},"sourceType":"module"}