{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/Insert/Image.js\";\nimport React from 'react';\nimport '../../../../css/React/Editors/Insert/Insert.css';\nimport '../../../../css/React/Editors/Insert/Image.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Image extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      library: []\n    };\n  }\n\n  LibraryElement(key) {\n    /*if (sessionStorage.getItem(key)){ // check if valid blob\n        var url = URL.createObjectURL(new Blob([sessionStorage.getItem(key)]));\n        sessionStorage.removeItem(key);\n        sessionStorage.setItem(key, url);\n    }*/\n    document.getElementById(\"upload-image-input\").value = key;\n    this.inputImage(key);\n\n    const entry = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-entry\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: sessionStorage.getItem(key)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"insert-image\",\n        onClick: () => {\n          this.props.toggleInsert('image', sessionStorage.getItem(key));\n        },\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"remove-image\",\n        onClick: () => {\n          sessionStorage.removeItem(key);\n\n          this._MakeLibrary();\n        },\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 23\n    }, this);\n\n    return entry;\n  }\n\n  _MakeLibrary() {\n    var newLibrary = [];\n\n    for (var i = 0; i < sessionStorage.length; i++) newLibrary.push(this.LibraryElement(sessionStorage.key(i)));\n\n    this.setState({\n      library: newLibrary\n    });\n  }\n\n  render() {\n    var uploadMessage;\n    if (this.state.library.length === 0) uploadMessage = /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"image-placeholder\",\n      className: \"editor-placeholder-text\",\n      children: \"Click upload to add an image to the library!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 29\n    }, this);else uploadMessage = /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"image-library\",\n      children: this.state.library.map(d => {\n        return d;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 29\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-insert-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"upper-image-upload-container\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"upload-image-input\",\n          type: \"file\",\n          accept: \"image/png, image/jpeg, image/jpg\",\n          onChange: event => {\n            this.inputImage(event);\n            /*var inputValue = document.getElementById(\"upload-image-input\").value;\n            if (inputValue){\n                var objURL = URL.createObjectURL(event.target.files[0]);\n                this.props.toggleInsert('image', objURL);\n                var insert = true;\n                for (var i=0; i<sessionStorage.length; i++){\n                    if (sessionStorage.key(i)===inputValue){\n                        insert = false;\n                        i = sessionStorage.length;\n                    }\n                }\n                if (insert){\n                    sessionStorage.setItem(inputValue, objURL);\n                    this._MakeLibrary();\n                }\n            }*/\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), uploadMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n  inputImage(event) {\n    var inputValue = document.getElementById(\"upload-image-input\").value;\n\n    if (inputValue) {\n      var objURL = URL.createObjectURL(event.target.files[0]);\n      this.props.toggleInsert('image', objURL);\n      var insert = true;\n\n      for (var i = 0; i < sessionStorage.length; i++) {\n        if (sessionStorage.key(i) === inputValue) {\n          insert = false;\n          i = sessionStorage.length;\n        }\n      }\n\n      if (insert) {\n        sessionStorage.setItem(inputValue, objURL);\n\n        this._MakeLibrary();\n      }\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.library.length === 0) this._MakeLibrary();\n  }\n\n}\n\nexport { Image };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/Insert/Image.js"],"names":["React","Image","Component","constructor","props","state","library","LibraryElement","key","document","getElementById","value","inputImage","entry","sessionStorage","getItem","toggleInsert","removeItem","_MakeLibrary","newLibrary","i","length","push","setState","render","uploadMessage","map","d","event","inputValue","objURL","URL","createObjectURL","target","files","insert","setItem","componentDidMount"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,iDAAP;AACA,OAAO,gDAAP;;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AAEDC,EAAAA,cAAc,CAACC,GAAD,EAAK;AACf;AACR;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8CC,KAA9C,GAAsDH,GAAtD;AACA,SAAKI,UAAL,CAAgBJ,GAAhB;;AACA,UAAMK,KAAK,gBAAG;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACV;AAAK,QAAA,GAAG,EAAEC,cAAc,CAACC,OAAf,CAAuBP,GAAvB;AAAV;AAAA;AAAA;AAAA;AAAA,cADU,eAEV;AAAQ,QAAA,EAAE,EAAC,cAAX;AAA0B,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKJ,KAAL,CAAWY,YAAX,CAAwB,OAAxB,EAAiCF,cAAc,CAACC,OAAf,CAAuBP,GAAvB,CAAjC;AAA+D,SAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFU,eAGV;AAAQ,QAAA,EAAE,EAAC,cAAX;AAA0B,QAAA,OAAO,EAAE,MAAM;AAACM,UAAAA,cAAc,CAACG,UAAf,CAA0BT,GAA1B;;AAAgC,eAAKU,YAAL;AAAqB,SAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHU;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd;;AAKA,WAAOL,KAAP;AACH;;AAEDK,EAAAA,YAAY,GAAE;AACV,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,cAAc,CAACO,MAAnC,EAA2CD,CAAC,EAA5C,EACID,UAAU,CAACG,IAAX,CAAgB,KAAKf,cAAL,CAAoBO,cAAc,CAACN,GAAf,CAAmBY,CAAnB,CAApB,CAAhB;;AACJ,SAAKG,QAAL,CAAc;AAACjB,MAAAA,OAAO,EAAEa;AAAV,KAAd;AACH;;AAEDK,EAAAA,MAAM,GACN;AACI,QAAIC,aAAJ;AACA,QAAI,KAAKpB,KAAL,CAAWC,OAAX,CAAmBe,MAAnB,KAA8B,CAAlC,EACII,aAAa,gBAAG;AAAK,MAAA,EAAE,EAAC,mBAAR;AAA4B,MAAA,SAAS,EAAC,yBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAhB,CADJ,KAGIA,aAAa,gBAAG;AAAK,MAAA,EAAE,EAAC,eAAR;AAAA,gBAAyB,KAAKpB,KAAL,CAAWC,OAAX,CAAmBoB,GAAnB,CAAwBC,CAAD,IAAO;AAAC,eAAOA,CAAP;AAAS,OAAxC;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAhB;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA,8BACI;AAAK,QAAA,EAAE,EAAC,8BAAR;AAAA,+BACI;AAAO,UAAA,EAAE,EAAC,oBAAV;AAA+B,UAAA,IAAI,EAAC,MAApC;AAA2C,UAAA,MAAM,EAAC,kCAAlD;AAAqF,UAAA,QAAQ,EACxFC,KAAD,IAAW;AACP,iBAAKhB,UAAL,CAAgBgB,KAAhB;AACJ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACqB;AAnBD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,EAuBKH,aAvBL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA2BH;;AAEDb,EAAAA,UAAU,CAACgB,KAAD,EAAQ;AACd,QAAIC,UAAU,GAAGpB,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8CC,KAA/D;;AACA,QAAIkB,UAAJ,EAAe;AACX,UAAIC,MAAM,GAAGC,GAAG,CAACC,eAAJ,CAAoBJ,KAAK,CAACK,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAApB,CAAb;AACA,WAAK9B,KAAL,CAAWY,YAAX,CAAwB,OAAxB,EAAiCc,MAAjC;AACA,UAAIK,MAAM,GAAG,IAAb;;AACA,WAAK,IAAIf,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACN,cAAc,CAACO,MAA/B,EAAuCD,CAAC,EAAxC,EAA2C;AACvC,YAAIN,cAAc,CAACN,GAAf,CAAmBY,CAAnB,MAAwBS,UAA5B,EAAuC;AACnCM,UAAAA,MAAM,GAAG,KAAT;AACAf,UAAAA,CAAC,GAAGN,cAAc,CAACO,MAAnB;AACH;AACJ;;AACD,UAAIc,MAAJ,EAAW;AACPrB,QAAAA,cAAc,CAACsB,OAAf,CAAuBP,UAAvB,EAAmCC,MAAnC;;AACA,aAAKZ,YAAL;AACH;AACJ;AACJ;;AAEDmB,EAAAA,iBAAiB,GACjB;AACI,QAAI,KAAKhC,KAAL,CAAWC,OAAX,CAAmBe,MAAnB,KAA8B,CAAlC,EAAqC,KAAKH,YAAL;AACxC;;AAzFL;;AA4FA,SAASjB,KAAT","sourcesContent":["import React from 'react';\n\nimport '../../../../css/React/Editors/Insert/Insert.css';\nimport '../../../../css/React/Editors/Insert/Image.css';\n\nclass Image extends React.Component \n{\n    constructor(props){\n        super(props);\n        this.state = {\n            library: [],\n        };\n    }\n\n    LibraryElement(key){\n        /*if (sessionStorage.getItem(key)){ // check if valid blob\n            var url = URL.createObjectURL(new Blob([sessionStorage.getItem(key)]));\n            sessionStorage.removeItem(key);\n            sessionStorage.setItem(key, url);\n        }*/\n        document.getElementById(\"upload-image-input\").value = key;\n        this.inputImage(key);\n        const entry = <div className=\"image-entry\">\n            <img src={sessionStorage.getItem(key)}></img>\n            <button id=\"insert-image\" onClick={() => {this.props.toggleInsert('image', sessionStorage.getItem(key));}}>Insert</button>\n            <button id=\"remove-image\" onClick={() => {sessionStorage.removeItem(key); this._MakeLibrary();}}>Remove</button>\n            </div>\n        return entry;\n    }\n\n    _MakeLibrary(){\n        var newLibrary = [];\n        for (var i = 0; i < sessionStorage.length; i++)\n            newLibrary.push(this.LibraryElement(sessionStorage.key(i)));\n        this.setState({library: newLibrary});\n    }\n\n    render()\n    {\n        var uploadMessage;\n        if (this.state.library.length === 0)\n            uploadMessage = <div id='image-placeholder' className='editor-placeholder-text'>Click upload to add an image to the library!</div>;\n        else\n            uploadMessage = <div id='image-library'>{this.state.library.map((d) => {return d})}</div>;\n        return (\n            <div className='editor-insert-container'>\n                <div id='upper-image-upload-container'>\n                    <input id=\"upload-image-input\" type=\"file\" accept=\"image/png, image/jpeg, image/jpg\" onChange={\n                        (event) => {\n                            this.inputImage(event);\n                        /*var inputValue = document.getElementById(\"upload-image-input\").value;\n                        if (inputValue){\n                            var objURL = URL.createObjectURL(event.target.files[0]);\n                            this.props.toggleInsert('image', objURL);\n                            var insert = true;\n                            for (var i=0; i<sessionStorage.length; i++){\n                                if (sessionStorage.key(i)===inputValue){\n                                    insert = false;\n                                    i = sessionStorage.length;\n                                }\n                            }\n                            if (insert){\n                                sessionStorage.setItem(inputValue, objURL);\n                                this._MakeLibrary();\n                            }\n                        }*/\n                    }}></input>\n                </div>\n                {uploadMessage}\n            </div>\n        );\n    }\n\n    inputImage(event) {\n        var inputValue = document.getElementById(\"upload-image-input\").value;\n        if (inputValue){\n            var objURL = URL.createObjectURL(event.target.files[0]);\n            this.props.toggleInsert('image', objURL);\n            var insert = true;\n            for (var i=0; i<sessionStorage.length; i++){\n                if (sessionStorage.key(i)===inputValue){\n                    insert = false;\n                    i = sessionStorage.length;\n                }\n            }\n            if (insert){\n                sessionStorage.setItem(inputValue, objURL);\n                this._MakeLibrary();\n            }\n        }\n    }\n\n    componentDidMount()\n    {\n        if (this.state.library.length === 0) this._MakeLibrary();\n    }\n}\n\nexport { Image };"]},"metadata":{},"sourceType":"module"}