{"ast":null,"code":"// Cullen, Riley\n// StackedBarChart.js\n// October 27, 2020\nimport { ABarChart } from './ABarChart';\nimport * as d3 from 'd3';\nimport Konva from 'konva';\n\nclass StackedBarChart extends ABarChart {\n  /**\n   * @summary     Allows for the creation of a stacked bar chart.\n   * @description Uses D3 and Konva.js to create stacked bar charts and display\n   *              them on canvas.\n   * \n   * @requires ABarChart.js\n   * @see ABarChart.js for constructor parameters.\n   */\n  constructor({\n    data,\n    group,\n    width,\n    height,\n    padding,\n    rotateBy = 0\n  }) {\n    super(data, group, width, height, padding, rotateBy);\n  }\n  /**\n   * @summary     Creates the stacked bar chart.\n   * @description See BasicBarChart.js for the description. The intent is the\n   *              same with the exception that this class defines its own\n   *              _BindData and _DrawBars functions.\n   */\n\n\n  CreateChart() {\n    // Create a virtual container for all of our data elements.\n    var virtualDOM = document.createElement('custom');\n    var custom = d3.select(virtualDOM);\n\n    this._BindData(custom);\n\n    this._DrawBars(custom);\n  }\n  /**\n   * @summary     Binds data to custom DOM elements.\n   * @description See BasicBarChart.js for intent. The only real difference\n   *              is that this class needs to also bind an id to each custom\n   *              DOM element.\n   */\n\n\n  _BindData(custom) {\n    // Standard D3 code, with the exception that instead of actually drawing\n    // the chart, this code just binds the given pieces of data to the \n    // custom.rect elements contained within custom.\n    custom.selectAll('custom.rect').data(this._data).enter().append('custom').attr('class', 'rect').attr('id', d => d.category).attr('x', d => this._xScale(d.category)).attr('y', d => this._chartHeight).attr('width', d => this._xScale.bandwidth()).attr('height', d => -(this._chartHeight - this._yScale(d.value))).attr('fillStyle', d => d.color);\n  }\n  /**\n   * @summary     Adds bars to the Konva.Group.\n   * @description See BasicBarChart for the description. \n   */\n\n\n  _DrawBars(custom) {\n    var elements = custom.selectAll('custom.rect');\n    var helper = new Konva.Group(); // Here, the variable groups contains a set of the categories contained\n    // within _data (essentially, it returns a unique list of the categories \n    // found in _data).\n    // \n    // The variable offsetHelper then uses groups to create a JSON object \n    // where the keys are the unique categories found when group was created.\n    // \n    // Note: this is necessary because offsetHelper, as you will see, is \n    // essential to building the stacked bar chart.\n\n    var groups = this.GetGroups();\n\n    var offsetHelper = this._CreateOffsetHelper(groups); // Here, elements.each can essentially be thought of as a for loop that \n    // iterates through all of the custom.rect's in custom.\n\n\n    elements.each(function (d, i) {\n      // NOTE: that here an anonymous function is used instead of an arrow \n      // function. This is because anonymous functions do not preserve the \n      // context of the \"this\" keyword. \n      //\n      // If an arrow function were to be used, \"this\" would refer to the \n      // StackedBarChart object that this function is located in while \n      // if an anonymous function is used, \"this\" refers to the custom.rect \n      // element we are currently on.\n      var node = d3.select(this); // Add the bar to helper.\n\n      helper.add(new Konva.Rect({\n        x: node.attr('x'),\n        y: node.attr('y') - offsetHelper[node.attr('id')],\n        width: node.attr('width'),\n        height: node.attr('height'),\n        fill: node.attr('fillStyle'),\n        draggable: false\n      })); // Without the following line, all of the bars would start at the bottom of\n      // the graph instead of being offset by the current height of the bar.\n\n      offsetHelper[node.attr('id')] += -1 * node.attr('height');\n    }); // Rotate the graph and add helper to the canvas.\n\n    helper.rotate(this._rotateBy);\n\n    this._group.add(helper);\n  }\n\n}\n\nexport { StackedBarChart };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/BarChart/ConcreteCharts/StackedBarChart.js"],"names":["ABarChart","d3","Konva","StackedBarChart","constructor","data","group","width","height","padding","rotateBy","CreateChart","virtualDOM","document","createElement","custom","select","_BindData","_DrawBars","selectAll","_data","enter","append","attr","d","category","_xScale","_chartHeight","bandwidth","_yScale","value","color","elements","helper","Group","groups","GetGroups","offsetHelper","_CreateOffsetHelper","each","i","node","add","Rect","x","y","fill","draggable","rotate","_rotateBy","_group"],"mappings":"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","sourcesContent":["// Cullen, Riley\n// StackedBarChart.js\n// October 27, 2020\n\nimport { ABarChart } from './ABarChart';\nimport * as d3 from 'd3';\nimport Konva from 'konva';\n\nclass StackedBarChart extends ABarChart\n{\n    /**\n     * @summary     Allows for the creation of a stacked bar chart.\n     * @description Uses D3 and Konva.js to create stacked bar charts and display\n     *              them on canvas.\n     * \n     * @requires ABarChart.js\n     * @see ABarChart.js for constructor parameters.\n     */\n    constructor({data, group, width, height, padding, rotateBy = 0})\n    {\n        super(data, group, width, height, padding, rotateBy);\n    }   \n\n    /**\n     * @summary     Creates the stacked bar chart.\n     * @description See BasicBarChart.js for the description. The intent is the\n     *              same with the exception that this class defines its own\n     *              _BindData and _DrawBars functions.\n     */\n    CreateChart()\n    {\n        // Create a virtual container for all of our data elements.\n        var virtualDOM = document.createElement('custom');\n        var custom = d3.select(virtualDOM);\n\n        this._BindData(custom);\n        this._DrawBars(custom);\n    }\n\n    /**\n     * @summary     Binds data to custom DOM elements.\n     * @description See BasicBarChart.js for intent. The only real difference\n     *              is that this class needs to also bind an id to each custom\n     *              DOM element.\n     */\n    _BindData(custom)\n    {\n        // Standard D3 code, with the exception that instead of actually drawing\n        // the chart, this code just binds the given pieces of data to the \n        // custom.rect elements contained within custom.\n        custom.selectAll('custom.rect')\n            .data(this._data)\n            .enter()\n            .append('custom')\n            .attr('class', 'rect')\n            .attr('id', (d) => d.category)\n            .attr('x', (d) => this._xScale(d.category))\n            .attr('y', (d) => this._chartHeight)\n            .attr('width', (d) => this._xScale.bandwidth())\n            .attr('height', (d) => -(this._chartHeight - this._yScale(d.value)))\n            .attr('fillStyle', (d) => d.color);\n    }\n\n    /**\n     * @summary     Adds bars to the Konva.Group.\n     * @description See BasicBarChart for the description. \n     */\n    _DrawBars(custom)\n    {\n        var elements = custom.selectAll('custom.rect');\n        var helper = new Konva.Group();\n\n        // Here, the variable groups contains a set of the categories contained\n        // within _data (essentially, it returns a unique list of the categories \n        // found in _data).\n        // \n        // The variable offsetHelper then uses groups to create a JSON object \n        // where the keys are the unique categories found when group was created.\n        // \n        // Note: this is necessary because offsetHelper, as you will see, is \n        // essential to building the stacked bar chart.\n        var groups = this.GetGroups();\n        var offsetHelper = this._CreateOffsetHelper(groups);\n\n        // Here, elements.each can essentially be thought of as a for loop that \n        // iterates through all of the custom.rect's in custom.\n        elements.each(function(d,i) {\n            // NOTE: that here an anonymous function is used instead of an arrow \n            // function. This is because anonymous functions do not preserve the \n            // context of the \"this\" keyword. \n            //\n            // If an arrow function were to be used, \"this\" would refer to the \n            // StackedBarChart object that this function is located in while \n            // if an anonymous function is used, \"this\" refers to the custom.rect \n            // element we are currently on.\n            var node = d3.select(this);\n\n            // Add the bar to helper.\n            helper.add(new Konva.Rect({\n                x: node.attr('x'),\n                y: node.attr('y') - offsetHelper[node.attr('id')],\n                width: node.attr('width'),\n                height: node.attr('height'),\n                fill: node.attr('fillStyle'),\n                draggable: false,\n            }));\n            \n            // Without the following line, all of the bars would start at the bottom of\n            // the graph instead of being offset by the current height of the bar.\n            offsetHelper[node.attr('id')] += -1 * node.attr('height');\n        });\n        // Rotate the graph and add helper to the canvas.\n        helper.rotate(this._rotateBy);\n        this._group.add(helper);\n    }\n}\n\nexport { StackedBarChart };"]},"metadata":{},"sourceType":"module"}