{"ast":null,"code":"import { AIconBarDecorator } from './AIconBarDecorator';\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass IconCategoryDecorator extends AIconBarDecorator {\n  constructor({\n    chart,\n    isWithinBars = true,\n    isTop = true,\n    font = {\n      fontSize: 10,\n      fontFamily: 'Times New Roman, Times, serif',\n      textColor: 'black'\n    }\n  }) {\n    super(chart);\n    this._isWithinBars = isWithinBars;\n    this._isTop = isTop;\n    this._keys = this.GetGroups();\n    this._font = Lodash.cloneDeep(font);\n  }\n  /**\n   * @summary     Creates bar chart and adds category labels.\n   * @description Calls _chart's CreateBarChart method and then creates\n   *              the labels by calling _CreateLabels.\n   */\n\n\n  CreateChart() {\n    this._chart.CreateChart();\n\n    this._CreateIconLabels();\n  }\n\n  GetDecoratorSettings() {\n    return {\n      category: {\n        location: {\n          isWithinBars: this._isWithinBars,\n          isTop: this._isTop\n        },\n        font: this._font\n      }\n    };\n  }\n\n  UpdateDecorator(data) {\n    super.UpdateDecorator(data);\n    this._keys = this.GetGroups();\n  }\n  /**\n  * @summary     Creates labels for the IconBarChart type.\n  * @description Dynamically places labels onto an IconBarChart either above\n  *              or below the icon chart.\n  */\n\n\n  _CreateIconLabels() {\n    var iter = this._keys.values();\n\n    var helper = new Konva.Group();\n\n    var minCategory = this._FindMinCategory();\n\n    var counter = 0;\n\n    for (var i = iter.next().value; i != null; i = iter.next().value) {\n      /**\n       * Setting up the position of the category labels.\n       * \n       * Note that:\n       *  1. xIcon represents the starting x position for the icon\n       *  2. xMiddle represents the middle of the icon\n       *  3. x is the final position of the category label.\n       *  4. For some reason, we have to multiple the icon height by 2.1.\n       *     Not sure why, but it holds for all icons.\n       */\n      var offset = counter === 0 ? 0 : this._padding;\n\n      var width = this._GetFontSize(i, this._font);\n\n      var iconWidth = this._GetIconWidth(this._icon, this._iconSize);\n\n      var iconHeight = this._GetIconHeight(this._icon, this._iconSize);\n\n      var xIcon = this._xScale(i) - this._xScale(minCategory) + offset,\n          xMiddle = xIcon + iconWidth / 2,\n          x = xMiddle - width / 2;\n      var y = this._isTop ? 25 : 2.1 * iconHeight;\n      var text = new Konva.Text({\n        text: i,\n        x: x,\n        y: y,\n        fontSize: this._font.fontSize,\n        fontFamily: this._font.fontFamily,\n        fill: this._font.textColor\n      });\n      helper.add(text);\n      counter++;\n    }\n\n    this._group.add(helper);\n  }\n\n}\n\nexport { IconCategoryDecorator };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/js/Charts/IconBarChart/Decorators/IconCategoryDecorator.js"],"names":["AIconBarDecorator","Konva","Lodash","IconCategoryDecorator","constructor","chart","isWithinBars","isTop","font","fontSize","fontFamily","textColor","_isWithinBars","_isTop","_keys","GetGroups","_font","cloneDeep","CreateChart","_chart","_CreateIconLabels","GetDecoratorSettings","category","location","UpdateDecorator","data","iter","values","helper","Group","minCategory","_FindMinCategory","counter","i","next","value","offset","_padding","width","_GetFontSize","iconWidth","_GetIconWidth","_icon","_iconSize","iconHeight","_GetIconHeight","xIcon","_xScale","xMiddle","x","y","text","Text","fill","add","_group"],"mappings":"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","sourcesContent":["import { AIconBarDecorator } from './AIconBarDecorator';\nimport Konva from 'konva';\nimport Lodash from 'lodash';\n\nclass IconCategoryDecorator extends AIconBarDecorator\n{\n    constructor({\n        chart, \n        isWithinBars = true, \n        isTop = true, \n        font = { \n            fontSize : 10, \n            fontFamily : 'Times New Roman, Times, serif', \n            textColor : 'black'\n        },\n    })\n    {\n        super(chart);\n        this._isWithinBars = isWithinBars;\n        this._isTop = isTop;\n        this._keys = this.GetGroups();\n        this._font = Lodash.cloneDeep(font);\n    }\n\n    /**\n     * @summary     Creates bar chart and adds category labels.\n     * @description Calls _chart's CreateBarChart method and then creates\n     *              the labels by calling _CreateLabels.\n     */\n    CreateChart()\n    {\n        this._chart.CreateChart();\n        this._CreateIconLabels();\n    }\n\n    GetDecoratorSettings()\n    {\n        return {\n            category: {\n                location: {\n                    isWithinBars: this._isWithinBars,\n                    isTop: this._isTop,\n                },\n                font: this._font\n            }\n        }\n    }\n\n    UpdateDecorator(data)\n    {\n        super.UpdateDecorator(data);\n        this._keys = this.GetGroups();\n    }\n\n     /**\n     * @summary     Creates labels for the IconBarChart type.\n     * @description Dynamically places labels onto an IconBarChart either above\n     *              or below the icon chart.\n     */\n      _CreateIconLabels()\n      {\n        var iter = this._keys.values();\n        var helper = new Konva.Group();\n        var minCategory = this._FindMinCategory();\n        var counter = 0;\n\n        for (var i = iter.next().value; i != null; i = iter.next().value) {\n            /**\n             * Setting up the position of the category labels.\n             * \n             * Note that:\n             *  1. xIcon represents the starting x position for the icon\n             *  2. xMiddle represents the middle of the icon\n             *  3. x is the final position of the category label.\n             *  4. For some reason, we have to multiple the icon height by 2.1.\n             *     Not sure why, but it holds for all icons.\n             */\n            var offset = (counter === 0) ? 0 : this._padding;\n            var width = this._GetFontSize(i, this._font);\n            var iconWidth = this._GetIconWidth(this._icon, this._iconSize);\n            var iconHeight = this._GetIconHeight(this._icon, this._iconSize);\n            var xIcon = (this._xScale(i) - this._xScale(minCategory) + offset),\n                xMiddle = xIcon + iconWidth / 2,\n                x = xMiddle - width / 2;\n            var y = (this._isTop) ? 25 : 2.1 * iconHeight;\n\n            var text = new Konva.Text({\n                text: i,\n                x: x,\n                y: y,\n                fontSize: this._font.fontSize,\n                fontFamily: this._font.fontFamily,\n                fill: this._font.textColor,\n            });\n\n            helper.add(text);\n            counter++;\n        }\n        this._group.add(helper); \n    }\n}\n\nexport { IconCategoryDecorator };"]},"metadata":{},"sourceType":"module"}