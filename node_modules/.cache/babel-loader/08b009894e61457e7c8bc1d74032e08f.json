{"ast":null,"code":"var _jsxFileName = \"/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/IconEditor.js\";\nimport React from 'react';\nimport { LabeledTextField, LabeledSlider, LabeledColorPicker, Menu } from './Components/index';\nimport '../../../css/React/Editors/Tabless.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass IconEditor extends React.Component {\n  render() {\n    if (this.props.settings === 0) return false;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabless-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tabless-editor\",\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          name: \"Size Settings\",\n          isOpen: false,\n          content: this._GetSizeSettings(),\n          checkbox: {\n            displayCheckbox: false\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Menu, {\n          name: \"Display Settings\",\n          isOpen: false,\n          content: this._GetDisplaySettings(),\n          checkbox: {\n            displayCheckbox: false\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this);\n  }\n\n  _SetGraphicSettings(key, value) {\n    let settings = this.props.settings;\n    settings[key] = value;\n    this.props.setGraphicSettings(settings);\n  }\n\n  _GetSizeSettings() {\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(LabeledTextField, {\n        label: \"Size:\",\n        index: 'font-size',\n        initialValue: this.props.settings.fontSize,\n        rows: 1,\n        cols: 5,\n        onChange: (d, i) => {\n          this._SetGraphicSettings('fontSize', parseFloat(d));\n        }\n      }, 'icon-size', false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)];\n  }\n\n  _GetDisplaySettings() {\n    return [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(LabeledSlider, {\n        label: \"Opacity:\",\n        value: this.props.settings.opacity,\n        min: 0,\n        max: 1,\n        step: 0.1,\n        onChange: event => {\n          this._SetGraphicSettings('opacity', event);\n        },\n        width: \"150px\"\n      }, 'icon-opacity', false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LabeledColorPicker, {\n        label: \"Color:\",\n        color: this.props.settings.fill,\n        onChange: value => {\n          this._SetGraphicSettings('fill', value);\n        }\n      }, 'icon-color', false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)];\n  }\n\n}\n\nexport { IconEditor };","map":{"version":3,"sources":["/Users/mialee/Documents/GitHub/ShareNWWebtool/src/components/InfographicEditor/Editors/IconEditor.js"],"names":["React","LabeledTextField","LabeledSlider","LabeledColorPicker","Menu","IconEditor","Component","render","props","settings","_GetSizeSettings","displayCheckbox","_GetDisplaySettings","_SetGraphicSettings","key","value","setGraphicSettings","fontSize","d","i","parseFloat","opacity","event","fill"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { LabeledTextField, LabeledSlider, LabeledColorPicker, Menu } from './Components/index';\n\nimport '../../../css/React/Editors/Tabless.css'\n\nclass IconEditor extends React.Component \n{\n    render()\n    {\n        if (this.props.settings === 0) return false;\n        return (\n            <div className='tabless-container'>\n                <div className='tabless-editor'>\n                    <Menu \n                        name='Size Settings'\n                        isOpen={false}\n                        content={this._GetSizeSettings()}\n                        checkbox={{\n                            displayCheckbox: false\n                        }}\n                    />\n                    <Menu \n                        name='Display Settings'\n                        isOpen={false}\n                        content={this._GetDisplaySettings()}\n                        checkbox={{\n                            displayCheckbox: false\n                        }}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    _SetGraphicSettings(key, value)\n    {\n        let settings = this.props.settings;\n        settings[key] = value;\n        this.props.setGraphicSettings(settings);\n    }\n\n    _GetSizeSettings()\n    {\n        return [\n            <div className='center'>\n                <LabeledTextField \n                    key={'icon-size'}\n                    label='Size:'\n                    index={'font-size'}\n                    initialValue={this.props.settings.fontSize}\n                    rows={1}\n                    cols={5}\n                    onChange={(d, i) => { \n                        this._SetGraphicSettings('fontSize', parseFloat(d));\n                    }}\n                />\n            </div>\n        ];\n    }\n\n    _GetDisplaySettings()\n    {\n        return [   \n            <div className='center'>\n                <LabeledSlider \n                    key={'icon-opacity'}\n                    label='Opacity:'\n                    value={this.props.settings.opacity}\n                    min={0}\n                    max={1}\n                    step={0.1}\n                    onChange={(event) => { \n                        this._SetGraphicSettings('opacity', event);\n                    }}\n                    width='150px'\n                />\n                <LabeledColorPicker \n                    key={'icon-color'}\n                    label='Color:'\n                    color={this.props.settings.fill}\n                    onChange={(value) => {\n                        this._SetGraphicSettings('fill', value)\n                    }}\n                />\n            </div>\n        ];\n    }\n}\n\nexport { IconEditor };"]},"metadata":{},"sourceType":"module"}